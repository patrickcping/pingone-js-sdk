/**
 * PingOne Platform API - Authorize
 * The PingOne Platform API covering the PingOne Authorize service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import APIServerAuthorizationServer from './APIServerAuthorizationServer';
import LinksHATEOAS from './LinksHATEOAS';

/**
 * The APIServer model module.
 * @module model/APIServer
 * @version 2023-06-29
 */
class APIServer {
    /**
     * Constructs a new <code>APIServer</code>.
     * @alias module:model/APIServer
     * @param authorizationServer {module:model/APIServerAuthorizationServer} 
     * @param baseURLs {Array.<String>} An array of string that specifies the possible base URLs that an end-user will use to access the APIs hosted on the customer's API server. Multiple base URLs may be specified to support cases where the same API may be available from multiple URLs (for example, from a user-friendly domain URL and an internal domain URL). Base URLs must be valid absolute URLs with the https or http scheme. If the path component is non-empty, it must not end in a trailing slash. The path must not contain empty backslash, dot, or double-dot segments. It must not have a query or fragment present, and the host portion of the authority must be a DNS hostname or valid IP (IPv4 or IPv6). The length must be less than or equal to 256 characters.
     * @param name {String} A string that specifies the API server resource name. The name value must be unique among all API servers, and it must be a valid resource name.
     */
    constructor(authorizationServer, baseURLs, name) { 
        
        APIServer.initialize(this, authorizationServer, baseURLs, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorizationServer, baseURLs, name) { 
        obj['authorizationServer'] = authorizationServer;
        obj['baseURLs'] = baseURLs;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>APIServer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APIServer} obj Optional instance to populate.
     * @return {module:model/APIServer} The populated <code>APIServer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APIServer();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('authorizationServer')) {
                obj['authorizationServer'] = APIServerAuthorizationServer.constructFromObject(data['authorizationServer']);
            }
            if (data.hasOwnProperty('baseURLs')) {
                obj['baseURLs'] = ApiClient.convertToType(data['baseURLs'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APIServer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APIServer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of APIServer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `authorizationServer`
        if (data['authorizationServer']) { // data not null
          APIServerAuthorizationServer.validateJSON(data['authorizationServer']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['baseURLs'])) {
            throw new Error("Expected the field `baseURLs` to be an array in the JSON data but got " + data['baseURLs']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

APIServer.RequiredProperties = ["authorizationServer", "baseURLs", "name"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
APIServer.prototype['_links'] = undefined;

/**
 * @member {module:model/APIServerAuthorizationServer} authorizationServer
 */
APIServer.prototype['authorizationServer'] = undefined;

/**
 * An array of string that specifies the possible base URLs that an end-user will use to access the APIs hosted on the customer's API server. Multiple base URLs may be specified to support cases where the same API may be available from multiple URLs (for example, from a user-friendly domain URL and an internal domain URL). Base URLs must be valid absolute URLs with the https or http scheme. If the path component is non-empty, it must not end in a trailing slash. The path must not contain empty backslash, dot, or double-dot segments. It must not have a query or fragment present, and the host portion of the authority must be a DNS hostname or valid IP (IPv4 or IPv6). The length must be less than or equal to 256 characters.
 * @member {Array.<String>} baseURLs
 */
APIServer.prototype['baseURLs'] = undefined;

/**
 * A string that specifies the resource's unique identifier.
 * @member {String} id
 */
APIServer.prototype['id'] = undefined;

/**
 * A string that specifies the API server resource name. The name value must be unique among all API servers, and it must be a valid resource name.
 * @member {String} name
 */
APIServer.prototype['name'] = undefined;

/**
 * A map from the operation name to the operation object. Each key must be valid ObjectName, and each value must be a valid operation. Each key must be unique within the operations object, which means the operation key is unique within an API server. No duplicate operation values are allowed; operations with the same paths and methods members are not allowed. The operations object is limited to 25 keys (25 individual operations).
 * @member {Object} operations
 */
APIServer.prototype['operations'] = undefined;






export default APIServer;

