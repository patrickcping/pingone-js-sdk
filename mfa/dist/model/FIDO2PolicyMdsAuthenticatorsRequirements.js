/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFIDO2PolicyMDSAuthenticatorOption from './EnumFIDO2PolicyMDSAuthenticatorOption';
import FIDO2PolicyMdsAuthenticatorsRequirementsAllowedAuthenticatorsInner from './FIDO2PolicyMdsAuthenticatorsRequirementsAllowedAuthenticatorsInner';

/**
 * The FIDO2PolicyMdsAuthenticatorsRequirements model module.
 * @module model/FIDO2PolicyMdsAuthenticatorsRequirements
 * @version 2023-06-29
 */
class FIDO2PolicyMdsAuthenticatorsRequirements {
  /**
   * Constructs a new <code>FIDO2PolicyMdsAuthenticatorsRequirements</code>.
   * Used to specify whether attestation is requested from the authenticator, and whether this information is used to restrict authenticator usage.
   * @alias module:model/FIDO2PolicyMdsAuthenticatorsRequirements
   * @param enforceDuringAuthentication {Boolean} Set to true if you want the device characteristics related to attestation to be checked again at each authentication attempt and not just once during registration. Set to false to have them checked only at registration.
   * @param option {module:model/EnumFIDO2PolicyMDSAuthenticatorOption} 
   */
  constructor(enforceDuringAuthentication, option) {
    FIDO2PolicyMdsAuthenticatorsRequirements.initialize(this, enforceDuringAuthentication, option);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, enforceDuringAuthentication, option) {
    obj['enforceDuringAuthentication'] = enforceDuringAuthentication;
    obj['option'] = option;
  }

  /**
   * Constructs a <code>FIDO2PolicyMdsAuthenticatorsRequirements</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FIDO2PolicyMdsAuthenticatorsRequirements} obj Optional instance to populate.
   * @return {module:model/FIDO2PolicyMdsAuthenticatorsRequirements} The populated <code>FIDO2PolicyMdsAuthenticatorsRequirements</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FIDO2PolicyMdsAuthenticatorsRequirements();
      if (data.hasOwnProperty('allowedAuthenticators')) {
        obj['allowedAuthenticators'] = ApiClient.convertToType(data['allowedAuthenticators'], [FIDO2PolicyMdsAuthenticatorsRequirementsAllowedAuthenticatorsInner]);
      }
      if (data.hasOwnProperty('enforceDuringAuthentication')) {
        obj['enforceDuringAuthentication'] = ApiClient.convertToType(data['enforceDuringAuthentication'], 'Boolean');
      }
      if (data.hasOwnProperty('option')) {
        obj['option'] = EnumFIDO2PolicyMDSAuthenticatorOption.constructFromObject(data['option']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FIDO2PolicyMdsAuthenticatorsRequirements</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FIDO2PolicyMdsAuthenticatorsRequirements</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of FIDO2PolicyMdsAuthenticatorsRequirements.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    if (data['allowedAuthenticators']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['allowedAuthenticators'])) {
        throw new Error("Expected the field `allowedAuthenticators` to be an array in the JSON data but got " + data['allowedAuthenticators']);
      }
      // validate the optional field `allowedAuthenticators` (array)
      for (const item of data['allowedAuthenticators']) {
        FIDO2PolicyMdsAuthenticatorsRequirementsAllowedAuthenticatorsInner.validateJSON(item);
      }
      ;
    }
    return true;
  }
}
FIDO2PolicyMdsAuthenticatorsRequirements.RequiredProperties = ["enforceDuringAuthentication", "option"];

/**
 * If you set `mdsAuthenticatorsRequirements.option` to `SPECIFIC`, use this array to specify the authenticators that you want to allow.
 * @member {Array.<module:model/FIDO2PolicyMdsAuthenticatorsRequirementsAllowedAuthenticatorsInner>} allowedAuthenticators
 */
FIDO2PolicyMdsAuthenticatorsRequirements.prototype['allowedAuthenticators'] = undefined;

/**
 * Set to true if you want the device characteristics related to attestation to be checked again at each authentication attempt and not just once during registration. Set to false to have them checked only at registration.
 * @member {Boolean} enforceDuringAuthentication
 */
FIDO2PolicyMdsAuthenticatorsRequirements.prototype['enforceDuringAuthentication'] = undefined;

/**
 * @member {module:model/EnumFIDO2PolicyMDSAuthenticatorOption} option
 */
FIDO2PolicyMdsAuthenticatorsRequirements.prototype['option'] = undefined;
export default FIDO2PolicyMdsAuthenticatorsRequirements;