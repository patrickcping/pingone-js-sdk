/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFIDO2PolicyAttestationRequirements from './EnumFIDO2PolicyAttestationRequirements';
import EnumFIDO2PolicyAuthenticatorAttachment from './EnumFIDO2PolicyAuthenticatorAttachment';
import EnumFIDO2PolicyDiscoverableCredentials from './EnumFIDO2PolicyDiscoverableCredentials';
import FIDO2PolicyBackupEligibility from './FIDO2PolicyBackupEligibility';
import FIDO2PolicyMdsAuthenticatorsRequirements from './FIDO2PolicyMdsAuthenticatorsRequirements';
import FIDO2PolicyUserDisplayNameAttributes from './FIDO2PolicyUserDisplayNameAttributes';
import FIDO2PolicyUserVerification from './FIDO2PolicyUserVerification';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';

/**
 * The FIDO2Policy model module.
 * @module model/FIDO2Policy
 * @version 2023-06-29
 */
class FIDO2Policy {
  /**
   * Constructs a new <code>FIDO2Policy</code>.
   * @alias module:model/FIDO2Policy
   * @param attestationRequirements {module:model/EnumFIDO2PolicyAttestationRequirements} 
   * @param authenticatorAttachment {module:model/EnumFIDO2PolicyAuthenticatorAttachment} 
   * @param backupEligibility {module:model/FIDO2PolicyBackupEligibility} 
   * @param deviceDisplayName {String} The name to display for the device in registration and authentication windows. Can be up to 100 characters. If you want to use translatable text, you can use any of the keys listed on the *FIDO Policy* page of the *Self-Service* module and the *Sign On Policy* module. The value of the parameter should include only the part of the key name that comes after the module name, for example, `fidoPolicy.deviceDisplayName01` or `fidoPolicy.deviceDisplayName07`. See the pages in the UI for the full list of keys. For more information on translatable keys, see [Modifying translatable keys](https://docs.pingidentity.com/access/sources/dita/topic?category=p1&resourceid=pingone_modifying_translatable_keys) in the PingOne documentation.
   * @param discoverableCredentials {module:model/EnumFIDO2PolicyDiscoverableCredentials} 
   * @param mdsAuthenticatorsRequirements {module:model/FIDO2PolicyMdsAuthenticatorsRequirements} 
   * @param name {String} The name to use for the FIDO policy. Can be up to 256 characters.
   * @param relyingPartyId {String} The ID of the relying party. The value should be a domain name, such as `example.com` (in lower-case characters).
   * @param userDisplayNameAttributes {module:model/FIDO2PolicyUserDisplayNameAttributes} 
   * @param userVerification {module:model/FIDO2PolicyUserVerification} 
   */
  constructor(attestationRequirements, authenticatorAttachment, backupEligibility, deviceDisplayName, discoverableCredentials, mdsAuthenticatorsRequirements, name, relyingPartyId, userDisplayNameAttributes, userVerification) {
    FIDO2Policy.initialize(this, attestationRequirements, authenticatorAttachment, backupEligibility, deviceDisplayName, discoverableCredentials, mdsAuthenticatorsRequirements, name, relyingPartyId, userDisplayNameAttributes, userVerification);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, attestationRequirements, authenticatorAttachment, backupEligibility, deviceDisplayName, discoverableCredentials, mdsAuthenticatorsRequirements, name, relyingPartyId, userDisplayNameAttributes, userVerification) {
    obj['attestationRequirements'] = attestationRequirements;
    obj['authenticatorAttachment'] = authenticatorAttachment;
    obj['backupEligibility'] = backupEligibility;
    obj['deviceDisplayName'] = deviceDisplayName;
    obj['discoverableCredentials'] = discoverableCredentials;
    obj['mdsAuthenticatorsRequirements'] = mdsAuthenticatorsRequirements;
    obj['name'] = name;
    obj['relyingPartyId'] = relyingPartyId;
    obj['userDisplayNameAttributes'] = userDisplayNameAttributes;
    obj['userVerification'] = userVerification;
  }

  /**
   * Constructs a <code>FIDO2Policy</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FIDO2Policy} obj Optional instance to populate.
   * @return {module:model/FIDO2Policy} The populated <code>FIDO2Policy</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FIDO2Policy();
      if (data.hasOwnProperty('_links')) {
        obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('environment')) {
        obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
      }
      if (data.hasOwnProperty('createdAt')) {
        obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
      }
      if (data.hasOwnProperty('updatedAt')) {
        obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
      }
      if (data.hasOwnProperty('attestationRequirements')) {
        obj['attestationRequirements'] = EnumFIDO2PolicyAttestationRequirements.constructFromObject(data['attestationRequirements']);
      }
      if (data.hasOwnProperty('authenticatorAttachment')) {
        obj['authenticatorAttachment'] = EnumFIDO2PolicyAuthenticatorAttachment.constructFromObject(data['authenticatorAttachment']);
      }
      if (data.hasOwnProperty('backupEligibility')) {
        obj['backupEligibility'] = FIDO2PolicyBackupEligibility.constructFromObject(data['backupEligibility']);
      }
      if (data.hasOwnProperty('default')) {
        obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('deviceAuthenticationPolicies')) {
        obj['deviceAuthenticationPolicies'] = ApiClient.convertToType(data['deviceAuthenticationPolicies'], ['String']);
      }
      if (data.hasOwnProperty('deviceDisplayName')) {
        obj['deviceDisplayName'] = ApiClient.convertToType(data['deviceDisplayName'], 'String');
      }
      if (data.hasOwnProperty('discoverableCredentials')) {
        obj['discoverableCredentials'] = EnumFIDO2PolicyDiscoverableCredentials.constructFromObject(data['discoverableCredentials']);
      }
      if (data.hasOwnProperty('mdsAuthenticatorsRequirements')) {
        obj['mdsAuthenticatorsRequirements'] = FIDO2PolicyMdsAuthenticatorsRequirements.constructFromObject(data['mdsAuthenticatorsRequirements']);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('relyingPartyId')) {
        obj['relyingPartyId'] = ApiClient.convertToType(data['relyingPartyId'], 'String');
      }
      if (data.hasOwnProperty('userDisplayNameAttributes')) {
        obj['userDisplayNameAttributes'] = FIDO2PolicyUserDisplayNameAttributes.constructFromObject(data['userDisplayNameAttributes']);
      }
      if (data.hasOwnProperty('userVerification')) {
        obj['userVerification'] = FIDO2PolicyUserVerification.constructFromObject(data['userVerification']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FIDO2Policy</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FIDO2Policy</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of FIDO2Policy.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
      throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
    }
    // validate the optional field `environment`
    if (data['environment']) {
      // data not null
      ObjectEnvironment.validateJSON(data['environment']);
    }
    // validate the optional field `backupEligibility`
    if (data['backupEligibility']) {
      // data not null
      FIDO2PolicyBackupEligibility.validateJSON(data['backupEligibility']);
    }
    // ensure the json data is a string
    if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
      throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
    }
    // ensure the json data is an array
    if (!Array.isArray(data['deviceAuthenticationPolicies'])) {
      throw new Error("Expected the field `deviceAuthenticationPolicies` to be an array in the JSON data but got " + data['deviceAuthenticationPolicies']);
    }
    // ensure the json data is a string
    if (data['deviceDisplayName'] && !(typeof data['deviceDisplayName'] === 'string' || data['deviceDisplayName'] instanceof String)) {
      throw new Error("Expected the field `deviceDisplayName` to be a primitive type in the JSON string but got " + data['deviceDisplayName']);
    }
    // validate the optional field `mdsAuthenticatorsRequirements`
    if (data['mdsAuthenticatorsRequirements']) {
      // data not null
      FIDO2PolicyMdsAuthenticatorsRequirements.validateJSON(data['mdsAuthenticatorsRequirements']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    // ensure the json data is a string
    if (data['relyingPartyId'] && !(typeof data['relyingPartyId'] === 'string' || data['relyingPartyId'] instanceof String)) {
      throw new Error("Expected the field `relyingPartyId` to be a primitive type in the JSON string but got " + data['relyingPartyId']);
    }
    // validate the optional field `userDisplayNameAttributes`
    if (data['userDisplayNameAttributes']) {
      // data not null
      FIDO2PolicyUserDisplayNameAttributes.validateJSON(data['userDisplayNameAttributes']);
    }
    // validate the optional field `userVerification`
    if (data['userVerification']) {
      // data not null
      FIDO2PolicyUserVerification.validateJSON(data['userVerification']);
    }
    return true;
  }
}
FIDO2Policy.RequiredProperties = ["attestationRequirements", "authenticatorAttachment", "backupEligibility", "deviceDisplayName", "discoverableCredentials", "mdsAuthenticatorsRequirements", "name", "relyingPartyId", "userDisplayNameAttributes", "userVerification"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
FIDO2Policy.prototype['_links'] = undefined;

/**
 * FIDO policy's UUID.
 * @member {String} id
 */
FIDO2Policy.prototype['id'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
FIDO2Policy.prototype['environment'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} createdAt
 */
FIDO2Policy.prototype['createdAt'] = undefined;

/**
 * The time the resource was last updated.
 * @member {Date} updatedAt
 */
FIDO2Policy.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/EnumFIDO2PolicyAttestationRequirements} attestationRequirements
 */
FIDO2Policy.prototype['attestationRequirements'] = undefined;

/**
 * @member {module:model/EnumFIDO2PolicyAuthenticatorAttachment} authenticatorAttachment
 */
FIDO2Policy.prototype['authenticatorAttachment'] = undefined;

/**
 * @member {module:model/FIDO2PolicyBackupEligibility} backupEligibility
 */
FIDO2Policy.prototype['backupEligibility'] = undefined;

/**
 * Whether this policy should serve as the default FIDO policy.
 * @member {Boolean} default
 */
FIDO2Policy.prototype['default'] = undefined;

/**
 * Description of the FIDO policy.
 * @member {String} description
 */
FIDO2Policy.prototype['description'] = undefined;

/**
 * The device authentication policies that use the relevant FIDO policy. If you include the parameter `expand=deviceAuthenticationPolicies` in the URL of the request, this array is included in the response when reading FIDO policies. Each object in the array contains the ID and the name of the device authentication policy.
 * @member {Array.<String>} deviceAuthenticationPolicies
 */
FIDO2Policy.prototype['deviceAuthenticationPolicies'] = undefined;

/**
 * The name to display for the device in registration and authentication windows. Can be up to 100 characters. If you want to use translatable text, you can use any of the keys listed on the *FIDO Policy* page of the *Self-Service* module and the *Sign On Policy* module. The value of the parameter should include only the part of the key name that comes after the module name, for example, `fidoPolicy.deviceDisplayName01` or `fidoPolicy.deviceDisplayName07`. See the pages in the UI for the full list of keys. For more information on translatable keys, see [Modifying translatable keys](https://docs.pingidentity.com/access/sources/dita/topic?category=p1&resourceid=pingone_modifying_translatable_keys) in the PingOne documentation.
 * @member {String} deviceDisplayName
 */
FIDO2Policy.prototype['deviceDisplayName'] = undefined;

/**
 * @member {module:model/EnumFIDO2PolicyDiscoverableCredentials} discoverableCredentials
 */
FIDO2Policy.prototype['discoverableCredentials'] = undefined;

/**
 * @member {module:model/FIDO2PolicyMdsAuthenticatorsRequirements} mdsAuthenticatorsRequirements
 */
FIDO2Policy.prototype['mdsAuthenticatorsRequirements'] = undefined;

/**
 * The name to use for the FIDO policy. Can be up to 256 characters.
 * @member {String} name
 */
FIDO2Policy.prototype['name'] = undefined;

/**
 * The ID of the relying party. The value should be a domain name, such as `example.com` (in lower-case characters).
 * @member {String} relyingPartyId
 */
FIDO2Policy.prototype['relyingPartyId'] = undefined;

/**
 * @member {module:model/FIDO2PolicyUserDisplayNameAttributes} userDisplayNameAttributes
 */
FIDO2Policy.prototype['userDisplayNameAttributes'] = undefined;

/**
 * @member {module:model/FIDO2PolicyUserVerification} userVerification
 */
FIDO2Policy.prototype['userVerification'] = undefined;
export default FIDO2Policy;