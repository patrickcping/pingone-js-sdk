/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumMFAPushCredentialAttrType from './EnumMFAPushCredentialAttrType';
import MFAPushCredentialAPNS from './MFAPushCredentialAPNS';
import MFAPushCredentialFCM from './MFAPushCredentialFCM';
import MFAPushCredentialFCMHTTPV1 from './MFAPushCredentialFCMHTTPV1';
import MFAPushCredentialHMS from './MFAPushCredentialHMS';

/**
 * The MFAPushCredentialRequest model module.
 * @module model/MFAPushCredentialRequest
 * @version 2023-06-29
 */
class MFAPushCredentialRequest {
  /**
   * Constructs a new <code>MFAPushCredentialRequest</code>.
   * @alias module:model/MFAPushCredentialRequest
   * @param {(module:model/MFAPushCredentialAPNS|module:model/MFAPushCredentialFCM|module:model/MFAPushCredentialFCMHTTPV1|module:model/MFAPushCredentialHMS)} instance The actual instance to initialize MFAPushCredentialRequest.
   */
  constructor(instance = null) {
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    try {
      if (typeof instance === "MFAPushCredentialAPNS") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        MFAPushCredentialAPNS.validateJSON(instance); // throw an exception if no match
        // create MFAPushCredentialAPNS from JS object
        this.actualInstance = MFAPushCredentialAPNS.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into MFAPushCredentialAPNS
      errorMessages.push("Failed to construct MFAPushCredentialAPNS: " + err);
    }
    try {
      if (typeof instance === "MFAPushCredentialFCM") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        MFAPushCredentialFCM.validateJSON(instance); // throw an exception if no match
        // create MFAPushCredentialFCM from JS object
        this.actualInstance = MFAPushCredentialFCM.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into MFAPushCredentialFCM
      errorMessages.push("Failed to construct MFAPushCredentialFCM: " + err);
    }
    try {
      if (typeof instance === "MFAPushCredentialFCMHTTPV1") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        MFAPushCredentialFCMHTTPV1.validateJSON(instance); // throw an exception if no match
        // create MFAPushCredentialFCMHTTPV1 from JS object
        this.actualInstance = MFAPushCredentialFCMHTTPV1.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into MFAPushCredentialFCMHTTPV1
      errorMessages.push("Failed to construct MFAPushCredentialFCMHTTPV1: " + err);
    }
    try {
      if (typeof instance === "MFAPushCredentialHMS") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        MFAPushCredentialHMS.validateJSON(instance); // throw an exception if no match
        // create MFAPushCredentialHMS from JS object
        this.actualInstance = MFAPushCredentialHMS.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into MFAPushCredentialHMS
      errorMessages.push("Failed to construct MFAPushCredentialHMS: " + err);
    }
    if (match > 1) {
      throw new Error("Multiple matches found constructing `MFAPushCredentialRequest` with oneOf schemas MFAPushCredentialAPNS, MFAPushCredentialFCM, MFAPushCredentialFCMHTTPV1, MFAPushCredentialHMS. Input: " + JSON.stringify(instance));
    } else if (match === 0) {
      this.actualInstance = null; // clear the actual instance in case there are multiple matches
      throw new Error("No match found constructing `MFAPushCredentialRequest` with oneOf schemas MFAPushCredentialAPNS, MFAPushCredentialFCM, MFAPushCredentialFCMHTTPV1, MFAPushCredentialHMS. Details: " + errorMessages.join(", "));
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>MFAPushCredentialRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MFAPushCredentialRequest} obj Optional instance to populate.
   * @return {module:model/MFAPushCredentialRequest} The populated <code>MFAPushCredentialRequest</code> instance.
   */
  static constructFromObject(data, obj) {
    return new MFAPushCredentialRequest(data);
  }

  /**
   * Gets the actual instance, which can be <code>MFAPushCredentialAPNS</code>, <code>MFAPushCredentialFCM</code>, <code>MFAPushCredentialFCMHTTPV1</code>, <code>MFAPushCredentialHMS</code>.
   * @return {(module:model/MFAPushCredentialAPNS|module:model/MFAPushCredentialFCM|module:model/MFAPushCredentialFCMHTTPV1|module:model/MFAPushCredentialHMS)} The actual instance.
   */
  getActualInstance() {
    return this.actualInstance;
  }

  /**
   * Sets the actual instance, which can be <code>MFAPushCredentialAPNS</code>, <code>MFAPushCredentialFCM</code>, <code>MFAPushCredentialFCMHTTPV1</code>, <code>MFAPushCredentialHMS</code>.
   * @param {(module:model/MFAPushCredentialAPNS|module:model/MFAPushCredentialFCM|module:model/MFAPushCredentialFCMHTTPV1|module:model/MFAPushCredentialHMS)} obj The actual instance.
   */
  setActualInstance(obj) {
    this.actualInstance = MFAPushCredentialRequest.constructFromObject(obj).getActualInstance();
  }

  /**
   * Returns the JSON representation of the actual instance.
   * @return {string}
   */
  toJSON = function () {
    return this.getActualInstance();
  };

  /**
   * Create an instance of MFAPushCredentialRequest from a JSON string.
   * @param {string} json_string JSON string.
   * @return {module:model/MFAPushCredentialRequest} An instance of MFAPushCredentialRequest.
   */
  static fromJSON = function (json_string) {
    return MFAPushCredentialRequest.constructFromObject(JSON.parse(json_string));
  };
}

/**
 * @member {module:model/EnumMFAPushCredentialAttrType} type
 */
MFAPushCredentialRequest.prototype['type'] = undefined;

/**
 * A string that Apple uses as an identifier to identify an authentication key.  Mandatory.
 * @member {String} key
 */
MFAPushCredentialRequest.prototype['key'] = undefined;

/**
 * A string that Apple uses as an identifier to identify teams.
 * @member {String} teamId
 */
MFAPushCredentialRequest.prototype['teamId'] = undefined;

/**
 * A string that Apple uses as the authentication token signing key to securely connect to APNS. This is a p8 file with a private key format.
 * @member {String} token
 */
MFAPushCredentialRequest.prototype['token'] = undefined;

/**
 * Used when `type` is set to `FCM_HTTP_V1`. The value should be the contents of the JSON file that represents your Service Account Credentials.
 * @member {String} googleServiceAccountCredentials
 */
MFAPushCredentialRequest.prototype['googleServiceAccountCredentials'] = undefined;

/**
 * Used only if type is set to HMS. OAuth 2.0 Client ID from the Huawei Developers API console.
 * @member {String} clientId
 */
MFAPushCredentialRequest.prototype['clientId'] = undefined;

/**
 * Used only if type is set to HMS. The client secret associated with the OAuth 2.0 Client ID.
 * @member {String} clientSecret
 */
MFAPushCredentialRequest.prototype['clientSecret'] = undefined;
MFAPushCredentialRequest.OneOf = ["MFAPushCredentialAPNS", "MFAPushCredentialFCM", "MFAPushCredentialFCMHTTPV1", "MFAPushCredentialHMS"];
export default MFAPushCredentialRequest;