/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import DeviceAuthenticationPolicy from '../model/DeviceAuthenticationPolicy';
import DeviceAuthenticationPolicyPost from '../model/DeviceAuthenticationPolicyPost';
import DeviceAuthenticationPolicyPostResponse from '../model/DeviceAuthenticationPolicyPostResponse';
import EntityArray from '../model/EntityArray';
import EnumDeviceAuthenticationPolicyPostContentType from '../model/EnumDeviceAuthenticationPolicyPostContentType';
import P1Error from '../model/P1Error';

/**
* DeviceAuthenticationPolicy service.
* @module api/DeviceAuthenticationPolicyApi
* @version 2023-06-29
*/
export default class DeviceAuthenticationPolicyApi {
  /**
  * Constructs a new DeviceAuthenticationPolicyApi. 
  * @alias module:api/DeviceAuthenticationPolicyApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Device Authentication Policy
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/EnumDeviceAuthenticationPolicyPostContentType} [contentType] 
   * @param {module:model/DeviceAuthenticationPolicyPost} [deviceAuthenticationPolicyPost] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceAuthenticationPolicyPostResponse} and HTTP response
   */
  createDeviceAuthenticationPoliciesWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['deviceAuthenticationPolicyPost'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createDeviceAuthenticationPolicies");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {
      'Content-Type': opts['contentType']
    };
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json', 'application/vnd.pingidentity.deviceAuthenticationPolicy.fido2.migrate+json'];
    let accepts = ['application/json'];
    let returnType = DeviceAuthenticationPolicyPostResponse;
    return this.apiClient.callApi('/environments/{environmentID}/deviceAuthenticationPolicies', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Device Authentication Policy
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/EnumDeviceAuthenticationPolicyPostContentType} opts.contentType 
   * @param {module:model/DeviceAuthenticationPolicyPost} opts.deviceAuthenticationPolicyPost 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceAuthenticationPolicyPostResponse}
   */
  createDeviceAuthenticationPolicies(environmentID, opts) {
    return this.createDeviceAuthenticationPoliciesWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Device Authentication Policy
   * @param {String} environmentID 
   * @param {String} deviceAuthenticationPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteDeviceAuthenticationPolicyWithHttpInfo(environmentID, deviceAuthenticationPolicyID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteDeviceAuthenticationPolicy");
    }
    // verify the required parameter 'deviceAuthenticationPolicyID' is set
    if (deviceAuthenticationPolicyID === undefined || deviceAuthenticationPolicyID === null) {
      throw new Error("Missing the required parameter 'deviceAuthenticationPolicyID' when calling deleteDeviceAuthenticationPolicy");
    }
    let pathParams = {
      'environmentID': environmentID,
      'deviceAuthenticationPolicyID': deviceAuthenticationPolicyID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/deviceAuthenticationPolicies/{deviceAuthenticationPolicyID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Device Authentication Policy
   * @param {String} environmentID 
   * @param {String} deviceAuthenticationPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteDeviceAuthenticationPolicy(environmentID, deviceAuthenticationPolicyID) {
    return this.deleteDeviceAuthenticationPolicyWithHttpInfo(environmentID, deviceAuthenticationPolicyID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Device Authentication Policies
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readDeviceAuthenticationPoliciesWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readDeviceAuthenticationPolicies");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/deviceAuthenticationPolicies', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Device Authentication Policies
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readDeviceAuthenticationPolicies(environmentID) {
    return this.readDeviceAuthenticationPoliciesWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Device Authentication Policy
   * @param {String} environmentID 
   * @param {String} deviceAuthenticationPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceAuthenticationPolicy} and HTTP response
   */
  readOneDeviceAuthenticationPolicyWithHttpInfo(environmentID, deviceAuthenticationPolicyID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneDeviceAuthenticationPolicy");
    }
    // verify the required parameter 'deviceAuthenticationPolicyID' is set
    if (deviceAuthenticationPolicyID === undefined || deviceAuthenticationPolicyID === null) {
      throw new Error("Missing the required parameter 'deviceAuthenticationPolicyID' when calling readOneDeviceAuthenticationPolicy");
    }
    let pathParams = {
      'environmentID': environmentID,
      'deviceAuthenticationPolicyID': deviceAuthenticationPolicyID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = DeviceAuthenticationPolicy;
    return this.apiClient.callApi('/environments/{environmentID}/deviceAuthenticationPolicies/{deviceAuthenticationPolicyID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Device Authentication Policy
   * @param {String} environmentID 
   * @param {String} deviceAuthenticationPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceAuthenticationPolicy}
   */
  readOneDeviceAuthenticationPolicy(environmentID, deviceAuthenticationPolicyID) {
    return this.readOneDeviceAuthenticationPolicyWithHttpInfo(environmentID, deviceAuthenticationPolicyID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Device Authentication Policy
   * @param {String} environmentID 
   * @param {String} deviceAuthenticationPolicyID 
   * @param {Object} opts Optional parameters
   * @param {module:model/DeviceAuthenticationPolicy} [deviceAuthenticationPolicy] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DeviceAuthenticationPolicy} and HTTP response
   */
  updateDeviceAuthenticationPolicyWithHttpInfo(environmentID, deviceAuthenticationPolicyID, opts) {
    opts = opts || {};
    let postBody = opts['deviceAuthenticationPolicy'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateDeviceAuthenticationPolicy");
    }
    // verify the required parameter 'deviceAuthenticationPolicyID' is set
    if (deviceAuthenticationPolicyID === undefined || deviceAuthenticationPolicyID === null) {
      throw new Error("Missing the required parameter 'deviceAuthenticationPolicyID' when calling updateDeviceAuthenticationPolicy");
    }
    let pathParams = {
      'environmentID': environmentID,
      'deviceAuthenticationPolicyID': deviceAuthenticationPolicyID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = DeviceAuthenticationPolicy;
    return this.apiClient.callApi('/environments/{environmentID}/deviceAuthenticationPolicies/{deviceAuthenticationPolicyID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Device Authentication Policy
   * @param {String} environmentID 
   * @param {String} deviceAuthenticationPolicyID 
   * @param {Object} opts Optional parameters
   * @param {module:model/DeviceAuthenticationPolicy} opts.deviceAuthenticationPolicy 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DeviceAuthenticationPolicy}
   */
  updateDeviceAuthenticationPolicy(environmentID, deviceAuthenticationPolicyID, opts) {
    return this.updateDeviceAuthenticationPolicyWithHttpInfo(environmentID, deviceAuthenticationPolicyID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}