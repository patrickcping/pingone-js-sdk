/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import MFAPushCredentialRequest from '../model/MFAPushCredentialRequest';
import MFAPushCredentialResponse from '../model/MFAPushCredentialResponse';
import P1Error from '../model/P1Error';

/**
* ApplicationsApplicationMFAPushCredentials service.
* @module api/ApplicationsApplicationMFAPushCredentialsApi
* @version 2023-06-29
*/
export default class ApplicationsApplicationMFAPushCredentialsApi {
  /**
  * Constructs a new ApplicationsApplicationMFAPushCredentialsApi. 
  * @alias module:api/ApplicationsApplicationMFAPushCredentialsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE MFA Push Credential
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/MFAPushCredentialRequest} [mFAPushCredentialRequest] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MFAPushCredentialResponse} and HTTP response
   */
  createMFAPushCredentialWithHttpInfo(environmentID, applicationID, opts) {
    opts = opts || {};
    let postBody = opts['mFAPushCredentialRequest'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createMFAPushCredential");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling createMFAPushCredential");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = MFAPushCredentialResponse;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/pushCredentials', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE MFA Push Credential
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/MFAPushCredentialRequest} opts.mFAPushCredentialRequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MFAPushCredentialResponse}
   */
  createMFAPushCredential(environmentID, applicationID, opts) {
    return this.createMFAPushCredentialWithHttpInfo(environmentID, applicationID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE MFA Push Credential
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} pushCredentialID 
   * @param {Object} opts Optional parameters
   * @param {String} [authorization] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteMFAPushCredentialWithHttpInfo(environmentID, applicationID, pushCredentialID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteMFAPushCredential");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling deleteMFAPushCredential");
    }
    // verify the required parameter 'pushCredentialID' is set
    if (pushCredentialID === undefined || pushCredentialID === null) {
      throw new Error("Missing the required parameter 'pushCredentialID' when calling deleteMFAPushCredential");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'pushCredentialID': pushCredentialID
    };
    let queryParams = {};
    let headerParams = {
      'Authorization': opts['authorization']
    };
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/pushCredentials/{pushCredentialID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE MFA Push Credential
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} pushCredentialID 
   * @param {Object} opts Optional parameters
   * @param {String} opts.authorization 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteMFAPushCredential(environmentID, applicationID, pushCredentialID, opts) {
    return this.deleteMFAPushCredentialWithHttpInfo(environmentID, applicationID, pushCredentialID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All MFA Push Credentials
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllMFAPushCredentialsWithHttpInfo(environmentID, applicationID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllMFAPushCredentials");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling readAllMFAPushCredentials");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/pushCredentials', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All MFA Push Credentials
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllMFAPushCredentials(environmentID, applicationID) {
    return this.readAllMFAPushCredentialsWithHttpInfo(environmentID, applicationID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One MFA Push Credential
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} pushCredentialID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MFAPushCredentialResponse} and HTTP response
   */
  readOneMFAPushCredentialWithHttpInfo(environmentID, applicationID, pushCredentialID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneMFAPushCredential");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling readOneMFAPushCredential");
    }
    // verify the required parameter 'pushCredentialID' is set
    if (pushCredentialID === undefined || pushCredentialID === null) {
      throw new Error("Missing the required parameter 'pushCredentialID' when calling readOneMFAPushCredential");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'pushCredentialID': pushCredentialID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = MFAPushCredentialResponse;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/pushCredentials/{pushCredentialID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One MFA Push Credential
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} pushCredentialID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MFAPushCredentialResponse}
   */
  readOneMFAPushCredential(environmentID, applicationID, pushCredentialID) {
    return this.readOneMFAPushCredentialWithHttpInfo(environmentID, applicationID, pushCredentialID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE MFA Push Credential
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} pushCredentialID 
   * @param {Object} opts Optional parameters
   * @param {module:model/MFAPushCredentialRequest} [mFAPushCredentialRequest] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/MFAPushCredentialResponse} and HTTP response
   */
  updateMFAPushCredentialWithHttpInfo(environmentID, applicationID, pushCredentialID, opts) {
    opts = opts || {};
    let postBody = opts['mFAPushCredentialRequest'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateMFAPushCredential");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling updateMFAPushCredential");
    }
    // verify the required parameter 'pushCredentialID' is set
    if (pushCredentialID === undefined || pushCredentialID === null) {
      throw new Error("Missing the required parameter 'pushCredentialID' when calling updateMFAPushCredential");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'pushCredentialID': pushCredentialID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = MFAPushCredentialResponse;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/pushCredentials/{pushCredentialID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE MFA Push Credential
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} pushCredentialID 
   * @param {Object} opts Optional parameters
   * @param {module:model/MFAPushCredentialRequest} opts.mFAPushCredentialRequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/MFAPushCredentialResponse}
   */
  updateMFAPushCredential(environmentID, applicationID, pushCredentialID, opts) {
    return this.updateMFAPushCredentialWithHttpInfo(environmentID, applicationID, pushCredentialID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}