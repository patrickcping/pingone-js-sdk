/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FIDO2PolicyUserDisplayNameAttributesAttributesInner from './FIDO2PolicyUserDisplayNameAttributesAttributesInner';

/**
 * The FIDO2PolicyUserDisplayNameAttributes model module.
 * @module model/FIDO2PolicyUserDisplayNameAttributes
 * @version 2023-06-29
 */
class FIDO2PolicyUserDisplayNameAttributes {
    /**
     * Constructs a new <code>FIDO2PolicyUserDisplayNameAttributes</code>.
     * Used to specify the string associated with the users&#39;s account that is displayed during registration and authentication.
     * @alias module:model/FIDO2PolicyUserDisplayNameAttributes
     * @param attributes {Array.<module:model/FIDO2PolicyUserDisplayNameAttributesAttributesInner>} List of strings associated with the users's account that can be displayed during registration and authentication. Each object in the array is a name:value pair where the first part is \"name\" and the second is the name of the user attribute, for example, `{\"name\": \"username\"}`, `{\"name\": \"email\"}`. If you want to use the \"name\" attribute for the user, you must also specify the \"subAttributes\", which can be either the \"given\" and \"family\" user attributes or the \"formatted\" user attribute. For example, `{\"name\": “name”, “subAttributes”:[{“name”: “given”}, {“name”: “family”}]}, {\"name\": \"email\"}` or `{\"name\": “name”, “subAttributes”:[{“name”: “formatted”}]}, {\"name\": \"email\"}`. - The content of the list should reflect the preferred order. - If the first attribute is empty for the user, PingOne will continue through the list until a non-empty attribute is found. - You can specify any user attribute (including custom attributes) that meet the following criteria: attribute type must be String, validation cannot be set to enumerated values. - The array must contain the user attribute \"username\" - to ensure that there is at least one non-empty attribute. - You can have a maximum of six user attributes in the list. 
     */
    constructor(attributes) { 
        
        FIDO2PolicyUserDisplayNameAttributes.initialize(this, attributes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, attributes) { 
        obj['attributes'] = attributes;
    }

    /**
     * Constructs a <code>FIDO2PolicyUserDisplayNameAttributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FIDO2PolicyUserDisplayNameAttributes} obj Optional instance to populate.
     * @return {module:model/FIDO2PolicyUserDisplayNameAttributes} The populated <code>FIDO2PolicyUserDisplayNameAttributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FIDO2PolicyUserDisplayNameAttributes();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = ApiClient.convertToType(data['attributes'], [FIDO2PolicyUserDisplayNameAttributesAttributesInner]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FIDO2PolicyUserDisplayNameAttributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FIDO2PolicyUserDisplayNameAttributes</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FIDO2PolicyUserDisplayNameAttributes.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['attributes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attributes'])) {
                throw new Error("Expected the field `attributes` to be an array in the JSON data but got " + data['attributes']);
            }
            // validate the optional field `attributes` (array)
            for (const item of data['attributes']) {
                FIDO2PolicyUserDisplayNameAttributesAttributesInner.validateJSON(item);
            };
        }

        return true;
    }


}

FIDO2PolicyUserDisplayNameAttributes.RequiredProperties = ["attributes"];

/**
 * List of strings associated with the users's account that can be displayed during registration and authentication. Each object in the array is a name:value pair where the first part is \"name\" and the second is the name of the user attribute, for example, `{\"name\": \"username\"}`, `{\"name\": \"email\"}`. If you want to use the \"name\" attribute for the user, you must also specify the \"subAttributes\", which can be either the \"given\" and \"family\" user attributes or the \"formatted\" user attribute. For example, `{\"name\": “name”, “subAttributes”:[{“name”: “given”}, {“name”: “family”}]}, {\"name\": \"email\"}` or `{\"name\": “name”, “subAttributes”:[{“name”: “formatted”}]}, {\"name\": \"email\"}`. - The content of the list should reflect the preferred order. - If the first attribute is empty for the user, PingOne will continue through the list until a non-empty attribute is found. - You can specify any user attribute (including custom attributes) that meet the following criteria: attribute type must be String, validation cannot be set to enumerated values. - The array must contain the user attribute \"username\" - to ensure that there is at least one non-empty attribute. - You can have a maximum of six user attributes in the list. 
 * @member {Array.<module:model/FIDO2PolicyUserDisplayNameAttributesAttributesInner>} attributes
 */
FIDO2PolicyUserDisplayNameAttributes.prototype['attributes'] = undefined;






export default FIDO2PolicyUserDisplayNameAttributes;

