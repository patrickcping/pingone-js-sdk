/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';

/**
* FIDODevice service.
* @module api/FIDODeviceApi
* @version 2023-06-29
*/
export default class FIDODeviceApi {

    /**
    * Constructs a new FIDODeviceApi. 
    * @alias module:api/FIDODeviceApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE FIDO Device
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    createFidoDeviceWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createFidoDevice");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fidoDevicesMetadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE FIDO Device
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    createFidoDevice(environmentID, opts) {
      return this.createFidoDeviceWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE FIDO Device
     * @param {String} environmentID 
     * @param {String} fidoDeviceID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteFidoDeviceWithHttpInfo(environmentID, fidoDeviceID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteFidoDevice");
      }
      // verify the required parameter 'fidoDeviceID' is set
      if (fidoDeviceID === undefined || fidoDeviceID === null) {
        throw new Error("Missing the required parameter 'fidoDeviceID' when calling deleteFidoDevice");
      }

      let pathParams = {
        'environmentID': environmentID,
        'fidoDeviceID': fidoDeviceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fidoDevicesMetadata/{fidoDeviceID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE FIDO Device
     * @param {String} environmentID 
     * @param {String} fidoDeviceID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteFidoDevice(environmentID, fidoDeviceID) {
      return this.deleteFidoDeviceWithHttpInfo(environmentID, fidoDeviceID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All FIDO Devices
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readFidoDevicesWithHttpInfo(environmentID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readFidoDevices");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fidoDevicesMetadata', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All FIDO Devices
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readFidoDevices(environmentID) {
      return this.readFidoDevicesWithHttpInfo(environmentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One FIDO Device
     * @param {String} environmentID 
     * @param {String} fidoDeviceID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    readOneFidoDeviceWithHttpInfo(environmentID, fidoDeviceID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneFidoDevice");
      }
      // verify the required parameter 'fidoDeviceID' is set
      if (fidoDeviceID === undefined || fidoDeviceID === null) {
        throw new Error("Missing the required parameter 'fidoDeviceID' when calling readOneFidoDevice");
      }

      let pathParams = {
        'environmentID': environmentID,
        'fidoDeviceID': fidoDeviceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fidoDevicesMetadata/{fidoDeviceID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One FIDO Device
     * @param {String} environmentID 
     * @param {String} fidoDeviceID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    readOneFidoDevice(environmentID, fidoDeviceID) {
      return this.readOneFidoDeviceWithHttpInfo(environmentID, fidoDeviceID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
