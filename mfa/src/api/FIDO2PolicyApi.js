/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import FIDO2Policy from '../model/FIDO2Policy';
import P1Error from '../model/P1Error';

/**
* FIDO2Policy service.
* @module api/FIDO2PolicyApi
* @version 2023-06-29
*/
export default class FIDO2PolicyApi {

    /**
    * Constructs a new FIDO2PolicyApi. 
    * @alias module:api/FIDO2PolicyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE FIDO2 Policy
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/FIDO2Policy} [fIDO2Policy] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FIDO2Policy} and HTTP response
     */
    createFIDO2PolicyWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = opts['fIDO2Policy'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createFIDO2Policy");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FIDO2Policy;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fido2Policies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE FIDO2 Policy
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/FIDO2Policy} opts.fIDO2Policy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FIDO2Policy}
     */
    createFIDO2Policy(environmentID, opts) {
      return this.createFIDO2PolicyWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE FIDO2 Policy
     * @param {String} environmentID 
     * @param {String} fido2PolicyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteFIDO2PolicyWithHttpInfo(environmentID, fido2PolicyID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteFIDO2Policy");
      }
      // verify the required parameter 'fido2PolicyID' is set
      if (fido2PolicyID === undefined || fido2PolicyID === null) {
        throw new Error("Missing the required parameter 'fido2PolicyID' when calling deleteFIDO2Policy");
      }

      let pathParams = {
        'environmentID': environmentID,
        'fido2PolicyID': fido2PolicyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fido2Policies/{fido2PolicyID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE FIDO2 Policy
     * @param {String} environmentID 
     * @param {String} fido2PolicyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteFIDO2Policy(environmentID, fido2PolicyID) {
      return this.deleteFIDO2PolicyWithHttpInfo(environmentID, fido2PolicyID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ FIDO2 Policies
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readFIDO2PoliciesWithHttpInfo(environmentID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readFIDO2Policies");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fido2Policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ FIDO2 Policies
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readFIDO2Policies(environmentID) {
      return this.readFIDO2PoliciesWithHttpInfo(environmentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One FIDO2 Policy
     * @param {String} environmentID 
     * @param {String} fido2PolicyID 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [expand] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FIDO2Policy} and HTTP response
     */
    readOneFIDO2PolicyWithHttpInfo(environmentID, fido2PolicyID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneFIDO2Policy");
      }
      // verify the required parameter 'fido2PolicyID' is set
      if (fido2PolicyID === undefined || fido2PolicyID === null) {
        throw new Error("Missing the required parameter 'fido2PolicyID' when calling readOneFIDO2Policy");
      }

      let pathParams = {
        'environmentID': environmentID,
        'fido2PolicyID': fido2PolicyID
      };
      let queryParams = {
        'expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FIDO2Policy;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fido2Policies/{fido2PolicyID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One FIDO2 Policy
     * @param {String} environmentID 
     * @param {String} fido2PolicyID 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.expand 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FIDO2Policy}
     */
    readOneFIDO2Policy(environmentID, fido2PolicyID, opts) {
      return this.readOneFIDO2PolicyWithHttpInfo(environmentID, fido2PolicyID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE FIDO2 Policy
     * @param {String} environmentID 
     * @param {String} fido2PolicyID 
     * @param {Object} opts Optional parameters
     * @param {module:model/FIDO2Policy} [fIDO2Policy] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FIDO2Policy} and HTTP response
     */
    updateFIDO2PolicyWithHttpInfo(environmentID, fido2PolicyID, opts) {
      opts = opts || {};
      let postBody = opts['fIDO2Policy'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updateFIDO2Policy");
      }
      // verify the required parameter 'fido2PolicyID' is set
      if (fido2PolicyID === undefined || fido2PolicyID === null) {
        throw new Error("Missing the required parameter 'fido2PolicyID' when calling updateFIDO2Policy");
      }

      let pathParams = {
        'environmentID': environmentID,
        'fido2PolicyID': fido2PolicyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = FIDO2Policy;
      return this.apiClient.callApi(
        '/environments/{environmentID}/fido2Policies/{fido2PolicyID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE FIDO2 Policy
     * @param {String} environmentID 
     * @param {String} fido2PolicyID 
     * @param {Object} opts Optional parameters
     * @param {module:model/FIDO2Policy} opts.fIDO2Policy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FIDO2Policy}
     */
    updateFIDO2Policy(environmentID, fido2PolicyID, opts) {
      return this.updateFIDO2PolicyWithHttpInfo(environmentID, fido2PolicyID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
