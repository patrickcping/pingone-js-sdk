/**
 * PingOne Platform API - PingOne MFA
 * The PingOne Platform API covering the PingOne MFA service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import P1Error from '../model/P1Error';

/**
* UserMFAPairingKeys service.
* @module api/UserMFAPairingKeysApi
* @version 2023-06-29
*/
export default class UserMFAPairingKeysApi {

    /**
    * Constructs a new UserMFAPairingKeysApi. 
    * @alias module:api/UserMFAPairingKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * DELETE MFA Pairing Key
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {String} pairingKeyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDDeleteWithHttpInfo(environmentID, userID, pairingKeyID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDDelete");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDDelete");
      }
      // verify the required parameter 'pairingKeyID' is set
      if (pairingKeyID === undefined || pairingKeyID === null) {
        throw new Error("Missing the required parameter 'pairingKeyID' when calling environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDDelete");
      }

      let pathParams = {
        'environmentID': environmentID,
        'userID': userID,
        'pairingKeyID': pairingKeyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/users/{userID}/pairingKeys/{pairingKeyID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE MFA Pairing Key
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {String} pairingKeyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDDelete(environmentID, userID, pairingKeyID) {
      return this.environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDDeleteWithHttpInfo(environmentID, userID, pairingKeyID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One MFA Pairing Key
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {String} pairingKeyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDGetWithHttpInfo(environmentID, userID, pairingKeyID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDGet");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDGet");
      }
      // verify the required parameter 'pairingKeyID' is set
      if (pairingKeyID === undefined || pairingKeyID === null) {
        throw new Error("Missing the required parameter 'pairingKeyID' when calling environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDGet");
      }

      let pathParams = {
        'environmentID': environmentID,
        'userID': userID,
        'pairingKeyID': pairingKeyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/users/{userID}/pairingKeys/{pairingKeyID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One MFA Pairing Key
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {String} pairingKeyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDGet(environmentID, userID, pairingKeyID) {
      return this.environmentsEnvironmentIDUsersUserIDPairingKeysPairingKeyIDGetWithHttpInfo(environmentID, userID, pairingKeyID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * CREATE MFA Pairing Key
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDUsersUserIDPairingKeysPostWithHttpInfo(environmentID, userID, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDUsersUserIDPairingKeysPost");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling environmentsEnvironmentIDUsersUserIDPairingKeysPost");
      }

      let pathParams = {
        'environmentID': environmentID,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/users/{userID}/pairingKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE MFA Pairing Key
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDUsersUserIDPairingKeysPost(environmentID, userID, opts) {
      return this.environmentsEnvironmentIDUsersUserIDPairingKeysPostWithHttpInfo(environmentID, userID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
