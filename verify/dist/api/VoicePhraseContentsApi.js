/**
 * PingOne Platform API - PingOne Verify
 * The PingOne Platform API covering the PingOne Verify service
 *
 * The version of the OpenAPI document: 2023-07-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import VoicePhraseContents from '../model/VoicePhraseContents';

/**
* VoicePhraseContents service.
* @module api/VoicePhraseContentsApi
* @version 2023-07-20
*/
export default class VoicePhraseContentsApi {
  /**
  * Constructs a new VoicePhraseContentsApi. 
  * @alias module:api/VoicePhraseContentsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Voice Phrase Content
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {Object} opts Optional parameters
   * @param {module:model/VoicePhraseContents} [voicePhraseContents] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VoicePhraseContents} and HTTP response
   */
  createVoicePhraseContentWithHttpInfo(environmentID, voicePhraseID, opts) {
    opts = opts || {};
    let postBody = opts['voicePhraseContents'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createVoicePhraseContent");
    }
    // verify the required parameter 'voicePhraseID' is set
    if (voicePhraseID === undefined || voicePhraseID === null) {
      throw new Error("Missing the required parameter 'voicePhraseID' when calling createVoicePhraseContent");
    }
    let pathParams = {
      'environmentID': environmentID,
      'voicePhraseID': voicePhraseID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = VoicePhraseContents;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases/{voicePhraseID}/contents', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Voice Phrase Content
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {Object} opts Optional parameters
   * @param {module:model/VoicePhraseContents} opts.voicePhraseContents 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VoicePhraseContents}
   */
  createVoicePhraseContent(environmentID, voicePhraseID, opts) {
    return this.createVoicePhraseContentWithHttpInfo(environmentID, voicePhraseID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Voice Phrase Content
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {String} voiceContentsID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteVoicePhraseContentWithHttpInfo(environmentID, voicePhraseID, voiceContentsID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteVoicePhraseContent");
    }
    // verify the required parameter 'voicePhraseID' is set
    if (voicePhraseID === undefined || voicePhraseID === null) {
      throw new Error("Missing the required parameter 'voicePhraseID' when calling deleteVoicePhraseContent");
    }
    // verify the required parameter 'voiceContentsID' is set
    if (voiceContentsID === undefined || voiceContentsID === null) {
      throw new Error("Missing the required parameter 'voiceContentsID' when calling deleteVoicePhraseContent");
    }
    let pathParams = {
      'environmentID': environmentID,
      'voicePhraseID': voicePhraseID,
      'voiceContentsID': voiceContentsID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases/{voicePhraseID}/contents/{voiceContentsID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * Delete Voice Phrase Content
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {String} voiceContentsID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteVoicePhraseContent(environmentID, voicePhraseID, voiceContentsID) {
    return this.deleteVoicePhraseContentWithHttpInfo(environmentID, voicePhraseID, voiceContentsID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Voice Phrase Contents
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllVoicePhraseContentsWithHttpInfo(environmentID, voicePhraseID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllVoicePhraseContents");
    }
    // verify the required parameter 'voicePhraseID' is set
    if (voicePhraseID === undefined || voicePhraseID === null) {
      throw new Error("Missing the required parameter 'voicePhraseID' when calling readAllVoicePhraseContents");
    }
    let pathParams = {
      'environmentID': environmentID,
      'voicePhraseID': voicePhraseID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases/{voicePhraseID}/contents', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Voice Phrase Contents
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllVoicePhraseContents(environmentID, voicePhraseID) {
    return this.readAllVoicePhraseContentsWithHttpInfo(environmentID, voicePhraseID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Voice Phrase Content
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {String} voiceContentsID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VoicePhraseContents} and HTTP response
   */
  readOneVoicePhraseContentWithHttpInfo(environmentID, voicePhraseID, voiceContentsID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneVoicePhraseContent");
    }
    // verify the required parameter 'voicePhraseID' is set
    if (voicePhraseID === undefined || voicePhraseID === null) {
      throw new Error("Missing the required parameter 'voicePhraseID' when calling readOneVoicePhraseContent");
    }
    // verify the required parameter 'voiceContentsID' is set
    if (voiceContentsID === undefined || voiceContentsID === null) {
      throw new Error("Missing the required parameter 'voiceContentsID' when calling readOneVoicePhraseContent");
    }
    let pathParams = {
      'environmentID': environmentID,
      'voicePhraseID': voicePhraseID,
      'voiceContentsID': voiceContentsID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = VoicePhraseContents;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases/{voicePhraseID}/contents/{voiceContentsID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Voice Phrase Content
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {String} voiceContentsID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VoicePhraseContents}
   */
  readOneVoicePhraseContent(environmentID, voicePhraseID, voiceContentsID) {
    return this.readOneVoicePhraseContentWithHttpInfo(environmentID, voicePhraseID, voiceContentsID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Voice Phrase Content
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {String} voiceContentsID 
   * @param {Object} opts Optional parameters
   * @param {module:model/VoicePhraseContents} [voicePhraseContents] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VoicePhraseContents} and HTTP response
   */
  updateVoicePhraseContentWithHttpInfo(environmentID, voicePhraseID, voiceContentsID, opts) {
    opts = opts || {};
    let postBody = opts['voicePhraseContents'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateVoicePhraseContent");
    }
    // verify the required parameter 'voicePhraseID' is set
    if (voicePhraseID === undefined || voicePhraseID === null) {
      throw new Error("Missing the required parameter 'voicePhraseID' when calling updateVoicePhraseContent");
    }
    // verify the required parameter 'voiceContentsID' is set
    if (voiceContentsID === undefined || voiceContentsID === null) {
      throw new Error("Missing the required parameter 'voiceContentsID' when calling updateVoicePhraseContent");
    }
    let pathParams = {
      'environmentID': environmentID,
      'voicePhraseID': voicePhraseID,
      'voiceContentsID': voiceContentsID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = VoicePhraseContents;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases/{voicePhraseID}/contents/{voiceContentsID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Voice Phrase Content
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {String} voiceContentsID 
   * @param {Object} opts Optional parameters
   * @param {module:model/VoicePhraseContents} opts.voicePhraseContents 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VoicePhraseContents}
   */
  updateVoicePhraseContent(environmentID, voicePhraseID, voiceContentsID, opts) {
    return this.updateVoicePhraseContentWithHttpInfo(environmentID, voicePhraseID, voiceContentsID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}