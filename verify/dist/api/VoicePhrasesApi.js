/**
 * PingOne Platform API - PingOne Verify
 * The PingOne Platform API covering the PingOne Verify service
 *
 * The version of the OpenAPI document: 2023-07-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import VoicePhrase from '../model/VoicePhrase';

/**
* VoicePhrases service.
* @module api/VoicePhrasesApi
* @version 2023-07-20
*/
export default class VoicePhrasesApi {
  /**
  * Constructs a new VoicePhrasesApi. 
  * @alias module:api/VoicePhrasesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Voice Phrase
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/VoicePhrase} [voicePhrase] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VoicePhrase} and HTTP response
   */
  createVoicePhraseWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['voicePhrase'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createVoicePhrase");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = VoicePhrase;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Voice Phrase
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/VoicePhrase} opts.voicePhrase 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VoicePhrase}
   */
  createVoicePhrase(environmentID, opts) {
    return this.createVoicePhraseWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Delete Voice Phrase
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteVoicePhraseWithHttpInfo(environmentID, voicePhraseID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteVoicePhrase");
    }
    // verify the required parameter 'voicePhraseID' is set
    if (voicePhraseID === undefined || voicePhraseID === null) {
      throw new Error("Missing the required parameter 'voicePhraseID' when calling deleteVoicePhrase");
    }
    let pathParams = {
      'environmentID': environmentID,
      'voicePhraseID': voicePhraseID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases/{voicePhraseID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * Delete Voice Phrase
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteVoicePhrase(environmentID, voicePhraseID) {
    return this.deleteVoicePhraseWithHttpInfo(environmentID, voicePhraseID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Voice Phrases
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllVoicePhrasesWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllVoicePhrases");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Voice Phrases
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllVoicePhrases(environmentID) {
    return this.readAllVoicePhrasesWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Voice Phrase
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VoicePhrase} and HTTP response
   */
  readOneVoicePhraseWithHttpInfo(environmentID, voicePhraseID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneVoicePhrase");
    }
    // verify the required parameter 'voicePhraseID' is set
    if (voicePhraseID === undefined || voicePhraseID === null) {
      throw new Error("Missing the required parameter 'voicePhraseID' when calling readOneVoicePhrase");
    }
    let pathParams = {
      'environmentID': environmentID,
      'voicePhraseID': voicePhraseID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = VoicePhrase;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases/{voicePhraseID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Voice Phrase
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VoicePhrase}
   */
  readOneVoicePhrase(environmentID, voicePhraseID) {
    return this.readOneVoicePhraseWithHttpInfo(environmentID, voicePhraseID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Voice Phrase
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {Object} opts Optional parameters
   * @param {module:model/VoicePhrase} [voicePhrase] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VoicePhrase} and HTTP response
   */
  updateVoicePhraseWithHttpInfo(environmentID, voicePhraseID, opts) {
    opts = opts || {};
    let postBody = opts['voicePhrase'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateVoicePhrase");
    }
    // verify the required parameter 'voicePhraseID' is set
    if (voicePhraseID === undefined || voicePhraseID === null) {
      throw new Error("Missing the required parameter 'voicePhraseID' when calling updateVoicePhrase");
    }
    let pathParams = {
      'environmentID': environmentID,
      'voicePhraseID': voicePhraseID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = VoicePhrase;
    return this.apiClient.callApi('/environments/{environmentID}/voicePhrases/{voicePhraseID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Voice Phrase
   * @param {String} environmentID 
   * @param {String} voicePhraseID 
   * @param {Object} opts Optional parameters
   * @param {module:model/VoicePhrase} opts.voicePhrase 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VoicePhrase}
   */
  updateVoicePhrase(environmentID, voicePhraseID, opts) {
    return this.updateVoicePhraseWithHttpInfo(environmentID, voicePhraseID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}