/**
 * PingOne Platform API - PingOne Verify
 * The PingOne Platform API covering the PingOne Verify service
 *
 * The version of the OpenAPI document: 2023-07-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import VerifyPolicy from '../model/VerifyPolicy';

/**
* VerifyPolicies service.
* @module api/VerifyPoliciesApi
* @version 2023-07-20
*/
export default class VerifyPoliciesApi {

    /**
    * Constructs a new VerifyPoliciesApi. 
    * @alias module:api/VerifyPoliciesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE Verify Policy
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyPolicy} [verifyPolicy] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyPolicy} and HTTP response
     */
    createVerifyPolicyWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = opts['verifyPolicy'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createVerifyPolicy");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyPolicy;
      return this.apiClient.callApi(
        '/environments/{environmentID}/verifyPolicies', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE Verify Policy
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyPolicy} opts.verifyPolicy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyPolicy}
     */
    createVerifyPolicy(environmentID, opts) {
      return this.createVerifyPolicyWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Verify Policy
     * @param {String} environmentID 
     * @param {String} verifyPolicyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteVerifyPolicyWithHttpInfo(environmentID, verifyPolicyID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteVerifyPolicy");
      }
      // verify the required parameter 'verifyPolicyID' is set
      if (verifyPolicyID === undefined || verifyPolicyID === null) {
        throw new Error("Missing the required parameter 'verifyPolicyID' when calling deleteVerifyPolicy");
      }

      let pathParams = {
        'environmentID': environmentID,
        'verifyPolicyID': verifyPolicyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/verifyPolicies/{verifyPolicyID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Verify Policy
     * @param {String} environmentID 
     * @param {String} verifyPolicyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteVerifyPolicy(environmentID, verifyPolicyID) {
      return this.deleteVerifyPolicyWithHttpInfo(environmentID, verifyPolicyID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All Verify Policies
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readAllVerifyPoliciesWithHttpInfo(environmentID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readAllVerifyPolicies");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/verifyPolicies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All Verify Policies
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readAllVerifyPolicies(environmentID) {
      return this.readAllVerifyPoliciesWithHttpInfo(environmentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One Verify Policy
     * @param {String} environmentID 
     * @param {String} verifyPolicyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyPolicy} and HTTP response
     */
    readOneVerifyPolicyWithHttpInfo(environmentID, verifyPolicyID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneVerifyPolicy");
      }
      // verify the required parameter 'verifyPolicyID' is set
      if (verifyPolicyID === undefined || verifyPolicyID === null) {
        throw new Error("Missing the required parameter 'verifyPolicyID' when calling readOneVerifyPolicy");
      }

      let pathParams = {
        'environmentID': environmentID,
        'verifyPolicyID': verifyPolicyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifyPolicy;
      return this.apiClient.callApi(
        '/environments/{environmentID}/verifyPolicies/{verifyPolicyID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Verify Policy
     * @param {String} environmentID 
     * @param {String} verifyPolicyID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyPolicy}
     */
    readOneVerifyPolicy(environmentID, verifyPolicyID) {
      return this.readOneVerifyPolicyWithHttpInfo(environmentID, verifyPolicyID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE Verify Policy
     * @param {String} environmentID 
     * @param {String} verifyPolicyID 
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyPolicy} [verifyPolicy] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/VerifyPolicy} and HTTP response
     */
    updateVerifyPolicyWithHttpInfo(environmentID, verifyPolicyID, opts) {
      opts = opts || {};
      let postBody = opts['verifyPolicy'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updateVerifyPolicy");
      }
      // verify the required parameter 'verifyPolicyID' is set
      if (verifyPolicyID === undefined || verifyPolicyID === null) {
        throw new Error("Missing the required parameter 'verifyPolicyID' when calling updateVerifyPolicy");
      }

      let pathParams = {
        'environmentID': environmentID,
        'verifyPolicyID': verifyPolicyID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VerifyPolicy;
      return this.apiClient.callApi(
        '/environments/{environmentID}/verifyPolicies/{verifyPolicyID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE Verify Policy
     * @param {String} environmentID 
     * @param {String} verifyPolicyID 
     * @param {Object} opts Optional parameters
     * @param {module:model/VerifyPolicy} opts.verifyPolicy 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/VerifyPolicy}
     */
    updateVerifyPolicy(environmentID, verifyPolicyID, opts) {
      return this.updateVerifyPolicyWithHttpInfo(environmentID, verifyPolicyID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
