/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationAccessControlGroupGroupsInner from './ApplicationAccessControlGroupGroupsInner';

/**
 * The IdentityProviderSAMLAllOfIdpVerification model module.
 * @module model/IdentityProviderSAMLAllOfIdpVerification
 * @version 2023-06-29
 */
class IdentityProviderSAMLAllOfIdpVerification {
  /**
   * Constructs a new <code>IdentityProviderSAMLAllOfIdpVerification</code>.
   * @alias module:model/IdentityProviderSAMLAllOfIdpVerification
   * @param certificates {Array.<module:model/ApplicationAccessControlGroupGroupsInner>} A array that specifies the identity provider's certificate IDs used to verify the signature on the signed assertion from the identity provider. Signing is done with a private key and verified with a public key.
   */
  constructor(certificates) {
    IdentityProviderSAMLAllOfIdpVerification.initialize(this, certificates);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, certificates) {
    obj['certificates'] = certificates;
  }

  /**
   * Constructs a <code>IdentityProviderSAMLAllOfIdpVerification</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IdentityProviderSAMLAllOfIdpVerification} obj Optional instance to populate.
   * @return {module:model/IdentityProviderSAMLAllOfIdpVerification} The populated <code>IdentityProviderSAMLAllOfIdpVerification</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IdentityProviderSAMLAllOfIdpVerification();
      if (data.hasOwnProperty('certificates')) {
        obj['certificates'] = ApiClient.convertToType(data['certificates'], [ApplicationAccessControlGroupGroupsInner]);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>IdentityProviderSAMLAllOfIdpVerification</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityProviderSAMLAllOfIdpVerification</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of IdentityProviderSAMLAllOfIdpVerification.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    if (data['certificates']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['certificates'])) {
        throw new Error("Expected the field `certificates` to be an array in the JSON data but got " + data['certificates']);
      }
      // validate the optional field `certificates` (array)
      for (const item of data['certificates']) {
        ApplicationAccessControlGroupGroupsInner.validateJSON(item);
      }
      ;
    }
    return true;
  }
}
IdentityProviderSAMLAllOfIdpVerification.RequiredProperties = ["certificates"];

/**
 * A array that specifies the identity provider's certificate IDs used to verify the signature on the signed assertion from the identity provider. Signing is done with a private key and verified with a public key.
 * @member {Array.<module:model/ApplicationAccessControlGroupGroupsInner>} certificates
 */
IdentityProviderSAMLAllOfIdpVerification.prototype['certificates'] = undefined;
export default IdentityProviderSAMLAllOfIdpVerification;