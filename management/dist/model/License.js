/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumLicenseStatus from './EnumLicenseStatus';
import LicenseAdvancedServices from './LicenseAdvancedServices';
import LicenseAuthorize from './LicenseAuthorize';
import LicenseCredentials from './LicenseCredentials';
import LicenseEnvironments from './LicenseEnvironments';
import LicenseFraud from './LicenseFraud';
import LicenseGateways from './LicenseGateways';
import LicenseIntelligence from './LicenseIntelligence';
import LicenseMfa from './LicenseMfa';
import LicenseOrchestrate from './LicenseOrchestrate';
import LicenseReplacedByLicense from './LicenseReplacedByLicense';
import LicenseReplacesLicense from './LicenseReplacesLicense';
import LicenseUsers from './LicenseUsers';
import LicenseVerify from './LicenseVerify';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectOrganization from './ObjectOrganization';

/**
 * The License model module.
 * @module model/License
 * @version 2023-06-29
 */
class License {
  /**
   * Constructs a new <code>License</code>.
   * @alias module:model/License
   * @param name {String} A string that specifies a descriptive name for the license. This is a required property in a license name update request. Valid characters consists of any Unicode letter, mark, numeric character, forward slash, dot, apostrophe, underscore, space, or hyphen. The maximum length of a name is 255 characters.
   */
  constructor(name) {
    License.initialize(this, name);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, name) {
    obj['name'] = name;
  }

  /**
   * Constructs a <code>License</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/License} obj Optional instance to populate.
   * @return {module:model/License} The populated <code>License</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new License();
      if (data.hasOwnProperty('_links')) {
        obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
      }
      if (data.hasOwnProperty('advancedServices')) {
        obj['advancedServices'] = LicenseAdvancedServices.constructFromObject(data['advancedServices']);
      }
      if (data.hasOwnProperty('assignedEnvironmentsCount')) {
        obj['assignedEnvironmentsCount'] = ApiClient.convertToType(data['assignedEnvironmentsCount'], 'Number');
      }
      if (data.hasOwnProperty('authorize')) {
        obj['authorize'] = LicenseAuthorize.constructFromObject(data['authorize']);
      }
      if (data.hasOwnProperty('beginsAt')) {
        obj['beginsAt'] = ApiClient.convertToType(data['beginsAt'], 'Date');
      }
      if (data.hasOwnProperty('credentials')) {
        obj['credentials'] = LicenseCredentials.constructFromObject(data['credentials']);
      }
      if (data.hasOwnProperty('environments')) {
        obj['environments'] = LicenseEnvironments.constructFromObject(data['environments']);
      }
      if (data.hasOwnProperty('expiresAt')) {
        obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
      }
      if (data.hasOwnProperty('fraud')) {
        obj['fraud'] = LicenseFraud.constructFromObject(data['fraud']);
      }
      if (data.hasOwnProperty('gateways')) {
        obj['gateways'] = LicenseGateways.constructFromObject(data['gateways']);
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('intelligence')) {
        obj['intelligence'] = LicenseIntelligence.constructFromObject(data['intelligence']);
      }
      if (data.hasOwnProperty('mfa')) {
        obj['mfa'] = LicenseMfa.constructFromObject(data['mfa']);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('orchestrate')) {
        obj['orchestrate'] = LicenseOrchestrate.constructFromObject(data['orchestrate']);
      }
      if (data.hasOwnProperty('organization')) {
        obj['organization'] = ObjectOrganization.constructFromObject(data['organization']);
      }
      if (data.hasOwnProperty('package')) {
        obj['package'] = ApiClient.convertToType(data['package'], 'String');
      }
      if (data.hasOwnProperty('replacesLicense')) {
        obj['replacesLicense'] = LicenseReplacesLicense.constructFromObject(data['replacesLicense']);
      }
      if (data.hasOwnProperty('replacedByLicense')) {
        obj['replacedByLicense'] = LicenseReplacedByLicense.constructFromObject(data['replacedByLicense']);
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = EnumLicenseStatus.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('terminatesAt')) {
        obj['terminatesAt'] = ApiClient.convertToType(data['terminatesAt'], 'Date');
      }
      if (data.hasOwnProperty('users')) {
        obj['users'] = LicenseUsers.constructFromObject(data['users']);
      }
      if (data.hasOwnProperty('verify')) {
        obj['verify'] = LicenseVerify.constructFromObject(data['verify']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>License</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>License</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of License.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // validate the optional field `advancedServices`
    if (data['advancedServices']) {
      // data not null
      LicenseAdvancedServices.validateJSON(data['advancedServices']);
    }
    // validate the optional field `authorize`
    if (data['authorize']) {
      // data not null
      LicenseAuthorize.validateJSON(data['authorize']);
    }
    // validate the optional field `credentials`
    if (data['credentials']) {
      // data not null
      LicenseCredentials.validateJSON(data['credentials']);
    }
    // validate the optional field `environments`
    if (data['environments']) {
      // data not null
      LicenseEnvironments.validateJSON(data['environments']);
    }
    // validate the optional field `fraud`
    if (data['fraud']) {
      // data not null
      LicenseFraud.validateJSON(data['fraud']);
    }
    // validate the optional field `gateways`
    if (data['gateways']) {
      // data not null
      LicenseGateways.validateJSON(data['gateways']);
    }
    // ensure the json data is a string
    if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
      throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
    }
    // validate the optional field `intelligence`
    if (data['intelligence']) {
      // data not null
      LicenseIntelligence.validateJSON(data['intelligence']);
    }
    // validate the optional field `mfa`
    if (data['mfa']) {
      // data not null
      LicenseMfa.validateJSON(data['mfa']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    // validate the optional field `orchestrate`
    if (data['orchestrate']) {
      // data not null
      LicenseOrchestrate.validateJSON(data['orchestrate']);
    }
    // validate the optional field `organization`
    if (data['organization']) {
      // data not null
      ObjectOrganization.validateJSON(data['organization']);
    }
    // ensure the json data is a string
    if (data['package'] && !(typeof data['package'] === 'string' || data['package'] instanceof String)) {
      throw new Error("Expected the field `package` to be a primitive type in the JSON string but got " + data['package']);
    }
    // validate the optional field `replacesLicense`
    if (data['replacesLicense']) {
      // data not null
      LicenseReplacesLicense.validateJSON(data['replacesLicense']);
    }
    // validate the optional field `replacedByLicense`
    if (data['replacedByLicense']) {
      // data not null
      LicenseReplacedByLicense.validateJSON(data['replacedByLicense']);
    }
    // validate the optional field `users`
    if (data['users']) {
      // data not null
      LicenseUsers.validateJSON(data['users']);
    }
    // validate the optional field `verify`
    if (data['verify']) {
      // data not null
      LicenseVerify.validateJSON(data['verify']);
    }
    return true;
  }
}
License.RequiredProperties = ["name"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
License.prototype['_links'] = undefined;

/**
 * @member {module:model/LicenseAdvancedServices} advancedServices
 */
License.prototype['advancedServices'] = undefined;

/**
 * A read-only integer that specifies the total number of environments associated with this license.
 * @member {Number} assignedEnvironmentsCount
 */
License.prototype['assignedEnvironmentsCount'] = undefined;

/**
 * @member {module:model/LicenseAuthorize} authorize
 */
License.prototype['authorize'] = undefined;

/**
 * The date and time this license begins.
 * @member {Date} beginsAt
 */
License.prototype['beginsAt'] = undefined;

/**
 * @member {module:model/LicenseCredentials} credentials
 */
License.prototype['credentials'] = undefined;

/**
 * @member {module:model/LicenseEnvironments} environments
 */
License.prototype['environments'] = undefined;

/**
 * The date and time this license expires. TRIAL licenses stop access to PingOne services at expiration. All other licenses trigger an event to send a notification when the license expires but do not block services.
 * @member {Date} expiresAt
 */
License.prototype['expiresAt'] = undefined;

/**
 * @member {module:model/LicenseFraud} fraud
 */
License.prototype['fraud'] = undefined;

/**
 * @member {module:model/LicenseGateways} gateways
 */
License.prototype['gateways'] = undefined;

/**
 * A read-only string that specifies the license resource’s unique identifier.
 * @member {String} id
 */
License.prototype['id'] = undefined;

/**
 * @member {module:model/LicenseIntelligence} intelligence
 */
License.prototype['intelligence'] = undefined;

/**
 * @member {module:model/LicenseMfa} mfa
 */
License.prototype['mfa'] = undefined;

/**
 * A string that specifies a descriptive name for the license. This is a required property in a license name update request. Valid characters consists of any Unicode letter, mark, numeric character, forward slash, dot, apostrophe, underscore, space, or hyphen. The maximum length of a name is 255 characters.
 * @member {String} name
 */
License.prototype['name'] = undefined;

/**
 * @member {module:model/LicenseOrchestrate} orchestrate
 */
License.prototype['orchestrate'] = undefined;

/**
 * @member {module:model/ObjectOrganization} organization
 */
License.prototype['organization'] = undefined;

/**
 * A string that specifies the license template on which this license is based.
 * @member {String} package
 */
License.prototype['package'] = undefined;

/**
 * @member {module:model/LicenseReplacesLicense} replacesLicense
 */
License.prototype['replacesLicense'] = undefined;

/**
 * @member {module:model/LicenseReplacedByLicense} replacedByLicense
 */
License.prototype['replacedByLicense'] = undefined;

/**
 * @member {module:model/EnumLicenseStatus} status
 */
License.prototype['status'] = undefined;

/**
 * An optional attribute that designates the exact date and time when this license terminates access to PingOne services. This attribute can be added to any licensing package.
 * @member {Date} terminatesAt
 */
License.prototype['terminatesAt'] = undefined;

/**
 * @member {module:model/LicenseUsers} users
 */
License.prototype['users'] = undefined;

/**
 * @member {module:model/LicenseVerify} verify
 */
License.prototype['verify'] = undefined;
export default License;