/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFormElementLabelMode from './EnumFormElementLabelMode';

/**
 * The FormElement model module.
 * @module model/FormElement
 * @version 2023-06-29
 */
class FormElement {
  /**
   * Constructs a new <code>FormElement</code>.
   * @alias module:model/FormElement
   * @param key {String} A string that specifies an identifier for the field component.
   * @param label {String} A string of escaped JSON that is designed to store a series of text and translatable keys.
   */
  constructor(key, label) {
    FormElement.initialize(this, key, label);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, key, label) {
    obj['key'] = key;
    obj['label'] = label;
  }

  /**
   * Constructs a <code>FormElement</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormElement} obj Optional instance to populate.
   * @return {module:model/FormElement} The populated <code>FormElement</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FormElement();
      if (data.hasOwnProperty('attributeDisabled')) {
        obj['attributeDisabled'] = ApiClient.convertToType(data['attributeDisabled'], 'Boolean');
      }
      if (data.hasOwnProperty('key')) {
        obj['key'] = ApiClient.convertToType(data['key'], 'String');
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('labelMode')) {
        obj['labelMode'] = EnumFormElementLabelMode.constructFromObject(data['labelMode']);
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('otherOptionEnabled')) {
        obj['otherOptionEnabled'] = ApiClient.convertToType(data['otherOptionEnabled'], 'Boolean');
      }
      if (data.hasOwnProperty('otherOptionKey')) {
        obj['otherOptionKey'] = ApiClient.convertToType(data['otherOptionKey'], 'String');
      }
      if (data.hasOwnProperty('otherOptionLabel')) {
        obj['otherOptionLabel'] = ApiClient.convertToType(data['otherOptionLabel'], 'String');
      }
      if (data.hasOwnProperty('otherOptionInputLabel')) {
        obj['otherOptionInputLabel'] = ApiClient.convertToType(data['otherOptionInputLabel'], 'String');
      }
      if (data.hasOwnProperty('otherOptionAttributeDisabled')) {
        obj['otherOptionAttributeDisabled'] = ApiClient.convertToType(data['otherOptionAttributeDisabled'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FormElement</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormElement</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of FormElement.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
      throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
    }
    // ensure the json data is a string
    if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
      throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
    }
    // ensure the json data is a string
    if (data['otherOptionKey'] && !(typeof data['otherOptionKey'] === 'string' || data['otherOptionKey'] instanceof String)) {
      throw new Error("Expected the field `otherOptionKey` to be a primitive type in the JSON string but got " + data['otherOptionKey']);
    }
    // ensure the json data is a string
    if (data['otherOptionLabel'] && !(typeof data['otherOptionLabel'] === 'string' || data['otherOptionLabel'] instanceof String)) {
      throw new Error("Expected the field `otherOptionLabel` to be a primitive type in the JSON string but got " + data['otherOptionLabel']);
    }
    // ensure the json data is a string
    if (data['otherOptionInputLabel'] && !(typeof data['otherOptionInputLabel'] === 'string' || data['otherOptionInputLabel'] instanceof String)) {
      throw new Error("Expected the field `otherOptionInputLabel` to be a primitive type in the JSON string but got " + data['otherOptionInputLabel']);
    }
    return true;
  }
}
FormElement.RequiredProperties = ["key", "label"];

/**
 * A boolean that specifies whether the linked directory attribute is disabled.
 * @member {Boolean} attributeDisabled
 */
FormElement.prototype['attributeDisabled'] = undefined;

/**
 * A string that specifies an identifier for the field component.
 * @member {String} key
 */
FormElement.prototype['key'] = undefined;

/**
 * A string of escaped JSON that is designed to store a series of text and translatable keys.
 * @member {String} label
 */
FormElement.prototype['label'] = undefined;

/**
 * @member {module:model/EnumFormElementLabelMode} labelMode
 */
FormElement.prototype['labelMode'] = undefined;

/**
 * A boolean that specifies whether the field is required.
 * @member {Boolean} required
 */
FormElement.prototype['required'] = undefined;

/**
 * A boolean that specifies whether the end user can type an entry that is not in a predefined list.
 * @member {Boolean} otherOptionEnabled
 */
FormElement.prototype['otherOptionEnabled'] = undefined;

/**
 * A string that specifies whether the form identifies that the choice is a custom choice not from a predefined list.
 * @member {String} otherOptionKey
 */
FormElement.prototype['otherOptionKey'] = undefined;

/**
 * A string that specifies the label for a custom or \"other\" choice in a list.
 * @member {String} otherOptionLabel
 */
FormElement.prototype['otherOptionLabel'] = undefined;

/**
 * A string that specifies the label for the other option in drop-down controls.
 * @member {String} otherOptionInputLabel
 */
FormElement.prototype['otherOptionInputLabel'] = undefined;

/**
 * A boolean that specifies whether the directory attribute option is disabled. Set to true if it references a PingOne directory attribute.
 * @member {Boolean} otherOptionAttributeDisabled
 */
FormElement.prototype['otherOptionAttributeDisabled'] = undefined;
export default FormElement;