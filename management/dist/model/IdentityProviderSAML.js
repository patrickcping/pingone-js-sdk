/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumIdentityProviderExt from './EnumIdentityProviderExt';
import EnumIdentityProviderSAMLSLOBinding from './EnumIdentityProviderSAMLSLOBinding';
import EnumIdentityProviderSAMLSSOBinding from './EnumIdentityProviderSAMLSSOBinding';
import IdentityProviderCommon from './IdentityProviderCommon';
import IdentityProviderCommonIcon from './IdentityProviderCommonIcon';
import IdentityProviderCommonLoginButtonIcon from './IdentityProviderCommonLoginButtonIcon';
import IdentityProviderCommonRegistration from './IdentityProviderCommonRegistration';
import IdentityProviderSAMLAllOfIdpVerification from './IdentityProviderSAMLAllOfIdpVerification';
import IdentityProviderSAMLAllOfSpSigning from './IdentityProviderSAMLAllOfSpSigning';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';

/**
 * The IdentityProviderSAML model module.
 * @module model/IdentityProviderSAML
 * @version 2023-06-29
 */
class IdentityProviderSAML {
  /**
   * Constructs a new <code>IdentityProviderSAML</code>.
   * @alias module:model/IdentityProviderSAML
   * @implements module:model/IdentityProviderCommon
   * @param enabled {Boolean} The current enabled state of the IdP.
   * @param name {String} The name of the IdP.
   * @param type {module:model/EnumIdentityProviderExt} 
   * @param idpEntityId {String} A string that specifies the entity ID URI that is checked against the issuerId tag in the incoming response.
   * @param idpVerification {module:model/IdentityProviderSAMLAllOfIdpVerification} 
   * @param spEntityId {String} A string that specifies the service provider's entity ID, used to look up the application.
   * @param ssoBinding {module:model/EnumIdentityProviderSAMLSSOBinding} 
   * @param ssoEndpoint {String} A string that specifies the SSO endpoint for the authentication request.
   */
  constructor(enabled, name, type, idpEntityId, idpVerification, spEntityId, ssoBinding, ssoEndpoint) {
    IdentityProviderCommon.initialize(this, enabled, name, type);
    IdentityProviderSAML.initialize(this, enabled, name, type, idpEntityId, idpVerification, spEntityId, ssoBinding, ssoEndpoint);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, enabled, name, type, idpEntityId, idpVerification, spEntityId, ssoBinding, ssoEndpoint) {
    obj['enabled'] = enabled;
    obj['name'] = name;
    obj['type'] = type;
    obj['idpEntityId'] = idpEntityId;
    obj['idpVerification'] = idpVerification;
    obj['spEntityId'] = spEntityId;
    obj['ssoBinding'] = ssoBinding;
    obj['ssoEndpoint'] = ssoEndpoint;
  }

  /**
   * Constructs a <code>IdentityProviderSAML</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/IdentityProviderSAML} obj Optional instance to populate.
   * @return {module:model/IdentityProviderSAML} The populated <code>IdentityProviderSAML</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new IdentityProviderSAML();
      IdentityProviderCommon.constructFromObject(data, obj);
      if (data.hasOwnProperty('_links')) {
        obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('environment')) {
        obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
      }
      if (data.hasOwnProperty('icon')) {
        obj['icon'] = IdentityProviderCommonIcon.constructFromObject(data['icon']);
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('loginButtonIcon')) {
        obj['loginButtonIcon'] = IdentityProviderCommonLoginButtonIcon.constructFromObject(data['loginButtonIcon']);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('registration')) {
        obj['registration'] = IdentityProviderCommonRegistration.constructFromObject(data['registration']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = EnumIdentityProviderExt.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('createdAt')) {
        obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
      }
      if (data.hasOwnProperty('updatedAt')) {
        obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
      }
      if (data.hasOwnProperty('authnRequestSigned')) {
        obj['authnRequestSigned'] = ApiClient.convertToType(data['authnRequestSigned'], 'Boolean');
      }
      if (data.hasOwnProperty('idpEntityId')) {
        obj['idpEntityId'] = ApiClient.convertToType(data['idpEntityId'], 'String');
      }
      if (data.hasOwnProperty('idpVerification')) {
        obj['idpVerification'] = IdentityProviderSAMLAllOfIdpVerification.constructFromObject(data['idpVerification']);
      }
      if (data.hasOwnProperty('spEntityId')) {
        obj['spEntityId'] = ApiClient.convertToType(data['spEntityId'], 'String');
      }
      if (data.hasOwnProperty('spSigning')) {
        obj['spSigning'] = IdentityProviderSAMLAllOfSpSigning.constructFromObject(data['spSigning']);
      }
      if (data.hasOwnProperty('ssoBinding')) {
        obj['ssoBinding'] = EnumIdentityProviderSAMLSSOBinding.constructFromObject(data['ssoBinding']);
      }
      if (data.hasOwnProperty('ssoEndpoint')) {
        obj['ssoEndpoint'] = ApiClient.convertToType(data['ssoEndpoint'], 'String');
      }
      if (data.hasOwnProperty('sloBinding')) {
        obj['sloBinding'] = EnumIdentityProviderSAMLSLOBinding.constructFromObject(data['sloBinding']);
      }
      if (data.hasOwnProperty('sloEndpoint')) {
        obj['sloEndpoint'] = ApiClient.convertToType(data['sloEndpoint'], 'String');
      }
      if (data.hasOwnProperty('sloResponseEndpoint')) {
        obj['sloResponseEndpoint'] = ApiClient.convertToType(data['sloResponseEndpoint'], 'String');
      }
      if (data.hasOwnProperty('sloWindow')) {
        obj['sloWindow'] = ApiClient.convertToType(data['sloWindow'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>IdentityProviderSAML</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityProviderSAML</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of IdentityProviderSAML.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
      throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
    }
    // validate the optional field `environment`
    if (data['environment']) {
      // data not null
      ObjectEnvironment.validateJSON(data['environment']);
    }
    // validate the optional field `icon`
    if (data['icon']) {
      // data not null
      IdentityProviderCommonIcon.validateJSON(data['icon']);
    }
    // ensure the json data is a string
    if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
      throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
    }
    // validate the optional field `loginButtonIcon`
    if (data['loginButtonIcon']) {
      // data not null
      IdentityProviderCommonLoginButtonIcon.validateJSON(data['loginButtonIcon']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    // validate the optional field `registration`
    if (data['registration']) {
      // data not null
      IdentityProviderCommonRegistration.validateJSON(data['registration']);
    }
    // ensure the json data is a string
    if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
      throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
    }
    // ensure the json data is a string
    if (data['updatedAt'] && !(typeof data['updatedAt'] === 'string' || data['updatedAt'] instanceof String)) {
      throw new Error("Expected the field `updatedAt` to be a primitive type in the JSON string but got " + data['updatedAt']);
    }
    // ensure the json data is a string
    if (data['idpEntityId'] && !(typeof data['idpEntityId'] === 'string' || data['idpEntityId'] instanceof String)) {
      throw new Error("Expected the field `idpEntityId` to be a primitive type in the JSON string but got " + data['idpEntityId']);
    }
    // validate the optional field `idpVerification`
    if (data['idpVerification']) {
      // data not null
      IdentityProviderSAMLAllOfIdpVerification.validateJSON(data['idpVerification']);
    }
    // ensure the json data is a string
    if (data['spEntityId'] && !(typeof data['spEntityId'] === 'string' || data['spEntityId'] instanceof String)) {
      throw new Error("Expected the field `spEntityId` to be a primitive type in the JSON string but got " + data['spEntityId']);
    }
    // validate the optional field `spSigning`
    if (data['spSigning']) {
      // data not null
      IdentityProviderSAMLAllOfSpSigning.validateJSON(data['spSigning']);
    }
    // ensure the json data is a string
    if (data['ssoEndpoint'] && !(typeof data['ssoEndpoint'] === 'string' || data['ssoEndpoint'] instanceof String)) {
      throw new Error("Expected the field `ssoEndpoint` to be a primitive type in the JSON string but got " + data['ssoEndpoint']);
    }
    // ensure the json data is a string
    if (data['sloEndpoint'] && !(typeof data['sloEndpoint'] === 'string' || data['sloEndpoint'] instanceof String)) {
      throw new Error("Expected the field `sloEndpoint` to be a primitive type in the JSON string but got " + data['sloEndpoint']);
    }
    // ensure the json data is a string
    if (data['sloResponseEndpoint'] && !(typeof data['sloResponseEndpoint'] === 'string' || data['sloResponseEndpoint'] instanceof String)) {
      throw new Error("Expected the field `sloResponseEndpoint` to be a primitive type in the JSON string but got " + data['sloResponseEndpoint']);
    }
    return true;
  }
}
IdentityProviderSAML.RequiredProperties = ["enabled", "name", "type", "idpEntityId", "idpVerification", "spEntityId", "ssoBinding", "ssoEndpoint"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
IdentityProviderSAML.prototype['_links'] = undefined;

/**
 * The description of the IdP.
 * @member {String} description
 */
IdentityProviderSAML.prototype['description'] = undefined;

/**
 * The current enabled state of the IdP.
 * @member {Boolean} enabled
 */
IdentityProviderSAML.prototype['enabled'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
IdentityProviderSAML.prototype['environment'] = undefined;

/**
 * @member {module:model/IdentityProviderCommonIcon} icon
 */
IdentityProviderSAML.prototype['icon'] = undefined;

/**
 * The resource ID.
 * @member {String} id
 */
IdentityProviderSAML.prototype['id'] = undefined;

/**
 * @member {module:model/IdentityProviderCommonLoginButtonIcon} loginButtonIcon
 */
IdentityProviderSAML.prototype['loginButtonIcon'] = undefined;

/**
 * The name of the IdP.
 * @member {String} name
 */
IdentityProviderSAML.prototype['name'] = undefined;

/**
 * @member {module:model/IdentityProviderCommonRegistration} registration
 */
IdentityProviderSAML.prototype['registration'] = undefined;

/**
 * @member {module:model/EnumIdentityProviderExt} type
 */
IdentityProviderSAML.prototype['type'] = undefined;

/**
 * The time the resource was created.
 * @member {String} createdAt
 */
IdentityProviderSAML.prototype['createdAt'] = undefined;

/**
 * The time the resource was last updated.
 * @member {String} updatedAt
 */
IdentityProviderSAML.prototype['updatedAt'] = undefined;

/**
 * A boolean that specifies whether the SAML authentication request will be signed when sending to the identity provider. Set this to true if the external IDP is included in an authentication policy to be used by applications that are accessed using a mix of default URLS and custom Domains URLs.
 * @member {Boolean} authnRequestSigned
 */
IdentityProviderSAML.prototype['authnRequestSigned'] = undefined;

/**
 * A string that specifies the entity ID URI that is checked against the issuerId tag in the incoming response.
 * @member {String} idpEntityId
 */
IdentityProviderSAML.prototype['idpEntityId'] = undefined;

/**
 * @member {module:model/IdentityProviderSAMLAllOfIdpVerification} idpVerification
 */
IdentityProviderSAML.prototype['idpVerification'] = undefined;

/**
 * A string that specifies the service provider's entity ID, used to look up the application.
 * @member {String} spEntityId
 */
IdentityProviderSAML.prototype['spEntityId'] = undefined;

/**
 * @member {module:model/IdentityProviderSAMLAllOfSpSigning} spSigning
 */
IdentityProviderSAML.prototype['spSigning'] = undefined;

/**
 * @member {module:model/EnumIdentityProviderSAMLSSOBinding} ssoBinding
 */
IdentityProviderSAML.prototype['ssoBinding'] = undefined;

/**
 * A string that specifies the SSO endpoint for the authentication request.
 * @member {String} ssoEndpoint
 */
IdentityProviderSAML.prototype['ssoEndpoint'] = undefined;

/**
 * @member {module:model/EnumIdentityProviderSAMLSLOBinding} sloBinding
 */
IdentityProviderSAML.prototype['sloBinding'] = undefined;

/**
 * The logout endpoint URL. This is an optional property. However, if a `sloEndpoint` logout endpoint URL is not defined, logout actions result in an error.
 * @member {String} sloEndpoint
 */
IdentityProviderSAML.prototype['sloEndpoint'] = undefined;

/**
 * The endpoint URL to submit the logout response. If a value is not provided, the `sloEndpoint` property value is used to submit SLO response.
 * @member {String} sloResponseEndpoint
 */
IdentityProviderSAML.prototype['sloResponseEndpoint'] = undefined;

/**
 * Defines how long PingOne can exchange logout messages with the application, specifically a `LogoutRequest` from the application, since the initial request. PingOne can also send a `LogoutRequest` to the application when a single logout is initiated by the user from other session participants, such as an application or identity provider. This setting is per application. The SLO logout is separate from the user session logout that revokes all tokens.
 * @member {Number} sloWindow
 */
IdentityProviderSAML.prototype['sloWindow'] = undefined;

// Implement IdentityProviderCommon interface:
/**
 * @member {module:model/LinksHATEOAS} _links
 */
IdentityProviderCommon.prototype['_links'] = undefined;
/**
 * The description of the IdP.
 * @member {String} description
 */
IdentityProviderCommon.prototype['description'] = undefined;
/**
 * The current enabled state of the IdP.
 * @member {Boolean} enabled
 */
IdentityProviderCommon.prototype['enabled'] = undefined;
/**
 * @member {module:model/ObjectEnvironment} environment
 */
IdentityProviderCommon.prototype['environment'] = undefined;
/**
 * @member {module:model/IdentityProviderCommonIcon} icon
 */
IdentityProviderCommon.prototype['icon'] = undefined;
/**
 * The resource ID.
 * @member {String} id
 */
IdentityProviderCommon.prototype['id'] = undefined;
/**
 * @member {module:model/IdentityProviderCommonLoginButtonIcon} loginButtonIcon
 */
IdentityProviderCommon.prototype['loginButtonIcon'] = undefined;
/**
 * The name of the IdP.
 * @member {String} name
 */
IdentityProviderCommon.prototype['name'] = undefined;
/**
 * @member {module:model/IdentityProviderCommonRegistration} registration
 */
IdentityProviderCommon.prototype['registration'] = undefined;
/**
 * @member {module:model/EnumIdentityProviderExt} type
 */
IdentityProviderCommon.prototype['type'] = undefined;
/**
 * The time the resource was created.
 * @member {String} createdAt
 */
IdentityProviderCommon.prototype['createdAt'] = undefined;
/**
 * The time the resource was last updated.
 * @member {String} updatedAt
 */
IdentityProviderCommon.prototype['updatedAt'] = undefined;
export default IdentityProviderSAML;