/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFormItemAlignment from './EnumFormItemAlignment';
import EnumFormStylesWidthUnit from './EnumFormStylesWidthUnit';
import FormStylesPadding from './FormStylesPadding';

/**
 * The FormStyles model module.
 * @module model/FormStyles
 * @version 2023-06-29
 */
class FormStyles {
  /**
   * Constructs a new <code>FormStyles</code>.
   * @alias module:model/FormStyles
   */
  constructor() {
    FormStyles.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>FormStyles</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormStyles} obj Optional instance to populate.
   * @return {module:model/FormStyles} The populated <code>FormStyles</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FormStyles();
      if (data.hasOwnProperty('alignment')) {
        obj['alignment'] = EnumFormItemAlignment.constructFromObject(data['alignment']);
      }
      if (data.hasOwnProperty('backgroundColor')) {
        obj['backgroundColor'] = ApiClient.convertToType(data['backgroundColor'], 'String');
      }
      if (data.hasOwnProperty('textColor')) {
        obj['textColor'] = ApiClient.convertToType(data['textColor'], 'String');
      }
      if (data.hasOwnProperty('borderColor')) {
        obj['borderColor'] = ApiClient.convertToType(data['borderColor'], 'String');
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('height')) {
        obj['height'] = ApiClient.convertToType(data['height'], 'Number');
      }
      if (data.hasOwnProperty('padding')) {
        obj['padding'] = FormStylesPadding.constructFromObject(data['padding']);
      }
      if (data.hasOwnProperty('width')) {
        obj['width'] = ApiClient.convertToType(data['width'], 'Number');
      }
      if (data.hasOwnProperty('widthUnit')) {
        obj['widthUnit'] = EnumFormStylesWidthUnit.constructFromObject(data['widthUnit']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FormStyles</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormStyles</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (data['backgroundColor'] && !(typeof data['backgroundColor'] === 'string' || data['backgroundColor'] instanceof String)) {
      throw new Error("Expected the field `backgroundColor` to be a primitive type in the JSON string but got " + data['backgroundColor']);
    }
    // ensure the json data is a string
    if (data['textColor'] && !(typeof data['textColor'] === 'string' || data['textColor'] instanceof String)) {
      throw new Error("Expected the field `textColor` to be a primitive type in the JSON string but got " + data['textColor']);
    }
    // ensure the json data is a string
    if (data['borderColor'] && !(typeof data['borderColor'] === 'string' || data['borderColor'] instanceof String)) {
      throw new Error("Expected the field `borderColor` to be a primitive type in the JSON string but got " + data['borderColor']);
    }
    // validate the optional field `padding`
    if (data['padding']) {
      // data not null
      FormStylesPadding.validateJSON(data['padding']);
    }
    return true;
  }
}

/**
 * @member {module:model/EnumFormItemAlignment} alignment
 */
FormStyles.prototype['alignment'] = undefined;

/**
 * A string that specifies the button background color. The value must be a valid hexadecimal color.
 * @member {String} backgroundColor
 */
FormStyles.prototype['backgroundColor'] = undefined;

/**
 * A string that specifies the button text color. The value must be a valid hexadecimal color.
 * @member {String} textColor
 */
FormStyles.prototype['textColor'] = undefined;

/**
 * A string that specifies the button border color. The value must be a valid hexadecimal color.
 * @member {String} borderColor
 */
FormStyles.prototype['borderColor'] = undefined;

/**
 * A boolean that specifies whether the button is enabled.
 * @member {Boolean} enabled
 */
FormStyles.prototype['enabled'] = undefined;

/**
 * @member {Number} height
 */
FormStyles.prototype['height'] = undefined;

/**
 * @member {module:model/FormStylesPadding} padding
 */
FormStyles.prototype['padding'] = undefined;

/**
 * An integer that specifies the button width. Set as a percentage.
 * @member {Number} width
 */
FormStyles.prototype['width'] = undefined;

/**
 * @member {module:model/EnumFormStylesWidthUnit} widthUnit
 */
FormStyles.prototype['widthUnit'] = undefined;
export default FormStyles;