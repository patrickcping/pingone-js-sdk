/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormStyles from './FormStyles';

/**
 * The FormFlowButton model module.
 * @module model/FormFlowButton
 * @version 2023-06-29
 */
class FormFlowButton {
  /**
   * Constructs a new <code>FormFlowButton</code>.
   * @alias module:model/FormFlowButton
   * @param key {String} A string that specifies an identifier for the field component.
   * @param label {String} A string that specifies the button label.
   */
  constructor(key, label) {
    FormFlowButton.initialize(this, key, label);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, key, label) {
    obj['key'] = key;
    obj['label'] = label;
  }

  /**
   * Constructs a <code>FormFlowButton</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormFlowButton} obj Optional instance to populate.
   * @return {module:model/FormFlowButton} The populated <code>FormFlowButton</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FormFlowButton();
      if (data.hasOwnProperty('key')) {
        obj['key'] = ApiClient.convertToType(data['key'], 'String');
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('styles')) {
        obj['styles'] = FormStyles.constructFromObject(data['styles']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FormFlowButton</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormFlowButton</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of FormFlowButton.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
      throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
    }
    // ensure the json data is a string
    if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
      throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
    }
    // validate the optional field `styles`
    if (data['styles']) {
      // data not null
      FormStyles.validateJSON(data['styles']);
    }
    return true;
  }
}
FormFlowButton.RequiredProperties = ["key", "label"];

/**
 * A string that specifies an identifier for the field component.
 * @member {String} key
 */
FormFlowButton.prototype['key'] = undefined;

/**
 * A string that specifies the button label.
 * @member {String} label
 */
FormFlowButton.prototype['label'] = undefined;

/**
 * @member {module:model/FormStyles} styles
 */
FormFlowButton.prototype['styles'] = undefined;
export default FormFlowButton;