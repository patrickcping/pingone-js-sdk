/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserAddress model module.
 * @module model/UserAddress
 * @version 2023-06-29
 */
class UserAddress {
  /**
   * Constructs a new <code>UserAddress</code>.
   * @alias module:model/UserAddress
   */
  constructor() {
    UserAddress.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>UserAddress</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserAddress} obj Optional instance to populate.
   * @return {module:model/UserAddress} The populated <code>UserAddress</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UserAddress();
      if (data.hasOwnProperty('countryCode')) {
        obj['countryCode'] = ApiClient.convertToType(data['countryCode'], 'String');
      }
      if (data.hasOwnProperty('locality')) {
        obj['locality'] = ApiClient.convertToType(data['locality'], 'String');
      }
      if (data.hasOwnProperty('postalCode')) {
        obj['postalCode'] = ApiClient.convertToType(data['postalCode'], 'String');
      }
      if (data.hasOwnProperty('region')) {
        obj['region'] = ApiClient.convertToType(data['region'], 'String');
      }
      if (data.hasOwnProperty('streetAddress')) {
        obj['streetAddress'] = ApiClient.convertToType(data['streetAddress'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>UserAddress</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserAddress</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (data['countryCode'] && !(typeof data['countryCode'] === 'string' || data['countryCode'] instanceof String)) {
      throw new Error("Expected the field `countryCode` to be a primitive type in the JSON string but got " + data['countryCode']);
    }
    // ensure the json data is a string
    if (data['locality'] && !(typeof data['locality'] === 'string' || data['locality'] instanceof String)) {
      throw new Error("Expected the field `locality` to be a primitive type in the JSON string but got " + data['locality']);
    }
    // ensure the json data is a string
    if (data['postalCode'] && !(typeof data['postalCode'] === 'string' || data['postalCode'] instanceof String)) {
      throw new Error("Expected the field `postalCode` to be a primitive type in the JSON string but got " + data['postalCode']);
    }
    // ensure the json data is a string
    if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
      throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
    }
    // ensure the json data is a string
    if (data['streetAddress'] && !(typeof data['streetAddress'] === 'string' || data['streetAddress'] instanceof String)) {
      throw new Error("Expected the field `streetAddress` to be a primitive type in the JSON string but got " + data['streetAddress']);
    }
    return true;
  }
}

/**
 * A string that specifies the country name component. When specified, the value must be in ISO 3166-1 `alpha-2` code format [ISO3166]. For example, the country codes for the United States and Sweden are `US` and \"SE\", respectively. Valid characters consist of two upper-case letters (regex `[A-Z]{2}`).
 * @member {String} countryCode
 */
UserAddress.prototype['countryCode'] = undefined;

/**
 * A string that specifies the city or locality component of the address. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex `^[\\p{L}\\p{M}\\p{Zs}\\p{S}\\p{N}\\p{P}]*$`). It can have a length of no more than 256 characters (min/max=1/256).
 * @member {String} locality
 */
UserAddress.prototype['locality'] = undefined;

/**
 * A string that specifies the zip code or postal code component of the address. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex `^[\\p{L}\\p{M}\\p{Zs}\\p{S}\\p{N}\\p{P}]*$`). It can have a length of no more than 40 characters (min/max=1/40).
 * @member {String} postalCode
 */
UserAddress.prototype['postalCode'] = undefined;

/**
 * A string that specifies the state or region component of the address. The string can contain any letters, numbers, combining characters, math and currency symbols, dingbats and drawing characters, and invisible whitespace (regex `^[\\p{L}\\p{M}\\p{Zs}\\p{S}\\p{N}\\p{P}]*$`). It can have a length of no more than 256 characters (min/max=1/256).
 * @member {String} region
 */
UserAddress.prototype['region'] = undefined;

/**
 * A string that specifies the full street address component, which may include house number, street name, P.O. box, and multi-line extended street address information. This attribute may contain newlines (regex `^[\\p{L}\\p{M}\\p{N}\\p{Zs}\\p{P}\\n\\r]*$`). It can have a length of no more than 256 characters (min/max=1/256).
 * @member {String} streetAddress
 */
UserAddress.prototype['streetAddress'] = undefined;
export default UserAddress;