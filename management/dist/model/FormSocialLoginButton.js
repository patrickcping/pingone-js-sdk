/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFormSocialLoginIdpType from './EnumFormSocialLoginIdpType';
import FormSocialLoginButtonStyles from './FormSocialLoginButtonStyles';

/**
 * The FormSocialLoginButton model module.
 * @module model/FormSocialLoginButton
 * @version 2023-06-29
 */
class FormSocialLoginButton {
  /**
   * Constructs a new <code>FormSocialLoginButton</code>.
   * @alias module:model/FormSocialLoginButton
   * @param label {String} A string that specifies the social login button label.
   * @param idpType {module:model/EnumFormSocialLoginIdpType} 
   * @param idpName {String} A string that specifies the external identity provider name.
   * @param idpId {String} A string that specifies the external identity provider's ID.
   * @param idpEnabled {Boolean} A boolean that specifies whether the external identity provider is enabled.
   * @param iconSrc {String} A string that specifies the HTTP link (URL format) for the external identity provider's icon.
   */
  constructor(label, idpType, idpName, idpId, idpEnabled, iconSrc) {
    FormSocialLoginButton.initialize(this, label, idpType, idpName, idpId, idpEnabled, iconSrc);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, label, idpType, idpName, idpId, idpEnabled, iconSrc) {
    obj['label'] = label;
    obj['idpType'] = idpType;
    obj['idpName'] = idpName;
    obj['idpId'] = idpId;
    obj['idpEnabled'] = idpEnabled;
    obj['iconSrc'] = iconSrc;
  }

  /**
   * Constructs a <code>FormSocialLoginButton</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormSocialLoginButton} obj Optional instance to populate.
   * @return {module:model/FormSocialLoginButton} The populated <code>FormSocialLoginButton</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FormSocialLoginButton();
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('styles')) {
        obj['styles'] = FormSocialLoginButtonStyles.constructFromObject(data['styles']);
      }
      if (data.hasOwnProperty('idpType')) {
        obj['idpType'] = EnumFormSocialLoginIdpType.constructFromObject(data['idpType']);
      }
      if (data.hasOwnProperty('idpName')) {
        obj['idpName'] = ApiClient.convertToType(data['idpName'], 'String');
      }
      if (data.hasOwnProperty('idpId')) {
        obj['idpId'] = ApiClient.convertToType(data['idpId'], 'String');
      }
      if (data.hasOwnProperty('idpEnabled')) {
        obj['idpEnabled'] = ApiClient.convertToType(data['idpEnabled'], 'Boolean');
      }
      if (data.hasOwnProperty('iconSrc')) {
        obj['iconSrc'] = ApiClient.convertToType(data['iconSrc'], 'String');
      }
      if (data.hasOwnProperty('width')) {
        obj['width'] = ApiClient.convertToType(data['width'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FormSocialLoginButton</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormSocialLoginButton</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of FormSocialLoginButton.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
      throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
    }
    // validate the optional field `styles`
    if (data['styles']) {
      // data not null
      FormSocialLoginButtonStyles.validateJSON(data['styles']);
    }
    // ensure the json data is a string
    if (data['idpName'] && !(typeof data['idpName'] === 'string' || data['idpName'] instanceof String)) {
      throw new Error("Expected the field `idpName` to be a primitive type in the JSON string but got " + data['idpName']);
    }
    // ensure the json data is a string
    if (data['idpId'] && !(typeof data['idpId'] === 'string' || data['idpId'] instanceof String)) {
      throw new Error("Expected the field `idpId` to be a primitive type in the JSON string but got " + data['idpId']);
    }
    // ensure the json data is a string
    if (data['iconSrc'] && !(typeof data['iconSrc'] === 'string' || data['iconSrc'] instanceof String)) {
      throw new Error("Expected the field `iconSrc` to be a primitive type in the JSON string but got " + data['iconSrc']);
    }
    return true;
  }
}
FormSocialLoginButton.RequiredProperties = ["label", "idpType", "idpName", "idpId", "idpEnabled", "iconSrc"];

/**
 * A string that specifies the social login button label.
 * @member {String} label
 */
FormSocialLoginButton.prototype['label'] = undefined;

/**
 * @member {module:model/FormSocialLoginButtonStyles} styles
 */
FormSocialLoginButton.prototype['styles'] = undefined;

/**
 * @member {module:model/EnumFormSocialLoginIdpType} idpType
 */
FormSocialLoginButton.prototype['idpType'] = undefined;

/**
 * A string that specifies the external identity provider name.
 * @member {String} idpName
 */
FormSocialLoginButton.prototype['idpName'] = undefined;

/**
 * A string that specifies the external identity provider's ID.
 * @member {String} idpId
 */
FormSocialLoginButton.prototype['idpId'] = undefined;

/**
 * A boolean that specifies whether the external identity provider is enabled.
 * @member {Boolean} idpEnabled
 */
FormSocialLoginButton.prototype['idpEnabled'] = undefined;

/**
 * A string that specifies the HTTP link (URL format) for the external identity provider's icon.
 * @member {String} iconSrc
 */
FormSocialLoginButton.prototype['iconSrc'] = undefined;

/**
 * An integer that specifies the button width. Set as a percentage.
 * @member {Number} width
 */
FormSocialLoginButton.prototype['width'] = undefined;
export default FormSocialLoginButton;