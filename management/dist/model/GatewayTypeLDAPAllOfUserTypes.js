/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumGatewayPasswordAuthority from './EnumGatewayPasswordAuthority';
import GatewayTypeLDAPAllOfNewUserLookup from './GatewayTypeLDAPAllOfNewUserLookup';

/**
 * The GatewayTypeLDAPAllOfUserTypes model module.
 * @module model/GatewayTypeLDAPAllOfUserTypes
 * @version 2023-06-29
 */
class GatewayTypeLDAPAllOfUserTypes {
  /**
   * Constructs a new <code>GatewayTypeLDAPAllOfUserTypes</code>.
   * @alias module:model/GatewayTypeLDAPAllOfUserTypes
   * @param name {String} The name of the user type.
   * @param orderedCorrelationAttributes {Array.<String>} A map of key/value entries used to persist the external LDAP directory attributes.
   * @param passwordAuthority {module:model/EnumGatewayPasswordAuthority} 
   * @param searchBaseDn {String} The LDAP base domain name (DN) for this user type.
   */
  constructor(name, orderedCorrelationAttributes, passwordAuthority, searchBaseDn) {
    GatewayTypeLDAPAllOfUserTypes.initialize(this, name, orderedCorrelationAttributes, passwordAuthority, searchBaseDn);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, name, orderedCorrelationAttributes, passwordAuthority, searchBaseDn) {
    obj['name'] = name;
    obj['orderedCorrelationAttributes'] = orderedCorrelationAttributes;
    obj['passwordAuthority'] = passwordAuthority;
    obj['searchBaseDn'] = searchBaseDn;
  }

  /**
   * Constructs a <code>GatewayTypeLDAPAllOfUserTypes</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/GatewayTypeLDAPAllOfUserTypes} obj Optional instance to populate.
   * @return {module:model/GatewayTypeLDAPAllOfUserTypes} The populated <code>GatewayTypeLDAPAllOfUserTypes</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new GatewayTypeLDAPAllOfUserTypes();
      if (data.hasOwnProperty('allowPasswordChanges')) {
        obj['allowPasswordChanges'] = ApiClient.convertToType(data['allowPasswordChanges'], 'Boolean');
      }
      if (data.hasOwnProperty('updateUserOnSuccessfulAuthentication')) {
        obj['updateUserOnSuccessfulAuthentication'] = ApiClient.convertToType(data['updateUserOnSuccessfulAuthentication'], 'Boolean');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('newUserLookup')) {
        obj['newUserLookup'] = GatewayTypeLDAPAllOfNewUserLookup.constructFromObject(data['newUserLookup']);
      }
      if (data.hasOwnProperty('orderedCorrelationAttributes')) {
        obj['orderedCorrelationAttributes'] = ApiClient.convertToType(data['orderedCorrelationAttributes'], ['String']);
      }
      if (data.hasOwnProperty('passwordAuthority')) {
        obj['passwordAuthority'] = EnumGatewayPasswordAuthority.constructFromObject(data['passwordAuthority']);
      }
      if (data.hasOwnProperty('searchBaseDn')) {
        obj['searchBaseDn'] = ApiClient.convertToType(data['searchBaseDn'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>GatewayTypeLDAPAllOfUserTypes</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GatewayTypeLDAPAllOfUserTypes</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of GatewayTypeLDAPAllOfUserTypes.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
      throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    // validate the optional field `newUserLookup`
    if (data['newUserLookup']) {
      // data not null
      GatewayTypeLDAPAllOfNewUserLookup.validateJSON(data['newUserLookup']);
    }
    // ensure the json data is an array
    if (!Array.isArray(data['orderedCorrelationAttributes'])) {
      throw new Error("Expected the field `orderedCorrelationAttributes` to be an array in the JSON data but got " + data['orderedCorrelationAttributes']);
    }
    // ensure the json data is a string
    if (data['searchBaseDn'] && !(typeof data['searchBaseDn'] === 'string' || data['searchBaseDn'] instanceof String)) {
      throw new Error("Expected the field `searchBaseDn` to be a primitive type in the JSON string but got " + data['searchBaseDn']);
    }
    return true;
  }
}
GatewayTypeLDAPAllOfUserTypes.RequiredProperties = ["name", "orderedCorrelationAttributes", "passwordAuthority", "searchBaseDn"];

/**
 * Defaults to false if this property isn't specified in the request. If false, the user cannot change the password in the remote LDAP directory. In this case, operations for forgotten passwords or resetting of passwords are not available to a user referencing this gateway.
 * @member {Boolean} allowPasswordChanges
 */
GatewayTypeLDAPAllOfUserTypes.prototype['allowPasswordChanges'] = undefined;

/**
 * If set to true, when users sign on through an LDAP Gateway client, user attributes are updated based on responses from the LDAP server. Defaults to false if this property isn't specified in the request.
 * @member {Boolean} updateUserOnSuccessfulAuthentication
 */
GatewayTypeLDAPAllOfUserTypes.prototype['updateUserOnSuccessfulAuthentication'] = undefined;

/**
 * The UUID of the user type. This correlates to the password.external.gateway.userType.id User property.
 * @member {String} id
 */
GatewayTypeLDAPAllOfUserTypes.prototype['id'] = undefined;

/**
 * The name of the user type.
 * @member {String} name
 */
GatewayTypeLDAPAllOfUserTypes.prototype['name'] = undefined;

/**
 * @member {module:model/GatewayTypeLDAPAllOfNewUserLookup} newUserLookup
 */
GatewayTypeLDAPAllOfUserTypes.prototype['newUserLookup'] = undefined;

/**
 * A map of key/value entries used to persist the external LDAP directory attributes.
 * @member {Array.<String>} orderedCorrelationAttributes
 */
GatewayTypeLDAPAllOfUserTypes.prototype['orderedCorrelationAttributes'] = undefined;

/**
 * @member {module:model/EnumGatewayPasswordAuthority} passwordAuthority
 */
GatewayTypeLDAPAllOfUserTypes.prototype['passwordAuthority'] = undefined;

/**
 * The LDAP base domain name (DN) for this user type.
 * @member {String} searchBaseDn
 */
GatewayTypeLDAPAllOfUserTypes.prototype['searchBaseDn'] = undefined;
export default GatewayTypeLDAPAllOfUserTypes;