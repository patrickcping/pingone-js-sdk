/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumSignOnPolicyNoDeviceMode from './EnumSignOnPolicyNoDeviceMode';
import EnumSignOnPolicyType from './EnumSignOnPolicyType';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';
import SignOnPolicyActionAgreement from './SignOnPolicyActionAgreement';
import SignOnPolicyActionAgreementAllOfAgreement from './SignOnPolicyActionAgreementAllOfAgreement';
import SignOnPolicyActionCommon from './SignOnPolicyActionCommon';
import SignOnPolicyActionCommonConditionOrOrInner from './SignOnPolicyActionCommonConditionOrOrInner';
import SignOnPolicyActionCommonSignOnPolicy from './SignOnPolicyActionCommonSignOnPolicy';
import SignOnPolicyActionIDFirst from './SignOnPolicyActionIDFirst';
import SignOnPolicyActionIDFirstAllOfDiscoveryRules from './SignOnPolicyActionIDFirstAllOfDiscoveryRules';
import SignOnPolicyActionIDP from './SignOnPolicyActionIDP';
import SignOnPolicyActionIDPAllOfIdentityProvider from './SignOnPolicyActionIDPAllOfIdentityProvider';
import SignOnPolicyActionIDPAllOfRegistration from './SignOnPolicyActionIDPAllOfRegistration';
import SignOnPolicyActionLogin from './SignOnPolicyActionLogin';
import SignOnPolicyActionLoginAllOfNewUserProvisioning from './SignOnPolicyActionLoginAllOfNewUserProvisioning';
import SignOnPolicyActionLoginAllOfRecovery from './SignOnPolicyActionLoginAllOfRecovery';
import SignOnPolicyActionLoginAllOfSocialProviders from './SignOnPolicyActionLoginAllOfSocialProviders';
import SignOnPolicyActionMFA from './SignOnPolicyActionMFA';
import SignOnPolicyActionMFAAllOfApplications from './SignOnPolicyActionMFAAllOfApplications';
import SignOnPolicyActionMFAAllOfAuthenticator from './SignOnPolicyActionMFAAllOfAuthenticator';
import SignOnPolicyActionMFAAllOfBoundBiometrics from './SignOnPolicyActionMFAAllOfBoundBiometrics';
import SignOnPolicyActionMFAAllOfDeviceAuthenticationPolicy from './SignOnPolicyActionMFAAllOfDeviceAuthenticationPolicy';
import SignOnPolicyActionMFAAllOfEmail from './SignOnPolicyActionMFAAllOfEmail';
import SignOnPolicyActionMFAAllOfSecurityKey from './SignOnPolicyActionMFAAllOfSecurityKey';
import SignOnPolicyActionMFAAllOfSms from './SignOnPolicyActionMFAAllOfSms';
import SignOnPolicyActionMFAAllOfVoice from './SignOnPolicyActionMFAAllOfVoice';
import SignOnPolicyActionPingIDWinLoginPasswordless from './SignOnPolicyActionPingIDWinLoginPasswordless';
import SignOnPolicyActionPingIDWinLoginPasswordlessAllOfOfflineMode from './SignOnPolicyActionPingIDWinLoginPasswordlessAllOfOfflineMode';
import SignOnPolicyActionPingIDWinLoginPasswordlessAllOfUniqueUserAttribute from './SignOnPolicyActionPingIDWinLoginPasswordlessAllOfUniqueUserAttribute';
import SignOnPolicyActionProgressiveProfiling from './SignOnPolicyActionProgressiveProfiling';
import SignOnPolicyActionProgressiveProfilingAllOfAttributes from './SignOnPolicyActionProgressiveProfilingAllOfAttributes';

/**
 * The SignOnPolicyAction model module.
 * @module model/SignOnPolicyAction
 * @version 2023-06-29
 */
class SignOnPolicyAction {
  /**
   * Constructs a new <code>SignOnPolicyAction</code>.
   * @alias module:model/SignOnPolicyAction
   * @param {(module:model/SignOnPolicyActionAgreement|module:model/SignOnPolicyActionCommon|module:model/SignOnPolicyActionIDFirst|module:model/SignOnPolicyActionIDP|module:model/SignOnPolicyActionLogin|module:model/SignOnPolicyActionMFA|module:model/SignOnPolicyActionPingIDWinLoginPasswordless|module:model/SignOnPolicyActionProgressiveProfiling)} instance The actual instance to initialize SignOnPolicyAction.
   */
  constructor(instance = null) {
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    try {
      if (typeof instance === "SignOnPolicyActionLogin") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        SignOnPolicyActionLogin.validateJSON(instance); // throw an exception if no match
        // create SignOnPolicyActionLogin from JS object
        this.actualInstance = SignOnPolicyActionLogin.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into SignOnPolicyActionLogin
      errorMessages.push("Failed to construct SignOnPolicyActionLogin: " + err);
    }
    try {
      if (typeof instance === "SignOnPolicyActionMFA") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        SignOnPolicyActionMFA.validateJSON(instance); // throw an exception if no match
        // create SignOnPolicyActionMFA from JS object
        this.actualInstance = SignOnPolicyActionMFA.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into SignOnPolicyActionMFA
      errorMessages.push("Failed to construct SignOnPolicyActionMFA: " + err);
    }
    try {
      if (typeof instance === "SignOnPolicyActionIDFirst") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        SignOnPolicyActionIDFirst.validateJSON(instance); // throw an exception if no match
        // create SignOnPolicyActionIDFirst from JS object
        this.actualInstance = SignOnPolicyActionIDFirst.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into SignOnPolicyActionIDFirst
      errorMessages.push("Failed to construct SignOnPolicyActionIDFirst: " + err);
    }
    try {
      if (typeof instance === "SignOnPolicyActionIDP") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        SignOnPolicyActionIDP.validateJSON(instance); // throw an exception if no match
        // create SignOnPolicyActionIDP from JS object
        this.actualInstance = SignOnPolicyActionIDP.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into SignOnPolicyActionIDP
      errorMessages.push("Failed to construct SignOnPolicyActionIDP: " + err);
    }
    try {
      if (typeof instance === "SignOnPolicyActionAgreement") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        SignOnPolicyActionAgreement.validateJSON(instance); // throw an exception if no match
        // create SignOnPolicyActionAgreement from JS object
        this.actualInstance = SignOnPolicyActionAgreement.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into SignOnPolicyActionAgreement
      errorMessages.push("Failed to construct SignOnPolicyActionAgreement: " + err);
    }
    try {
      if (typeof instance === "SignOnPolicyActionProgressiveProfiling") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        SignOnPolicyActionProgressiveProfiling.validateJSON(instance); // throw an exception if no match
        // create SignOnPolicyActionProgressiveProfiling from JS object
        this.actualInstance = SignOnPolicyActionProgressiveProfiling.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into SignOnPolicyActionProgressiveProfiling
      errorMessages.push("Failed to construct SignOnPolicyActionProgressiveProfiling: " + err);
    }
    try {
      if (typeof instance === "SignOnPolicyActionCommon") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        SignOnPolicyActionCommon.validateJSON(instance); // throw an exception if no match
        // create SignOnPolicyActionCommon from JS object
        this.actualInstance = SignOnPolicyActionCommon.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into SignOnPolicyActionCommon
      errorMessages.push("Failed to construct SignOnPolicyActionCommon: " + err);
    }
    try {
      if (typeof instance === "SignOnPolicyActionPingIDWinLoginPasswordless") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        SignOnPolicyActionPingIDWinLoginPasswordless.validateJSON(instance); // throw an exception if no match
        // create SignOnPolicyActionPingIDWinLoginPasswordless from JS object
        this.actualInstance = SignOnPolicyActionPingIDWinLoginPasswordless.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into SignOnPolicyActionPingIDWinLoginPasswordless
      errorMessages.push("Failed to construct SignOnPolicyActionPingIDWinLoginPasswordless: " + err);
    }
    if (match > 1) {
      throw new Error("Multiple matches found constructing `SignOnPolicyAction` with oneOf schemas SignOnPolicyActionAgreement, SignOnPolicyActionCommon, SignOnPolicyActionIDFirst, SignOnPolicyActionIDP, SignOnPolicyActionLogin, SignOnPolicyActionMFA, SignOnPolicyActionPingIDWinLoginPasswordless, SignOnPolicyActionProgressiveProfiling. Input: " + JSON.stringify(instance));
    } else if (match === 0) {
      this.actualInstance = null; // clear the actual instance in case there are multiple matches
      throw new Error("No match found constructing `SignOnPolicyAction` with oneOf schemas SignOnPolicyActionAgreement, SignOnPolicyActionCommon, SignOnPolicyActionIDFirst, SignOnPolicyActionIDP, SignOnPolicyActionLogin, SignOnPolicyActionMFA, SignOnPolicyActionPingIDWinLoginPasswordless, SignOnPolicyActionProgressiveProfiling. Details: " + errorMessages.join(", "));
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>SignOnPolicyAction</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SignOnPolicyAction} obj Optional instance to populate.
   * @return {module:model/SignOnPolicyAction} The populated <code>SignOnPolicyAction</code> instance.
   */
  static constructFromObject(data, obj) {
    return new SignOnPolicyAction(data);
  }

  /**
   * Gets the actual instance, which can be <code>SignOnPolicyActionAgreement</code>, <code>SignOnPolicyActionCommon</code>, <code>SignOnPolicyActionIDFirst</code>, <code>SignOnPolicyActionIDP</code>, <code>SignOnPolicyActionLogin</code>, <code>SignOnPolicyActionMFA</code>, <code>SignOnPolicyActionPingIDWinLoginPasswordless</code>, <code>SignOnPolicyActionProgressiveProfiling</code>.
   * @return {(module:model/SignOnPolicyActionAgreement|module:model/SignOnPolicyActionCommon|module:model/SignOnPolicyActionIDFirst|module:model/SignOnPolicyActionIDP|module:model/SignOnPolicyActionLogin|module:model/SignOnPolicyActionMFA|module:model/SignOnPolicyActionPingIDWinLoginPasswordless|module:model/SignOnPolicyActionProgressiveProfiling)} The actual instance.
   */
  getActualInstance() {
    return this.actualInstance;
  }

  /**
   * Sets the actual instance, which can be <code>SignOnPolicyActionAgreement</code>, <code>SignOnPolicyActionCommon</code>, <code>SignOnPolicyActionIDFirst</code>, <code>SignOnPolicyActionIDP</code>, <code>SignOnPolicyActionLogin</code>, <code>SignOnPolicyActionMFA</code>, <code>SignOnPolicyActionPingIDWinLoginPasswordless</code>, <code>SignOnPolicyActionProgressiveProfiling</code>.
   * @param {(module:model/SignOnPolicyActionAgreement|module:model/SignOnPolicyActionCommon|module:model/SignOnPolicyActionIDFirst|module:model/SignOnPolicyActionIDP|module:model/SignOnPolicyActionLogin|module:model/SignOnPolicyActionMFA|module:model/SignOnPolicyActionPingIDWinLoginPasswordless|module:model/SignOnPolicyActionProgressiveProfiling)} obj The actual instance.
   */
  setActualInstance(obj) {
    this.actualInstance = SignOnPolicyAction.constructFromObject(obj).getActualInstance();
  }

  /**
   * Returns the JSON representation of the actual instance.
   * @return {string}
   */
  toJSON = function () {
    return this.getActualInstance();
  };

  /**
   * Create an instance of SignOnPolicyAction from a JSON string.
   * @param {string} json_string JSON string.
   * @return {module:model/SignOnPolicyAction} An instance of SignOnPolicyAction.
   */
  static fromJSON = function (json_string) {
    return SignOnPolicyAction.constructFromObject(JSON.parse(json_string));
  };
}

/**
 * @member {module:model/LinksHATEOAS} _links
 */
SignOnPolicyAction.prototype['_links'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionCommonConditionOrOrInner} condition
 */
SignOnPolicyAction.prototype['condition'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
SignOnPolicyAction.prototype['environment'] = undefined;

/**
 * A string that specifies the sign-on policy assignment resource’s unique identifier.
 * @member {String} id
 */
SignOnPolicyAction.prototype['id'] = undefined;

/**
 * An integer that specifies the order in which the policy referenced by this assignment is evaluated during an authentication flow relative to other policies. An assignment with a lower priority will be evaluated first. This is a required property.
 * @member {Number} priority
 */
SignOnPolicyAction.prototype['priority'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionCommonSignOnPolicy} signOnPolicy
 */
SignOnPolicyAction.prototype['signOnPolicy'] = undefined;

/**
 * @member {module:model/EnumSignOnPolicyType} type
 */
SignOnPolicyAction.prototype['type'] = undefined;

/**
 * A boolean that if set to true and if the user's account is locked (the account.canAuthenticate attribute is set to false), then social sign on with an external identity provider is prevented.
 * @member {Boolean} enforceLockoutForIdentityProviders
 */
SignOnPolicyAction.prototype['enforceLockoutForIdentityProviders'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionLoginAllOfNewUserProvisioning} newUserProvisioning
 */
SignOnPolicyAction.prototype['newUserProvisioning'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionLoginAllOfRecovery} recovery
 */
SignOnPolicyAction.prototype['recovery'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionIDPAllOfRegistration} registration
 */
SignOnPolicyAction.prototype['registration'] = undefined;

/**
 * An array of strings that specifies the IDs of the identity providers that can be used for the social login sign-on flow.
 * @member {Array.<module:model/SignOnPolicyActionLoginAllOfSocialProviders>} socialProviders
 */
SignOnPolicyAction.prototype['socialProviders'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionMFAAllOfAuthenticator} authenticator
 */
SignOnPolicyAction.prototype['authenticator'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionMFAAllOfBoundBiometrics} boundBiometrics
 */
SignOnPolicyAction.prototype['boundBiometrics'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionMFAAllOfEmail} email
 */
SignOnPolicyAction.prototype['email'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionMFAAllOfSecurityKey} securityKey
 */
SignOnPolicyAction.prototype['securityKey'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionMFAAllOfSms} sms
 */
SignOnPolicyAction.prototype['sms'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionMFAAllOfVoice} voice
 */
SignOnPolicyAction.prototype['voice'] = undefined;

/**
 * The applications collection specifies all the native native applications that are allowed in the sign-on policy action.  If the applications collection is empty, a push notification is not allowed for the action.
 * @member {Array.<module:model/SignOnPolicyActionMFAAllOfApplications>} applications
 */
SignOnPolicyAction.prototype['applications'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionMFAAllOfDeviceAuthenticationPolicy} deviceAuthenticationPolicy
 */
SignOnPolicyAction.prototype['deviceAuthenticationPolicy'] = undefined;

/**
 * @member {module:model/EnumSignOnPolicyNoDeviceMode} noDevicesMode
 */
SignOnPolicyAction.prototype['noDevicesMode'] = undefined;

/**
 * The list of IDP discovery rules that are evaluated in order when no user is associated with the user identifier. The maximum number of rules is 100. The condition on which this identity provider is used to authenticate the user is expressed using the PingOne policy condition language
 * @member {Array.<module:model/SignOnPolicyActionIDFirstAllOfDiscoveryRules>} discoveryRules
 */
SignOnPolicyAction.prototype['discoveryRules'] = undefined;

/**
 * A string that designates the sign-on policies included in the authorization flow request. Options can include the PingOne predefined sign-on policies, Single_Factor and Multi_Factor, or any custom defined sign-on policy names. Sign-on policy names should be listed in order of preference, and they must be assigned to the application. This property can be configured on the identity provider action and is passed to the identity provider if the identity provider is of type `SAML` or `OPENID_CONNECT`.
 * @member {String} acrValues
 */
SignOnPolicyAction.prototype['acrValues'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionIDPAllOfIdentityProvider} identityProvider
 */
SignOnPolicyAction.prototype['identityProvider'] = undefined;

/**
 * A boolean that specifies whether to pass in a login hint to the identity provider on the authentication request. Based on user context, the login hint is set if (1) the user is set on the flow, and (2) the user already has an account link for the identity provider. If both of these conditions are true, then the user is sent to the identity provider with a login hint equal to their externalId for the identity provider (saved on the account link). If these conditions are not true, then the API checks see if there is an OIDC login hint on the flow. If so, that login hint is used. If none of these conditions are true, the login hint parameter is not included on the authorization request to the identity provider.
 * @member {Boolean} passUserContext
 */
SignOnPolicyAction.prototype['passUserContext'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionAgreementAllOfAgreement} agreement
 */
SignOnPolicyAction.prototype['agreement'] = undefined;

/**
 * When enabled, the `Do Not Accept` button will terminate the Flow and display an error message to the user.
 * @member {Boolean} disableDeclineOption
 */
SignOnPolicyAction.prototype['disableDeclineOption'] = undefined;

/**
 * @member {Array.<module:model/SignOnPolicyActionProgressiveProfilingAllOfAttributes>} attributes
 */
SignOnPolicyAction.prototype['attributes'] = undefined;

/**
 * A boolean that specifies whether the progressive profiling action will not be executed if another progressive profiling action has already been executed during the flow. This property is required.
 * @member {Boolean} preventMultiplePromptsPerFlow
 */
SignOnPolicyAction.prototype['preventMultiplePromptsPerFlow'] = undefined;

/**
 * An integer that specifies how often to prompt the user to provide profile data for the configured attributes for which they do not have values. This property is required.
 * @member {Number} promptIntervalSeconds
 */
SignOnPolicyAction.prototype['promptIntervalSeconds'] = undefined;

/**
 * A string that specifies text to display to the user when prompting for attribute values. This property is required.
 * @member {String} promptText
 */
SignOnPolicyAction.prototype['promptText'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionPingIDWinLoginPasswordlessAllOfUniqueUserAttribute} uniqueUserAttribute
 */
SignOnPolicyAction.prototype['uniqueUserAttribute'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionPingIDWinLoginPasswordlessAllOfOfflineMode} offlineMode
 */
SignOnPolicyAction.prototype['offlineMode'] = undefined;
SignOnPolicyAction.OneOf = ["SignOnPolicyActionAgreement", "SignOnPolicyActionCommon", "SignOnPolicyActionIDFirst", "SignOnPolicyActionIDP", "SignOnPolicyActionLogin", "SignOnPolicyActionMFA", "SignOnPolicyActionPingIDWinLoginPasswordless", "SignOnPolicyActionProgressiveProfiling"];
export default SignOnPolicyAction;