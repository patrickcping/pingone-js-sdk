/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ObjectEnvironment from './ObjectEnvironment';

/**
 * The RecaptchaConfiguration model module.
 * @module model/RecaptchaConfiguration
 * @version 2023-06-29
 */
class RecaptchaConfiguration {
  /**
   * Constructs a new <code>RecaptchaConfiguration</code>.
   * @alias module:model/RecaptchaConfiguration
   * @param siteKey {String} A string that specifies the public site key for the Recaptcha configuration provided by Google.
   * @param secretKey {String} A string that specifies the confidential secret key for the Recaptcha configuration provided by Google.
   */
  constructor(siteKey, secretKey) {
    RecaptchaConfiguration.initialize(this, siteKey, secretKey);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, siteKey, secretKey) {
    obj['siteKey'] = siteKey;
    obj['secretKey'] = secretKey;
  }

  /**
   * Constructs a <code>RecaptchaConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RecaptchaConfiguration} obj Optional instance to populate.
   * @return {module:model/RecaptchaConfiguration} The populated <code>RecaptchaConfiguration</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new RecaptchaConfiguration();
      if (data.hasOwnProperty('created')) {
        obj['created'] = ApiClient.convertToType(data['created'], 'Date');
      }
      if (data.hasOwnProperty('environment')) {
        obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
      }
      if (data.hasOwnProperty('modified')) {
        obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
      }
      if (data.hasOwnProperty('siteKey')) {
        obj['siteKey'] = ApiClient.convertToType(data['siteKey'], 'String');
      }
      if (data.hasOwnProperty('secretKey')) {
        obj['secretKey'] = ApiClient.convertToType(data['secretKey'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>RecaptchaConfiguration</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RecaptchaConfiguration</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of RecaptchaConfiguration.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // validate the optional field `environment`
    if (data['environment']) {
      // data not null
      ObjectEnvironment.validateJSON(data['environment']);
    }
    // ensure the json data is a string
    if (data['siteKey'] && !(typeof data['siteKey'] === 'string' || data['siteKey'] instanceof String)) {
      throw new Error("Expected the field `siteKey` to be a primitive type in the JSON string but got " + data['siteKey']);
    }
    // ensure the json data is a string
    if (data['secretKey'] && !(typeof data['secretKey'] === 'string' || data['secretKey'] instanceof String)) {
      throw new Error("Expected the field `secretKey` to be a primitive type in the JSON string but got " + data['secretKey']);
    }
    return true;
  }
}
RecaptchaConfiguration.RequiredProperties = ["siteKey", "secretKey"];

/**
 * The time the configuration was created.
 * @member {Date} created
 */
RecaptchaConfiguration.prototype['created'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
RecaptchaConfiguration.prototype['environment'] = undefined;

/**
 * The time the configuration was last updated.
 * @member {Date} modified
 */
RecaptchaConfiguration.prototype['modified'] = undefined;

/**
 * A string that specifies the public site key for the Recaptcha configuration provided by Google.
 * @member {String} siteKey
 */
RecaptchaConfiguration.prototype['siteKey'] = undefined;

/**
 * A string that specifies the confidential secret key for the Recaptcha configuration provided by Google.
 * @member {String} secretKey
 */
RecaptchaConfiguration.prototype['secretKey'] = undefined;
export default RecaptchaConfiguration;