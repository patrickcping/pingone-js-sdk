/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormField from './FormField';

/**
 * The FormComponents model module.
 * @module model/FormComponents
 * @version 2023-06-29
 */
class FormComponents {
  /**
   * Constructs a new <code>FormComponents</code>.
   * @alias module:model/FormComponents
   * @param fields {Array.<module:model/FormField>} 
   */
  constructor(fields) {
    FormComponents.initialize(this, fields);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, fields) {
    obj['fields'] = fields;
  }

  /**
   * Constructs a <code>FormComponents</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormComponents} obj Optional instance to populate.
   * @return {module:model/FormComponents} The populated <code>FormComponents</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FormComponents();
      if (data.hasOwnProperty('fields')) {
        obj['fields'] = ApiClient.convertToType(data['fields'], [FormField]);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FormComponents</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormComponents</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of FormComponents.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    if (data['fields']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['fields'])) {
        throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
      }
      // validate the optional field `fields` (array)
      for (const item of data['fields']) {
        FormField.validateJSON(item);
      }
      ;
    }
    return true;
  }
}
FormComponents.RequiredProperties = ["fields"];

/**
 * @member {Array.<module:model/FormField>} fields
 */
FormComponents.prototype['fields'] = undefined;
export default FormComponents;