/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumCertificateKeyAlgorithm from './EnumCertificateKeyAlgorithm';
import EnumCertificateKeySignagureAlgorithm from './EnumCertificateKeySignagureAlgorithm';
import EnumCertificateKeyStatus from './EnumCertificateKeyStatus';
import EnumCertificateKeyUsageType from './EnumCertificateKeyUsageType';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';
import ObjectOrganization from './ObjectOrganization';

/**
 * The Certificate model module.
 * @module model/Certificate
 * @version 2023-06-29
 */
class Certificate {
  /**
   * Constructs a new <code>Certificate</code>.
   * @alias module:model/Certificate
   * @param algorithm {module:model/EnumCertificateKeyAlgorithm} 
   * @param keyLength {Number} The key length. For RSA keys, options are `2048`, `3072`, `4096`, and `7680`. For elliptical curve (EC) keys, options are `224`, `256`, `384`, and `521`.
   * @param name {String} Specifies the resource name.
   * @param signatureAlgorithm {module:model/EnumCertificateKeySignagureAlgorithm} 
   * @param subjectDN {String} Specifies the distinguished name of the subject being secured.
   * @param usageType {module:model/EnumCertificateKeyUsageType} 
   * @param validityPeriod {Number} Specifies the number of days the key is valid.
   */
  constructor(algorithm, keyLength, name, signatureAlgorithm, subjectDN, usageType, validityPeriod) {
    Certificate.initialize(this, algorithm, keyLength, name, signatureAlgorithm, subjectDN, usageType, validityPeriod);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, algorithm, keyLength, name, signatureAlgorithm, subjectDN, usageType, validityPeriod) {
    obj['algorithm'] = algorithm;
    obj['keyLength'] = keyLength;
    obj['name'] = name;
    obj['signatureAlgorithm'] = signatureAlgorithm;
    obj['subjectDN'] = subjectDN;
    obj['usageType'] = usageType;
    obj['validityPeriod'] = validityPeriod;
  }

  /**
   * Constructs a <code>Certificate</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Certificate} obj Optional instance to populate.
   * @return {module:model/Certificate} The populated <code>Certificate</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Certificate();
      if (data.hasOwnProperty('_links')) {
        obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
      }
      if (data.hasOwnProperty('algorithm')) {
        obj['algorithm'] = EnumCertificateKeyAlgorithm.constructFromObject(data['algorithm']);
      }
      if (data.hasOwnProperty('createdAt')) {
        obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
      }
      if (data.hasOwnProperty('default')) {
        obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
      }
      if (data.hasOwnProperty('environment')) {
        obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
      }
      if (data.hasOwnProperty('expiresAt')) {
        obj['expiresAt'] = ApiClient.convertToType(data['expiresAt'], 'Date');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('issuerDN')) {
        obj['issuerDN'] = ApiClient.convertToType(data['issuerDN'], 'String');
      }
      if (data.hasOwnProperty('keyLength')) {
        obj['keyLength'] = ApiClient.convertToType(data['keyLength'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('organization')) {
        obj['organization'] = ObjectOrganization.constructFromObject(data['organization']);
      }
      if (data.hasOwnProperty('serialNumber')) {
        obj['serialNumber'] = ApiClient.convertToType(data['serialNumber'], 'Number');
      }
      if (data.hasOwnProperty('signatureAlgorithm')) {
        obj['signatureAlgorithm'] = EnumCertificateKeySignagureAlgorithm.constructFromObject(data['signatureAlgorithm']);
      }
      if (data.hasOwnProperty('startsAt')) {
        obj['startsAt'] = ApiClient.convertToType(data['startsAt'], 'Date');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = EnumCertificateKeyStatus.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('subjectDN')) {
        obj['subjectDN'] = ApiClient.convertToType(data['subjectDN'], 'String');
      }
      if (data.hasOwnProperty('usageType')) {
        obj['usageType'] = EnumCertificateKeyUsageType.constructFromObject(data['usageType']);
      }
      if (data.hasOwnProperty('validityPeriod')) {
        obj['validityPeriod'] = ApiClient.convertToType(data['validityPeriod'], 'Number');
      }
      if (data.hasOwnProperty('customCRL')) {
        obj['customCRL'] = ApiClient.convertToType(data['customCRL'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>Certificate</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Certificate</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of Certificate.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // validate the optional field `environment`
    if (data['environment']) {
      // data not null
      ObjectEnvironment.validateJSON(data['environment']);
    }
    // ensure the json data is a string
    if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
      throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
    }
    // ensure the json data is a string
    if (data['issuerDN'] && !(typeof data['issuerDN'] === 'string' || data['issuerDN'] instanceof String)) {
      throw new Error("Expected the field `issuerDN` to be a primitive type in the JSON string but got " + data['issuerDN']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    // validate the optional field `organization`
    if (data['organization']) {
      // data not null
      ObjectOrganization.validateJSON(data['organization']);
    }
    // ensure the json data is a string
    if (data['subjectDN'] && !(typeof data['subjectDN'] === 'string' || data['subjectDN'] instanceof String)) {
      throw new Error("Expected the field `subjectDN` to be a primitive type in the JSON string but got " + data['subjectDN']);
    }
    // ensure the json data is a string
    if (data['customCRL'] && !(typeof data['customCRL'] === 'string' || data['customCRL'] instanceof String)) {
      throw new Error("Expected the field `customCRL` to be a primitive type in the JSON string but got " + data['customCRL']);
    }
    return true;
  }
}
Certificate.RequiredProperties = ["algorithm", "keyLength", "name", "signatureAlgorithm", "subjectDN", "usageType", "validityPeriod"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
Certificate.prototype['_links'] = undefined;

/**
 * @member {module:model/EnumCertificateKeyAlgorithm} algorithm
 */
Certificate.prototype['algorithm'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} createdAt
 */
Certificate.prototype['createdAt'] = undefined;

/**
 * Specifies whether this is the default key for the specified environment.
 * @member {Boolean} default
 */
Certificate.prototype['default'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
Certificate.prototype['environment'] = undefined;

/**
 * The time the key resource expires.
 * @member {Date} expiresAt
 */
Certificate.prototype['expiresAt'] = undefined;

/**
 * Specifies the resourceâ€™s unique identifier.
 * @member {String} id
 */
Certificate.prototype['id'] = undefined;

/**
 * Specifies the distinguished name of the certificate issuer.
 * @member {String} issuerDN
 */
Certificate.prototype['issuerDN'] = undefined;

/**
 * The key length. For RSA keys, options are `2048`, `3072`, `4096`, and `7680`. For elliptical curve (EC) keys, options are `224`, `256`, `384`, and `521`.
 * @member {Number} keyLength
 */
Certificate.prototype['keyLength'] = undefined;

/**
 * Specifies the resource name.
 * @member {String} name
 */
Certificate.prototype['name'] = undefined;

/**
 * @member {module:model/ObjectOrganization} organization
 */
Certificate.prototype['organization'] = undefined;

/**
 * Specifies the serial number of the key or certificate.
 * @member {Number} serialNumber
 */
Certificate.prototype['serialNumber'] = undefined;

/**
 * @member {module:model/EnumCertificateKeySignagureAlgorithm} signatureAlgorithm
 */
Certificate.prototype['signatureAlgorithm'] = undefined;

/**
 * The time the validity period starts.
 * @member {Date} startsAt
 */
Certificate.prototype['startsAt'] = undefined;

/**
 * @member {module:model/EnumCertificateKeyStatus} status
 */
Certificate.prototype['status'] = undefined;

/**
 * Specifies the distinguished name of the subject being secured.
 * @member {String} subjectDN
 */
Certificate.prototype['subjectDN'] = undefined;

/**
 * @member {module:model/EnumCertificateKeyUsageType} usageType
 */
Certificate.prototype['usageType'] = undefined;

/**
 * Specifies the number of days the key is valid.
 * @member {Number} validityPeriod
 */
Certificate.prototype['validityPeriod'] = undefined;

/**
 * A URL string of a custom Certificate Revokation List endpoint.  Used for certificates of type `ISSUANCE`.
 * @member {String} customCRL
 */
Certificate.prototype['customCRL'] = undefined;
export default Certificate;