/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumSchemaAttributeSchemaType from './EnumSchemaAttributeSchemaType';
import EnumSchemaAttributeType from './EnumSchemaAttributeType';
import SchemaAttribute from './SchemaAttribute';
import SchemaAttributeEnumeratedValuesInner from './SchemaAttributeEnumeratedValuesInner';
import SchemaAttributeRegexValidation from './SchemaAttributeRegexValidation';

/**
 * The SchemaAttributePatch model module.
 * @module model/SchemaAttributePatch
 * @version 2023-06-29
 */
class SchemaAttributePatch {
  /**
   * Constructs a new <code>SchemaAttributePatch</code>.
   * @alias module:model/SchemaAttributePatch
   */
  constructor() {
    SchemaAttributePatch.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>SchemaAttributePatch</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SchemaAttributePatch} obj Optional instance to populate.
   * @return {module:model/SchemaAttributePatch} The populated <code>SchemaAttributePatch</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new SchemaAttributePatch();
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('displayName')) {
        obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('schemaType')) {
        obj['schemaType'] = EnumSchemaAttributeSchemaType.constructFromObject(data['schemaType']);
      }
      if (data.hasOwnProperty('subAttributes')) {
        obj['subAttributes'] = ApiClient.convertToType(data['subAttributes'], [SchemaAttribute]);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = EnumSchemaAttributeType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('unique')) {
        obj['unique'] = ApiClient.convertToType(data['unique'], 'Boolean');
      }
      if (data.hasOwnProperty('multiValued')) {
        obj['multiValued'] = ApiClient.convertToType(data['multiValued'], 'Boolean');
      }
      if (data.hasOwnProperty('enumeratedValues')) {
        obj['enumeratedValues'] = ApiClient.convertToType(data['enumeratedValues'], [SchemaAttributeEnumeratedValuesInner]);
      }
      if (data.hasOwnProperty('regexValidation')) {
        obj['regexValidation'] = SchemaAttributeRegexValidation.constructFromObject(data['regexValidation']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>SchemaAttributePatch</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SchemaAttributePatch</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
      throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
    }
    // ensure the json data is a string
    if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
      throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    if (data['subAttributes']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['subAttributes'])) {
        throw new Error("Expected the field `subAttributes` to be an array in the JSON data but got " + data['subAttributes']);
      }
      // validate the optional field `subAttributes` (array)
      for (const item of data['subAttributes']) {
        SchemaAttribute.validateJSON(item);
      }
      ;
    }
    if (data['enumeratedValues']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['enumeratedValues'])) {
        throw new Error("Expected the field `enumeratedValues` to be an array in the JSON data but got " + data['enumeratedValues']);
      }
      // validate the optional field `enumeratedValues` (array)
      for (const item of data['enumeratedValues']) {
        SchemaAttributeEnumeratedValuesInner.validateJSON(item);
      }
      ;
    }
    // validate the optional field `regexValidation`
    if (data['regexValidation']) {
      // data not null
      SchemaAttributeRegexValidation.validateJSON(data['regexValidation']);
    }
    return true;
  }
}

/**
 * A string that specifies an optional property that specifies the description of the attribute. If provided, it must not be an empty string. Valid characters consists of any Unicode letter, mark (for example, accent or umlaut), numeric character, punctuation character, or space.
 * @member {String} description
 */
SchemaAttributePatch.prototype['description'] = undefined;

/**
 * A string that specifies an optional property that specifies the display name of the attribute such as 'T-shirt sizeâ€™. If provided, it must not be an empty string. Valid characters consist of any Unicode letter, mark (for example, accent or umlaut), numeric character, forward slash, dot, apostrophe, underscore, space, or hyphen.
 * @member {String} displayName
 */
SchemaAttributePatch.prototype['displayName'] = undefined;

/**
 * A boolean that specifies whether or not the attribute is enabled. This is a required property for POST and PUT operations; it cannot be omitted or explicitly set to null. Disabled attributes are ignored on create/update and not returned on read.
 * @member {Boolean} enabled
 */
SchemaAttributePatch.prototype['enabled'] = undefined;

/**
 * A string that specifies the name of the attribute. The attribute name must be provided during creation, must not be empty and must not exceed 256 characters. It must also be unique within the schema for an environment. It must start with a letter and may be followed by letters, numbers or hyphens.
 * @member {String} name
 */
SchemaAttributePatch.prototype['name'] = undefined;

/**
 * A boolean that specifies whether or not the attribute is required. Required attributes must be provided a value during create/update. Defaults to false if not provided.
 * @member {Boolean} required
 */
SchemaAttributePatch.prototype['required'] = undefined;

/**
 * @member {module:model/EnumSchemaAttributeSchemaType} schemaType
 */
SchemaAttributePatch.prototype['schemaType'] = undefined;

/**
 * The list of sub-attributes of this attribute. Only `COMPLEX` attribute types can have sub-attributes, and only one-level of nesting is allowed. The leaf attribute definition must have a type of `STRING` or `JSON`. A `COMPLEX` attribute definition must have at least one child attribute definition.
 * @member {Array.<module:model/SchemaAttribute>} subAttributes
 */
SchemaAttributePatch.prototype['subAttributes'] = undefined;

/**
 * @member {module:model/EnumSchemaAttributeType} type
 */
SchemaAttributePatch.prototype['type'] = undefined;

/**
 * A boolean that specifies whether or not the attribute must have a unique value within the environment. This is a required property for POST and PUT operations; it cannot be omitted or explicitly set to null.
 * @member {Boolean} unique
 */
SchemaAttributePatch.prototype['unique'] = undefined;

/**
 * A boolean that specifies whether the attribute has multiple values or a single one. This value can only change from false to true, as changing from true to false is not allowed. Maximum number of values stored is 1,000.
 * @member {Boolean} multiValued
 */
SchemaAttributePatch.prototype['multiValued'] = undefined;

/**
 * @member {Array.<module:model/SchemaAttributeEnumeratedValuesInner>} enumeratedValues
 */
SchemaAttributePatch.prototype['enumeratedValues'] = undefined;

/**
 * @member {module:model/SchemaAttributeRegexValidation} regexValidation
 */
SchemaAttributePatch.prototype['regexValidation'] = undefined;
export default SchemaAttributePatch;