/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GatewayInstanceGateway from './GatewayInstanceGateway';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';
import RoleAssignmentGroup from './RoleAssignmentGroup';
import RoleAssignmentRole from './RoleAssignmentRole';
import RoleAssignmentScope from './RoleAssignmentScope';

/**
 * The RoleAssignment model module.
 * @module model/RoleAssignment
 * @version 2023-06-29
 */
class RoleAssignment {
  /**
   * Constructs a new <code>RoleAssignment</code>.
   * @alias module:model/RoleAssignment
   * @param role {module:model/RoleAssignmentRole} 
   * @param scope {module:model/RoleAssignmentScope} 
   */
  constructor(role, scope) {
    RoleAssignment.initialize(this, role, scope);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, role, scope) {
    obj['role'] = role;
    obj['scope'] = scope;
  }

  /**
   * Constructs a <code>RoleAssignment</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RoleAssignment} obj Optional instance to populate.
   * @return {module:model/RoleAssignment} The populated <code>RoleAssignment</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new RoleAssignment();
      if (data.hasOwnProperty('_links')) {
        obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
      }
      if (data.hasOwnProperty('environment')) {
        obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
      }
      if (data.hasOwnProperty('gateway')) {
        obj['gateway'] = GatewayInstanceGateway.constructFromObject(data['gateway']);
      }
      if (data.hasOwnProperty('group')) {
        obj['group'] = RoleAssignmentGroup.constructFromObject(data['group']);
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('readOnly')) {
        obj['readOnly'] = ApiClient.convertToType(data['readOnly'], 'Boolean');
      }
      if (data.hasOwnProperty('role')) {
        obj['role'] = RoleAssignmentRole.constructFromObject(data['role']);
      }
      if (data.hasOwnProperty('scope')) {
        obj['scope'] = RoleAssignmentScope.constructFromObject(data['scope']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>RoleAssignment</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RoleAssignment</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of RoleAssignment.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // validate the optional field `environment`
    if (data['environment']) {
      // data not null
      ObjectEnvironment.validateJSON(data['environment']);
    }
    // validate the optional field `gateway`
    if (data['gateway']) {
      // data not null
      GatewayInstanceGateway.validateJSON(data['gateway']);
    }
    // validate the optional field `group`
    if (data['group']) {
      // data not null
      RoleAssignmentGroup.validateJSON(data['group']);
    }
    // ensure the json data is a string
    if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
      throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
    }
    // validate the optional field `role`
    if (data['role']) {
      // data not null
      RoleAssignmentRole.validateJSON(data['role']);
    }
    // validate the optional field `scope`
    if (data['scope']) {
      // data not null
      RoleAssignmentScope.validateJSON(data['scope']);
    }
    return true;
  }
}
RoleAssignment.RequiredProperties = ["role", "scope"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
RoleAssignment.prototype['_links'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
RoleAssignment.prototype['environment'] = undefined;

/**
 * @member {module:model/GatewayInstanceGateway} gateway
 */
RoleAssignment.prototype['gateway'] = undefined;

/**
 * @member {module:model/RoleAssignmentGroup} group
 */
RoleAssignment.prototype['group'] = undefined;

/**
 * A string that specifies the user role assignment ID.
 * @member {String} id
 */
RoleAssignment.prototype['id'] = undefined;

/**
 * A boolean that specifies whether this role assignment can be deleted by the current actor.
 * @member {Boolean} readOnly
 */
RoleAssignment.prototype['readOnly'] = undefined;

/**
 * @member {module:model/RoleAssignmentRole} role
 */
RoleAssignment.prototype['role'] = undefined;

/**
 * @member {module:model/RoleAssignmentScope} scope
 */
RoleAssignment.prototype['scope'] = undefined;
export default RoleAssignment;