/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinksHATEOAS from './LinksHATEOAS';
import NotificationsSettingsEmailDeliverySettingsFrom from './NotificationsSettingsEmailDeliverySettingsFrom';
import NotificationsSettingsEmailDeliverySettingsReplyTo from './NotificationsSettingsEmailDeliverySettingsReplyTo';
import ObjectEnvironment from './ObjectEnvironment';

/**
 * The NotificationsSettingsEmailDeliverySettings model module.
 * @module model/NotificationsSettingsEmailDeliverySettings
 * @version 2023-06-29
 */
class NotificationsSettingsEmailDeliverySettings {
  /**
   * Constructs a new <code>NotificationsSettingsEmailDeliverySettings</code>.
   * @alias module:model/NotificationsSettingsEmailDeliverySettings
   */
  constructor() {
    NotificationsSettingsEmailDeliverySettings.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>NotificationsSettingsEmailDeliverySettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/NotificationsSettingsEmailDeliverySettings} obj Optional instance to populate.
   * @return {module:model/NotificationsSettingsEmailDeliverySettings} The populated <code>NotificationsSettingsEmailDeliverySettings</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new NotificationsSettingsEmailDeliverySettings();
      if (data.hasOwnProperty('_links')) {
        obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
      }
      if (data.hasOwnProperty('host')) {
        obj['host'] = ApiClient.convertToType(data['host'], 'String');
      }
      if (data.hasOwnProperty('port')) {
        obj['port'] = ApiClient.convertToType(data['port'], 'Number');
      }
      if (data.hasOwnProperty('protocol')) {
        obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
      }
      if (data.hasOwnProperty('username')) {
        obj['username'] = ApiClient.convertToType(data['username'], 'String');
      }
      if (data.hasOwnProperty('password')) {
        obj['password'] = ApiClient.convertToType(data['password'], 'String');
      }
      if (data.hasOwnProperty('environment')) {
        obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
      }
      if (data.hasOwnProperty('from')) {
        obj['from'] = NotificationsSettingsEmailDeliverySettingsFrom.constructFromObject(data['from']);
      }
      if (data.hasOwnProperty('replyTo')) {
        obj['replyTo'] = NotificationsSettingsEmailDeliverySettingsReplyTo.constructFromObject(data['replyTo']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>NotificationsSettingsEmailDeliverySettings</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationsSettingsEmailDeliverySettings</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
      throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
    }
    // ensure the json data is a string
    if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
      throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
    }
    // ensure the json data is a string
    if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
      throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
    }
    // ensure the json data is a string
    if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
      throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
    }
    // validate the optional field `environment`
    if (data['environment']) {
      // data not null
      ObjectEnvironment.validateJSON(data['environment']);
    }
    // validate the optional field `from`
    if (data['from']) {
      // data not null
      NotificationsSettingsEmailDeliverySettingsFrom.validateJSON(data['from']);
    }
    // validate the optional field `replyTo`
    if (data['replyTo']) {
      // data not null
      NotificationsSettingsEmailDeliverySettingsReplyTo.validateJSON(data['replyTo']);
    }
    return true;
  }
}

/**
 * @member {module:model/LinksHATEOAS} _links
 */
NotificationsSettingsEmailDeliverySettings.prototype['_links'] = undefined;

/**
 * A string that specifies the organization's SMTP server.
 * @member {String} host
 */
NotificationsSettingsEmailDeliverySettings.prototype['host'] = undefined;

/**
 * An integer that specifies the port used by the organization's SMTP server to send emails (default `465`). Note that the protocol used depends upon the port specified. If you specify port `25`, `587`, or `2525`, SMTP with `STARTTLS` is used. Otherwise, `SMTPS` is used.
 * @member {Number} port
 * @default 465
 */
NotificationsSettingsEmailDeliverySettings.prototype['port'] = 465;

/**
 * A string that specifies the organization's SMTP server's protocol.
 * @member {String} protocol
 */
NotificationsSettingsEmailDeliverySettings.prototype['protocol'] = undefined;

/**
 * A string that specifies the organization's SMTP server's username.
 * @member {String} username
 */
NotificationsSettingsEmailDeliverySettings.prototype['username'] = undefined;

/**
 * A string that specifies the organization's SMTP server's password.
 * @member {String} password
 */
NotificationsSettingsEmailDeliverySettings.prototype['password'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
NotificationsSettingsEmailDeliverySettings.prototype['environment'] = undefined;

/**
 * @member {module:model/NotificationsSettingsEmailDeliverySettingsFrom} from
 */
NotificationsSettingsEmailDeliverySettings.prototype['from'] = undefined;

/**
 * @member {module:model/NotificationsSettingsEmailDeliverySettingsReplyTo} replyTo
 */
NotificationsSettingsEmailDeliverySettings.prototype['replyTo'] = undefined;
export default NotificationsSettingsEmailDeliverySettings;