/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LicenseMfa model module.
 * @module model/LicenseMfa
 * @version 2023-06-29
 */
class LicenseMfa {
  /**
   * Constructs a new <code>LicenseMfa</code>.
   * @alias module:model/LicenseMfa
   */
  constructor() {
    LicenseMfa.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>LicenseMfa</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/LicenseMfa} obj Optional instance to populate.
   * @return {module:model/LicenseMfa} The populated <code>LicenseMfa</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new LicenseMfa();
      if (data.hasOwnProperty('allowPushNotification')) {
        obj['allowPushNotification'] = ApiClient.convertToType(data['allowPushNotification'], 'Boolean');
      }
      if (data.hasOwnProperty('allowNotificationOutsideWhitelist')) {
        obj['allowNotificationOutsideWhitelist'] = ApiClient.convertToType(data['allowNotificationOutsideWhitelist'], 'Boolean');
      }
      if (data.hasOwnProperty('allowFido2Devices')) {
        obj['allowFido2Devices'] = ApiClient.convertToType(data['allowFido2Devices'], 'Boolean');
      }
      if (data.hasOwnProperty('allowVoiceOtp')) {
        obj['allowVoiceOtp'] = ApiClient.convertToType(data['allowVoiceOtp'], 'Boolean');
      }
      if (data.hasOwnProperty('allowEmailOtp')) {
        obj['allowEmailOtp'] = ApiClient.convertToType(data['allowEmailOtp'], 'Boolean');
      }
      if (data.hasOwnProperty('allowSmsOtp')) {
        obj['allowSmsOtp'] = ApiClient.convertToType(data['allowSmsOtp'], 'Boolean');
      }
      if (data.hasOwnProperty('allowTotp')) {
        obj['allowTotp'] = ApiClient.convertToType(data['allowTotp'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>LicenseMfa</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseMfa</code>.
   */
  static validateJSON(data) {
    return true;
  }
}

/**
 * A read-only boolean that specifies whether push notifications are allowed. For TRIAL (unpaid) licenses, the default value is true. For other license package types, adoption of the feature determines the default value.
 * @member {Boolean} allowPushNotification
 */
LicenseMfa.prototype['allowPushNotification'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports sending notifications outside of the environment's whitelist.
 * @member {Boolean} allowNotificationOutsideWhitelist
 */
LicenseMfa.prototype['allowNotificationOutsideWhitelist'] = undefined;

/**
 * A read-only boolean that specifies whether FIDO2 devices are allowed. For TRIAL (unpaid) licenses, the default value is true. For other license package types, adoption of the feature determines the default value.
 * @member {Boolean} allowFido2Devices
 */
LicenseMfa.prototype['allowFido2Devices'] = undefined;

/**
 * @member {Boolean} allowVoiceOtp
 */
LicenseMfa.prototype['allowVoiceOtp'] = undefined;

/**
 * @member {Boolean} allowEmailOtp
 */
LicenseMfa.prototype['allowEmailOtp'] = undefined;

/**
 * @member {Boolean} allowSmsOtp
 */
LicenseMfa.prototype['allowSmsOtp'] = undefined;

/**
 * @member {Boolean} allowTotp
 */
LicenseMfa.prototype['allowTotp'] = undefined;
export default LicenseMfa;