/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFormFieldType from './EnumFormFieldType';
import EnumFormItemAlignment from './EnumFormItemAlignment';
import EnumFormRecaptchaV2Size from './EnumFormRecaptchaV2Size';
import EnumFormRecaptchaV2Theme from './EnumFormRecaptchaV2Theme';
import FormFieldCommon from './FormFieldCommon';
import FormFieldCommonPosition from './FormFieldCommonPosition';
import FormRecaptchaV2 from './FormRecaptchaV2';

/**
 * The FormFieldRecaptchaV2 model module.
 * @module model/FormFieldRecaptchaV2
 * @version 2023-06-29
 */
class FormFieldRecaptchaV2 {
  /**
   * Constructs a new <code>FormFieldRecaptchaV2</code>.
   * @alias module:model/FormFieldRecaptchaV2
   * @implements module:model/FormFieldCommon
   * @implements module:model/FormRecaptchaV2
   * @param type {module:model/EnumFormFieldType} 
   * @param position {module:model/FormFieldCommonPosition} 
   * @param size {module:model/EnumFormRecaptchaV2Size} 
   * @param theme {module:model/EnumFormRecaptchaV2Theme} 
   * @param alignment {module:model/EnumFormItemAlignment} 
   */
  constructor(type, position, size, theme, alignment) {
    FormFieldCommon.initialize(this, type, position);
    FormRecaptchaV2.initialize(this, size, theme, alignment);
    FormFieldRecaptchaV2.initialize(this, type, position, size, theme, alignment);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, type, position, size, theme, alignment) {
    obj['type'] = type;
    obj['position'] = position;
    obj['size'] = size;
    obj['theme'] = theme;
    obj['alignment'] = alignment;
  }

  /**
   * Constructs a <code>FormFieldRecaptchaV2</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FormFieldRecaptchaV2} obj Optional instance to populate.
   * @return {module:model/FormFieldRecaptchaV2} The populated <code>FormFieldRecaptchaV2</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new FormFieldRecaptchaV2();
      FormFieldCommon.constructFromObject(data, obj);
      FormRecaptchaV2.constructFromObject(data, obj);
      if (data.hasOwnProperty('type')) {
        obj['type'] = EnumFormFieldType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('position')) {
        obj['position'] = FormFieldCommonPosition.constructFromObject(data['position']);
      }
      if (data.hasOwnProperty('size')) {
        obj['size'] = EnumFormRecaptchaV2Size.constructFromObject(data['size']);
      }
      if (data.hasOwnProperty('theme')) {
        obj['theme'] = EnumFormRecaptchaV2Theme.constructFromObject(data['theme']);
      }
      if (data.hasOwnProperty('alignment')) {
        obj['alignment'] = EnumFormItemAlignment.constructFromObject(data['alignment']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>FormFieldRecaptchaV2</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormFieldRecaptchaV2</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of FormFieldRecaptchaV2.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // validate the optional field `position`
    if (data['position']) {
      // data not null
      FormFieldCommonPosition.validateJSON(data['position']);
    }
    return true;
  }
}
FormFieldRecaptchaV2.RequiredProperties = ["type", "position", "size", "theme", "alignment"];

/**
 * @member {module:model/EnumFormFieldType} type
 */
FormFieldRecaptchaV2.prototype['type'] = undefined;

/**
 * @member {module:model/FormFieldCommonPosition} position
 */
FormFieldRecaptchaV2.prototype['position'] = undefined;

/**
 * @member {module:model/EnumFormRecaptchaV2Size} size
 */
FormFieldRecaptchaV2.prototype['size'] = undefined;

/**
 * @member {module:model/EnumFormRecaptchaV2Theme} theme
 */
FormFieldRecaptchaV2.prototype['theme'] = undefined;

/**
 * @member {module:model/EnumFormItemAlignment} alignment
 */
FormFieldRecaptchaV2.prototype['alignment'] = undefined;

// Implement FormFieldCommon interface:
/**
 * @member {module:model/EnumFormFieldType} type
 */
FormFieldCommon.prototype['type'] = undefined;
/**
 * @member {module:model/FormFieldCommonPosition} position
 */
FormFieldCommon.prototype['position'] = undefined;
// Implement FormRecaptchaV2 interface:
/**
 * @member {module:model/EnumFormRecaptchaV2Size} size
 */
FormRecaptchaV2.prototype['size'] = undefined;
/**
 * @member {module:model/EnumFormRecaptchaV2Theme} theme
 */
FormRecaptchaV2.prototype['theme'] = undefined;
/**
 * @member {module:model/EnumFormItemAlignment} alignment
 */
FormRecaptchaV2.prototype['alignment'] = undefined;
export default FormFieldRecaptchaV2;