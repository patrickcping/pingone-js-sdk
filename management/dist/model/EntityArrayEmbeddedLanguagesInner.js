/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgreementLanguage from './AgreementLanguage';
import AgreementLanguageAgreement from './AgreementLanguageAgreement';
import AgreementLanguageCurrentRevision from './AgreementLanguageCurrentRevision';
import AgreementLanguageUserExperience from './AgreementLanguageUserExperience';
import Language from './Language';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';

/**
 * The EntityArrayEmbeddedLanguagesInner model module.
 * @module model/EntityArrayEmbeddedLanguagesInner
 * @version 2023-06-29
 */
class EntityArrayEmbeddedLanguagesInner {
  /**
   * Constructs a new <code>EntityArrayEmbeddedLanguagesInner</code>.
   * @alias module:model/EntityArrayEmbeddedLanguagesInner
   * @param {(module:model/AgreementLanguage|module:model/Language)} instance The actual instance to initialize EntityArrayEmbeddedLanguagesInner.
   */
  constructor(instance = null) {
    if (instance === null) {
      this.actualInstance = null;
      return;
    }
    var match = 0;
    var errorMessages = [];
    try {
      if (typeof instance === "AgreementLanguage") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        AgreementLanguage.validateJSON(instance); // throw an exception if no match
        // create AgreementLanguage from JS object
        this.actualInstance = AgreementLanguage.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into AgreementLanguage
      errorMessages.push("Failed to construct AgreementLanguage: " + err);
    }
    try {
      if (typeof instance === "Language") {
        this.actualInstance = instance;
      } else {
        // plain JS object
        // validate the object
        Language.validateJSON(instance); // throw an exception if no match
        // create Language from JS object
        this.actualInstance = Language.constructFromObject(instance);
      }
      match++;
    } catch (err) {
      // json data failed to deserialize into Language
      errorMessages.push("Failed to construct Language: " + err);
    }
    if (match > 1) {
      throw new Error("Multiple matches found constructing `EntityArrayEmbeddedLanguagesInner` with oneOf schemas AgreementLanguage, Language. Input: " + JSON.stringify(instance));
    } else if (match === 0) {
      this.actualInstance = null; // clear the actual instance in case there are multiple matches
      throw new Error("No match found constructing `EntityArrayEmbeddedLanguagesInner` with oneOf schemas AgreementLanguage, Language. Details: " + errorMessages.join(", "));
    } else {// only 1 match
      // the input is valid
    }
  }

  /**
   * Constructs a <code>EntityArrayEmbeddedLanguagesInner</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EntityArrayEmbeddedLanguagesInner} obj Optional instance to populate.
   * @return {module:model/EntityArrayEmbeddedLanguagesInner} The populated <code>EntityArrayEmbeddedLanguagesInner</code> instance.
   */
  static constructFromObject(data, obj) {
    return new EntityArrayEmbeddedLanguagesInner(data);
  }

  /**
   * Gets the actual instance, which can be <code>AgreementLanguage</code>, <code>Language</code>.
   * @return {(module:model/AgreementLanguage|module:model/Language)} The actual instance.
   */
  getActualInstance() {
    return this.actualInstance;
  }

  /**
   * Sets the actual instance, which can be <code>AgreementLanguage</code>, <code>Language</code>.
   * @param {(module:model/AgreementLanguage|module:model/Language)} obj The actual instance.
   */
  setActualInstance(obj) {
    this.actualInstance = EntityArrayEmbeddedLanguagesInner.constructFromObject(obj).getActualInstance();
  }

  /**
   * Returns the JSON representation of the actual instance.
   * @return {string}
   */
  toJSON = function () {
    return this.getActualInstance();
  };

  /**
   * Create an instance of EntityArrayEmbeddedLanguagesInner from a JSON string.
   * @param {string} json_string JSON string.
   * @return {module:model/EntityArrayEmbeddedLanguagesInner} An instance of EntityArrayEmbeddedLanguagesInner.
   */
  static fromJSON = function (json_string) {
    return EntityArrayEmbeddedLanguagesInner.constructFromObject(JSON.parse(json_string));
  };
}

/**
 * @member {module:model/LinksHATEOAS} _links
 */
EntityArrayEmbeddedLanguagesInner.prototype['_links'] = undefined;

/**
 * @member {module:model/AgreementLanguageAgreement} agreement
 */
EntityArrayEmbeddedLanguagesInner.prototype['agreement'] = undefined;

/**
 * @member {module:model/AgreementLanguageCurrentRevision} currentRevision
 */
EntityArrayEmbeddedLanguagesInner.prototype['currentRevision'] = undefined;

/**
 * A string that is used as the title of the agreement for the language presented to the user. This is a required property.
 * @member {String} displayName
 */
EntityArrayEmbeddedLanguagesInner.prototype['displayName'] = undefined;

/**
 * Specifies whether this language is enabled for the environment. This property value must be set to false when creating a language.
 * @member {Boolean} enabled
 */
EntityArrayEmbeddedLanguagesInner.prototype['enabled'] = undefined;

/**
 * The resourceâ€™s unique identifier.
 * @member {String} id
 */
EntityArrayEmbeddedLanguagesInner.prototype['id'] = undefined;

/**
 * An ISO standard language code. For more information about standard language codes, see ISO Language Code Table.
 * @member {String} locale
 */
EntityArrayEmbeddedLanguagesInner.prototype['locale'] = undefined;

/**
 * @member {module:model/AgreementLanguageUserExperience} userExperience
 */
EntityArrayEmbeddedLanguagesInner.prototype['userExperience'] = undefined;

/**
 * Specifies whether this language is the default for the environment. This property value must be set to false when creating a language resource. It can be set to true only after the language is enabled and after the localization of an agreement resource is complete when agreements are used for the environment.
 * @member {Boolean} default
 */
EntityArrayEmbeddedLanguagesInner.prototype['default'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
EntityArrayEmbeddedLanguagesInner.prototype['environment'] = undefined;

/**
 * The language name. If omitted, the ISO standard name is used.
 * @member {String} name
 */
EntityArrayEmbeddedLanguagesInner.prototype['name'] = undefined;

/**
 * The time the language resource was created.
 * @member {Date} createdAt
 */
EntityArrayEmbeddedLanguagesInner.prototype['createdAt'] = undefined;

/**
 * Specifies whether this language was added by a customer administrator.
 * @member {Boolean} customerAdded
 */
EntityArrayEmbeddedLanguagesInner.prototype['customerAdded'] = undefined;

/**
 * The time the language resource was last updated.
 * @member {Date} updatedAt
 */
EntityArrayEmbeddedLanguagesInner.prototype['updatedAt'] = undefined;
EntityArrayEmbeddedLanguagesInner.OneOf = ["AgreementLanguage", "Language"];
export default EntityArrayEmbeddedLanguagesInner;