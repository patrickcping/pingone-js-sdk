/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumRoleAssignmentScopeType from './EnumRoleAssignmentScopeType';
import EnumRoleName from './EnumRoleName';
import LinksHATEOAS from './LinksHATEOAS';
import RolePermissionsInner from './RolePermissionsInner';

/**
 * The Role model module.
 * @module model/Role
 * @version 2023-06-29
 */
class Role {
  /**
   * Constructs a new <code>Role</code>.
   * @alias module:model/Role
   */
  constructor() {
    Role.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>Role</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Role} obj Optional instance to populate.
   * @return {module:model/Role} The populated <code>Role</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Role();
      if (data.hasOwnProperty('_links')) {
        obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
      }
      if (data.hasOwnProperty('applicableTo')) {
        obj['applicableTo'] = ApiClient.convertToType(data['applicableTo'], [EnumRoleAssignmentScopeType]);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = EnumRoleName.constructFromObject(data['name']);
      }
      if (data.hasOwnProperty('permissions')) {
        obj['permissions'] = ApiClient.convertToType(data['permissions'], [RolePermissionsInner]);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>Role</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Role</code>.
   */
  static validateJSON(data) {
    // ensure the json data is an array
    if (!Array.isArray(data['applicableTo'])) {
      throw new Error("Expected the field `applicableTo` to be an array in the JSON data but got " + data['applicableTo']);
    }
    // ensure the json data is a string
    if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
      throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
    }
    // ensure the json data is a string
    if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
      throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
    }
    if (data['permissions']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['permissions'])) {
        throw new Error("Expected the field `permissions` to be an array in the JSON data but got " + data['permissions']);
      }
      // validate the optional field `permissions` (array)
      for (const item of data['permissions']) {
        RolePermissionsInner.validateJSON(item);
      }
      ;
    }
    return true;
  }
}

/**
 * @member {module:model/LinksHATEOAS} _links
 */
Role.prototype['_links'] = undefined;

/**
 * A set of strings that specifies the scopes to which the role applies.
 * @member {Array.<module:model/EnumRoleAssignmentScopeType>} applicableTo
 */
Role.prototype['applicableTo'] = undefined;

/**
 * A string that specifies the description of the role.
 * @member {String} description
 */
Role.prototype['description'] = undefined;

/**
 * A string that specifies the ID of the role.
 * @member {String} id
 */
Role.prototype['id'] = undefined;

/**
 * @member {module:model/EnumRoleName} name
 */
Role.prototype['name'] = undefined;

/**
 * A set of permissions assigned to the role.
 * @member {Array.<module:model/RolePermissionsInner>} permissions
 */
Role.prototype['permissions'] = undefined;
export default Role;