/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserPhoto model module.
 * @module model/UserPhoto
 * @version 2023-06-29
 */
class UserPhoto {
  /**
   * Constructs a new <code>UserPhoto</code>.
   * @alias module:model/UserPhoto
   * @param href {String} A string that specifies the URI that is a uniform resource locator (as defined in Section 1.1.3 of RFC 3986) that points to a resource location representing the user’s image. This can be removed from a user by setting the photo attribute to null. If provided, the resource must be a file (for example, a GIF, JPEG, or PNG image file) rather than a web page containing an image. It must be a valid URL that starts with the HTTP or HTTPS scheme.
   */
  constructor(href) {
    UserPhoto.initialize(this, href);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, href) {
    obj['href'] = href;
  }

  /**
   * Constructs a <code>UserPhoto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/UserPhoto} obj Optional instance to populate.
   * @return {module:model/UserPhoto} The populated <code>UserPhoto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new UserPhoto();
      if (data.hasOwnProperty('href')) {
        obj['href'] = ApiClient.convertToType(data['href'], 'String');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>UserPhoto</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserPhoto</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of UserPhoto.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    // ensure the json data is a string
    if (data['href'] && !(typeof data['href'] === 'string' || data['href'] instanceof String)) {
      throw new Error("Expected the field `href` to be a primitive type in the JSON string but got " + data['href']);
    }
    return true;
  }
}
UserPhoto.RequiredProperties = ["href"];

/**
 * A string that specifies the URI that is a uniform resource locator (as defined in Section 1.1.3 of RFC 3986) that points to a resource location representing the user’s image. This can be removed from a user by setting the photo attribute to null. If provided, the resource must be a file (for example, a GIF, JPEG, or PNG image file) rather than a web page containing an image. It must be a valid URL that starts with the HTTP or HTTPS scheme.
 * @member {String} href
 */
UserPhoto.prototype['href'] = undefined;
export default UserPhoto;