/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import ResourceAttribute from '../model/ResourceAttribute';

/**
* ResourceAttributes service.
* @module api/ResourceAttributesApi
* @version 2023-06-29
*/
export default class ResourceAttributesApi {
  /**
  * Constructs a new ResourceAttributesApi. 
  * @alias module:api/ResourceAttributesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Resource Attribute
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @param {Object} opts Optional parameters
   * @param {module:model/ResourceAttribute} [resourceAttribute] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceAttribute} and HTTP response
   */
  createResourceAttributeWithHttpInfo(environmentID, resourceID, opts) {
    opts = opts || {};
    let postBody = opts['resourceAttribute'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createResourceAttribute");
    }
    // verify the required parameter 'resourceID' is set
    if (resourceID === undefined || resourceID === null) {
      throw new Error("Missing the required parameter 'resourceID' when calling createResourceAttribute");
    }
    let pathParams = {
      'environmentID': environmentID,
      'resourceID': resourceID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = ResourceAttribute;
    return this.apiClient.callApi('/environments/{environmentID}/resources/{resourceID}/attributes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Resource Attribute
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @param {Object} opts Optional parameters
   * @param {module:model/ResourceAttribute} opts.resourceAttribute 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceAttribute}
   */
  createResourceAttribute(environmentID, resourceID, opts) {
    return this.createResourceAttributeWithHttpInfo(environmentID, resourceID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Resource Attribute
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @param {String} resourceAttrID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteResourceAttributeWithHttpInfo(environmentID, resourceID, resourceAttrID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteResourceAttribute");
    }
    // verify the required parameter 'resourceID' is set
    if (resourceID === undefined || resourceID === null) {
      throw new Error("Missing the required parameter 'resourceID' when calling deleteResourceAttribute");
    }
    // verify the required parameter 'resourceAttrID' is set
    if (resourceAttrID === undefined || resourceAttrID === null) {
      throw new Error("Missing the required parameter 'resourceAttrID' when calling deleteResourceAttribute");
    }
    let pathParams = {
      'environmentID': environmentID,
      'resourceID': resourceID,
      'resourceAttrID': resourceAttrID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/resources/{resourceID}/attributes/{resourceAttrID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Resource Attribute
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @param {String} resourceAttrID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteResourceAttribute(environmentID, resourceID, resourceAttrID) {
    return this.deleteResourceAttributeWithHttpInfo(environmentID, resourceID, resourceAttrID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Resource Attributes
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllResourceAttributesWithHttpInfo(environmentID, resourceID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllResourceAttributes");
    }
    // verify the required parameter 'resourceID' is set
    if (resourceID === undefined || resourceID === null) {
      throw new Error("Missing the required parameter 'resourceID' when calling readAllResourceAttributes");
    }
    let pathParams = {
      'environmentID': environmentID,
      'resourceID': resourceID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/resources/{resourceID}/attributes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Resource Attributes
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllResourceAttributes(environmentID, resourceID) {
    return this.readAllResourceAttributesWithHttpInfo(environmentID, resourceID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Resource Attribute
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @param {String} resourceAttrID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceAttribute} and HTTP response
   */
  readOneResourceAttributeWithHttpInfo(environmentID, resourceID, resourceAttrID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneResourceAttribute");
    }
    // verify the required parameter 'resourceID' is set
    if (resourceID === undefined || resourceID === null) {
      throw new Error("Missing the required parameter 'resourceID' when calling readOneResourceAttribute");
    }
    // verify the required parameter 'resourceAttrID' is set
    if (resourceAttrID === undefined || resourceAttrID === null) {
      throw new Error("Missing the required parameter 'resourceAttrID' when calling readOneResourceAttribute");
    }
    let pathParams = {
      'environmentID': environmentID,
      'resourceID': resourceID,
      'resourceAttrID': resourceAttrID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ResourceAttribute;
    return this.apiClient.callApi('/environments/{environmentID}/resources/{resourceID}/attributes/{resourceAttrID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Resource Attribute
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @param {String} resourceAttrID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceAttribute}
   */
  readOneResourceAttribute(environmentID, resourceID, resourceAttrID) {
    return this.readOneResourceAttributeWithHttpInfo(environmentID, resourceID, resourceAttrID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Resource Attribute
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @param {String} resourceAttrID 
   * @param {Object} opts Optional parameters
   * @param {module:model/ResourceAttribute} [resourceAttribute] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceAttribute} and HTTP response
   */
  updateResourceAttributeWithHttpInfo(environmentID, resourceID, resourceAttrID, opts) {
    opts = opts || {};
    let postBody = opts['resourceAttribute'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateResourceAttribute");
    }
    // verify the required parameter 'resourceID' is set
    if (resourceID === undefined || resourceID === null) {
      throw new Error("Missing the required parameter 'resourceID' when calling updateResourceAttribute");
    }
    // verify the required parameter 'resourceAttrID' is set
    if (resourceAttrID === undefined || resourceAttrID === null) {
      throw new Error("Missing the required parameter 'resourceAttrID' when calling updateResourceAttribute");
    }
    let pathParams = {
      'environmentID': environmentID,
      'resourceID': resourceID,
      'resourceAttrID': resourceAttrID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = ResourceAttribute;
    return this.apiClient.callApi('/environments/{environmentID}/resources/{resourceID}/attributes/{resourceAttrID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Resource Attribute
   * @param {String} environmentID 
   * @param {String} resourceID 
   * @param {String} resourceAttrID 
   * @param {Object} opts Optional parameters
   * @param {module:model/ResourceAttribute} opts.resourceAttribute 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceAttribute}
   */
  updateResourceAttribute(environmentID, resourceID, resourceAttrID, opts) {
    return this.updateResourceAttributeWithHttpInfo(environmentID, resourceID, resourceAttrID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}