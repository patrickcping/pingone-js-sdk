/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import BrandingTheme from '../model/BrandingTheme';
import BrandingThemeDefault from '../model/BrandingThemeDefault';
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';

/**
* BrandingThemes service.
* @module api/BrandingThemesApi
* @version 2023-06-29
*/
export default class BrandingThemesApi {
  /**
  * Constructs a new BrandingThemesApi. 
  * @alias module:api/BrandingThemesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Branding Theme
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/BrandingTheme} [brandingTheme] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrandingTheme} and HTTP response
   */
  createBrandingThemeWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['brandingTheme'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createBrandingTheme");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = BrandingTheme;
    return this.apiClient.callApi('/environments/{environmentID}/themes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Branding Theme
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/BrandingTheme} opts.brandingTheme 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrandingTheme}
   */
  createBrandingTheme(environmentID, opts) {
    return this.createBrandingThemeWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Branding Theme
   * @param {String} environmentID 
   * @param {String} themeID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteBrandingThemeWithHttpInfo(environmentID, themeID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteBrandingTheme");
    }
    // verify the required parameter 'themeID' is set
    if (themeID === undefined || themeID === null) {
      throw new Error("Missing the required parameter 'themeID' when calling deleteBrandingTheme");
    }
    let pathParams = {
      'environmentID': environmentID,
      'themeID': themeID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/themes/{themeID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Branding Theme
   * @param {String} environmentID 
   * @param {String} themeID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteBrandingTheme(environmentID, themeID) {
    return this.deleteBrandingThemeWithHttpInfo(environmentID, themeID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Branding Theme Default
   * @param {String} environmentID 
   * @param {String} themeID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrandingThemeDefault} and HTTP response
   */
  readBrandingThemeDefaultWithHttpInfo(environmentID, themeID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readBrandingThemeDefault");
    }
    // verify the required parameter 'themeID' is set
    if (themeID === undefined || themeID === null) {
      throw new Error("Missing the required parameter 'themeID' when calling readBrandingThemeDefault");
    }
    let pathParams = {
      'environmentID': environmentID,
      'themeID': themeID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = BrandingThemeDefault;
    return this.apiClient.callApi('/environments/{environmentID}/themes/{themeID}/default', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Branding Theme Default
   * @param {String} environmentID 
   * @param {String} themeID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrandingThemeDefault}
   */
  readBrandingThemeDefault(environmentID, themeID) {
    return this.readBrandingThemeDefaultWithHttpInfo(environmentID, themeID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Branding Themes
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readBrandingThemesWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readBrandingThemes");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/themes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Branding Themes
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readBrandingThemes(environmentID) {
    return this.readBrandingThemesWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Branding Theme
   * @param {String} environmentID 
   * @param {String} themeID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrandingTheme} and HTTP response
   */
  readOneBrandingThemeWithHttpInfo(environmentID, themeID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneBrandingTheme");
    }
    // verify the required parameter 'themeID' is set
    if (themeID === undefined || themeID === null) {
      throw new Error("Missing the required parameter 'themeID' when calling readOneBrandingTheme");
    }
    let pathParams = {
      'environmentID': environmentID,
      'themeID': themeID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = BrandingTheme;
    return this.apiClient.callApi('/environments/{environmentID}/themes/{themeID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Branding Theme
   * @param {String} environmentID 
   * @param {String} themeID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrandingTheme}
   */
  readOneBrandingTheme(environmentID, themeID) {
    return this.readOneBrandingThemeWithHttpInfo(environmentID, themeID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Branding Theme
   * @param {String} environmentID 
   * @param {String} themeID 
   * @param {Object} opts Optional parameters
   * @param {module:model/BrandingTheme} [brandingTheme] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrandingTheme} and HTTP response
   */
  updateBrandingThemeWithHttpInfo(environmentID, themeID, opts) {
    opts = opts || {};
    let postBody = opts['brandingTheme'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateBrandingTheme");
    }
    // verify the required parameter 'themeID' is set
    if (themeID === undefined || themeID === null) {
      throw new Error("Missing the required parameter 'themeID' when calling updateBrandingTheme");
    }
    let pathParams = {
      'environmentID': environmentID,
      'themeID': themeID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = BrandingTheme;
    return this.apiClient.callApi('/environments/{environmentID}/themes/{themeID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Branding Theme
   * @param {String} environmentID 
   * @param {String} themeID 
   * @param {Object} opts Optional parameters
   * @param {module:model/BrandingTheme} opts.brandingTheme 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrandingTheme}
   */
  updateBrandingTheme(environmentID, themeID, opts) {
    return this.updateBrandingThemeWithHttpInfo(environmentID, themeID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Branding Theme Default
   * @param {String} environmentID 
   * @param {String} themeID 
   * @param {Object} opts Optional parameters
   * @param {module:model/BrandingThemeDefault} [brandingThemeDefault] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BrandingThemeDefault} and HTTP response
   */
  updateBrandingThemeDefaultWithHttpInfo(environmentID, themeID, opts) {
    opts = opts || {};
    let postBody = opts['brandingThemeDefault'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateBrandingThemeDefault");
    }
    // verify the required parameter 'themeID' is set
    if (themeID === undefined || themeID === null) {
      throw new Error("Missing the required parameter 'themeID' when calling updateBrandingThemeDefault");
    }
    let pathParams = {
      'environmentID': environmentID,
      'themeID': themeID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = BrandingThemeDefault;
    return this.apiClient.callApi('/environments/{environmentID}/themes/{themeID}/default', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Branding Theme Default
   * @param {String} environmentID 
   * @param {String} themeID 
   * @param {Object} opts Optional parameters
   * @param {module:model/BrandingThemeDefault} opts.brandingThemeDefault 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BrandingThemeDefault}
   */
  updateBrandingThemeDefault(environmentID, themeID, opts) {
    return this.updateBrandingThemeDefaultWithHttpInfo(environmentID, themeID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}