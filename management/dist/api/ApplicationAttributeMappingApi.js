/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ApplicationAttributeMapping from '../model/ApplicationAttributeMapping';
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';

/**
* ApplicationAttributeMapping service.
* @module api/ApplicationAttributeMappingApi
* @version 2023-06-29
*/
export default class ApplicationAttributeMappingApi {
  /**
  * Constructs a new ApplicationAttributeMappingApi. 
  * @alias module:api/ApplicationAttributeMappingApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Application Attribute Mapping
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/ApplicationAttributeMapping} [applicationAttributeMapping] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationAttributeMapping} and HTTP response
   */
  createApplicationAttributeMappingWithHttpInfo(environmentID, applicationID, opts) {
    opts = opts || {};
    let postBody = opts['applicationAttributeMapping'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createApplicationAttributeMapping");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling createApplicationAttributeMapping");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = ApplicationAttributeMapping;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/attributes', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Application Attribute Mapping
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/ApplicationAttributeMapping} opts.applicationAttributeMapping 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationAttributeMapping}
   */
  createApplicationAttributeMapping(environmentID, applicationID, opts) {
    return this.createApplicationAttributeMappingWithHttpInfo(environmentID, applicationID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Application Attribute Mapping
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} attrMappingID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteApplicationAttributeMappingWithHttpInfo(environmentID, applicationID, attrMappingID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteApplicationAttributeMapping");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling deleteApplicationAttributeMapping");
    }
    // verify the required parameter 'attrMappingID' is set
    if (attrMappingID === undefined || attrMappingID === null) {
      throw new Error("Missing the required parameter 'attrMappingID' when calling deleteApplicationAttributeMapping");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'attrMappingID': attrMappingID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/attributes/{attrMappingID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Application Attribute Mapping
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} attrMappingID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteApplicationAttributeMapping(environmentID, applicationID, attrMappingID) {
    return this.deleteApplicationAttributeMappingWithHttpInfo(environmentID, applicationID, attrMappingID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Application Attribute Mappings
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllApplicationAttributeMappingsWithHttpInfo(environmentID, applicationID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllApplicationAttributeMappings");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling readAllApplicationAttributeMappings");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/attributes', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Application Attribute Mappings
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllApplicationAttributeMappings(environmentID, applicationID) {
    return this.readAllApplicationAttributeMappingsWithHttpInfo(environmentID, applicationID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Application Attribute Mapping
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} attrMappingID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationAttributeMapping} and HTTP response
   */
  readOneApplicationAttributeMappingWithHttpInfo(environmentID, applicationID, attrMappingID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneApplicationAttributeMapping");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling readOneApplicationAttributeMapping");
    }
    // verify the required parameter 'attrMappingID' is set
    if (attrMappingID === undefined || attrMappingID === null) {
      throw new Error("Missing the required parameter 'attrMappingID' when calling readOneApplicationAttributeMapping");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'attrMappingID': attrMappingID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ApplicationAttributeMapping;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/attributes/{attrMappingID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Application Attribute Mapping
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} attrMappingID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationAttributeMapping}
   */
  readOneApplicationAttributeMapping(environmentID, applicationID, attrMappingID) {
    return this.readOneApplicationAttributeMappingWithHttpInfo(environmentID, applicationID, attrMappingID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Application Attribute Mapping
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} attrMappingID 
   * @param {Object} opts Optional parameters
   * @param {module:model/ApplicationAttributeMapping} [applicationAttributeMapping] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApplicationAttributeMapping} and HTTP response
   */
  updateApplicationAttributeMappingWithHttpInfo(environmentID, applicationID, attrMappingID, opts) {
    opts = opts || {};
    let postBody = opts['applicationAttributeMapping'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateApplicationAttributeMapping");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling updateApplicationAttributeMapping");
    }
    // verify the required parameter 'attrMappingID' is set
    if (attrMappingID === undefined || attrMappingID === null) {
      throw new Error("Missing the required parameter 'attrMappingID' when calling updateApplicationAttributeMapping");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'attrMappingID': attrMappingID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = ApplicationAttributeMapping;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/attributes/{attrMappingID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Application Attribute Mapping
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} attrMappingID 
   * @param {Object} opts Optional parameters
   * @param {module:model/ApplicationAttributeMapping} opts.applicationAttributeMapping 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApplicationAttributeMapping}
   */
  updateApplicationAttributeMapping(environmentID, applicationID, attrMappingID, opts) {
    return this.updateApplicationAttributeMappingWithHttpInfo(environmentID, applicationID, attrMappingID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}