/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import Subscription from '../model/Subscription';

/**
* SubscriptionsWebhooks service.
* @module api/SubscriptionsWebhooksApi
* @version 2023-06-29
*/
export default class SubscriptionsWebhooksApi {
  /**
  * Constructs a new SubscriptionsWebhooksApi. 
  * @alias module:api/SubscriptionsWebhooksApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Subscription
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Subscription} [subscription] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Subscription} and HTTP response
   */
  createSubscriptionWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['subscription'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createSubscription");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Subscription;
    return this.apiClient.callApi('/environments/{environmentID}/subscriptions', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Subscription
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Subscription} opts.subscription 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Subscription}
   */
  createSubscription(environmentID, opts) {
    return this.createSubscriptionWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Subscription
   * @param {String} environmentID 
   * @param {String} subscriptionID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteSubscriptionWithHttpInfo(environmentID, subscriptionID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteSubscription");
    }
    // verify the required parameter 'subscriptionID' is set
    if (subscriptionID === undefined || subscriptionID === null) {
      throw new Error("Missing the required parameter 'subscriptionID' when calling deleteSubscription");
    }
    let pathParams = {
      'environmentID': environmentID,
      'subscriptionID': subscriptionID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/subscriptions/{subscriptionID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Subscription
   * @param {String} environmentID 
   * @param {String} subscriptionID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteSubscription(environmentID, subscriptionID) {
    return this.deleteSubscriptionWithHttpInfo(environmentID, subscriptionID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Subscriptions
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllSubscriptionsWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllSubscriptions");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/subscriptions', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Subscriptions
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllSubscriptions(environmentID) {
    return this.readAllSubscriptionsWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Subscription
   * @param {String} environmentID 
   * @param {String} subscriptionID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Subscription} and HTTP response
   */
  readOneSubscriptionWithHttpInfo(environmentID, subscriptionID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneSubscription");
    }
    // verify the required parameter 'subscriptionID' is set
    if (subscriptionID === undefined || subscriptionID === null) {
      throw new Error("Missing the required parameter 'subscriptionID' when calling readOneSubscription");
    }
    let pathParams = {
      'environmentID': environmentID,
      'subscriptionID': subscriptionID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Subscription;
    return this.apiClient.callApi('/environments/{environmentID}/subscriptions/{subscriptionID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Subscription
   * @param {String} environmentID 
   * @param {String} subscriptionID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Subscription}
   */
  readOneSubscription(environmentID, subscriptionID) {
    return this.readOneSubscriptionWithHttpInfo(environmentID, subscriptionID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Subscription
   * @param {String} environmentID 
   * @param {String} subscriptionID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Subscription} [subscription] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Subscription} and HTTP response
   */
  updateSubscriptionWithHttpInfo(environmentID, subscriptionID, opts) {
    opts = opts || {};
    let postBody = opts['subscription'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateSubscription");
    }
    // verify the required parameter 'subscriptionID' is set
    if (subscriptionID === undefined || subscriptionID === null) {
      throw new Error("Missing the required parameter 'subscriptionID' when calling updateSubscription");
    }
    let pathParams = {
      'environmentID': environmentID,
      'subscriptionID': subscriptionID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Subscription;
    return this.apiClient.callApi('/environments/{environmentID}/subscriptions/{subscriptionID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Subscription
   * @param {String} environmentID 
   * @param {String} subscriptionID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Subscription} opts.subscription 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Subscription}
   */
  updateSubscription(environmentID, subscriptionID, opts) {
    return this.updateSubscriptionWithHttpInfo(environmentID, subscriptionID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}