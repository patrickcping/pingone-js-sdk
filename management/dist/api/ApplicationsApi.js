/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CreateApplication201Response from '../model/CreateApplication201Response';
import CreateApplicationRequest from '../model/CreateApplicationRequest';
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import ReadOneApplication200Response from '../model/ReadOneApplication200Response';
import UpdateApplicationRequest from '../model/UpdateApplicationRequest';

/**
* Applications service.
* @module api/ApplicationsApi
* @version 2023-06-29
*/
export default class ApplicationsApi {
  /**
  * Constructs a new ApplicationsApi. 
  * @alias module:api/ApplicationsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Application
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/CreateApplicationRequest} [createApplicationRequest] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateApplication201Response} and HTTP response
   */
  createApplicationWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['createApplicationRequest'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createApplication");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = CreateApplication201Response;
    return this.apiClient.callApi('/environments/{environmentID}/applications', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Application
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/CreateApplicationRequest} opts.createApplicationRequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateApplication201Response}
   */
  createApplication(environmentID, opts) {
    return this.createApplicationWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Application
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteApplicationWithHttpInfo(environmentID, applicationID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteApplication");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling deleteApplication");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Application
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteApplication(environmentID, applicationID) {
    return this.deleteApplicationWithHttpInfo(environmentID, applicationID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Applications
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllApplicationsWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllApplications");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/applications', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Applications
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllApplications(environmentID) {
    return this.readAllApplicationsWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Application
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReadOneApplication200Response} and HTTP response
   */
  readOneApplicationWithHttpInfo(environmentID, applicationID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneApplication");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling readOneApplication");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = ReadOneApplication200Response;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Application
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReadOneApplication200Response}
   */
  readOneApplication(environmentID, applicationID) {
    return this.readOneApplicationWithHttpInfo(environmentID, applicationID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Application
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/UpdateApplicationRequest} [updateApplicationRequest] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ReadOneApplication200Response} and HTTP response
   */
  updateApplicationWithHttpInfo(environmentID, applicationID, opts) {
    opts = opts || {};
    let postBody = opts['updateApplicationRequest'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateApplication");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling updateApplication");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = ReadOneApplication200Response;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Application
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/UpdateApplicationRequest} opts.updateApplicationRequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ReadOneApplication200Response}
   */
  updateApplication(environmentID, applicationID, opts) {
    return this.updateApplicationWithHttpInfo(environmentID, applicationID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}