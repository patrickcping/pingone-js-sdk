/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import PasswordPolicy from '../model/PasswordPolicy';

/**
* PasswordPolicies service.
* @module api/PasswordPoliciesApi
* @version 2023-06-29
*/
export default class PasswordPoliciesApi {
  /**
  * Constructs a new PasswordPoliciesApi. 
  * @alias module:api/PasswordPoliciesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Password Policy
   * @param {String} environmentID 
   * @param {module:model/PasswordPolicy} passwordPolicy 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PasswordPolicy} and HTTP response
   */
  createPasswordPolicyWithHttpInfo(environmentID, passwordPolicy) {
    let postBody = passwordPolicy;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createPasswordPolicy");
    }
    // verify the required parameter 'passwordPolicy' is set
    if (passwordPolicy === undefined || passwordPolicy === null) {
      throw new Error("Missing the required parameter 'passwordPolicy' when calling createPasswordPolicy");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = PasswordPolicy;
    return this.apiClient.callApi('/environments/{environmentID}/passwordPolicies', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Password Policy
   * @param {String} environmentID 
   * @param {module:model/PasswordPolicy} passwordPolicy 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PasswordPolicy}
   */
  createPasswordPolicy(environmentID, passwordPolicy) {
    return this.createPasswordPolicyWithHttpInfo(environmentID, passwordPolicy).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Password Policy
   * @param {String} environmentID 
   * @param {String} passwordPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deletePasswordPolicyWithHttpInfo(environmentID, passwordPolicyID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deletePasswordPolicy");
    }
    // verify the required parameter 'passwordPolicyID' is set
    if (passwordPolicyID === undefined || passwordPolicyID === null) {
      throw new Error("Missing the required parameter 'passwordPolicyID' when calling deletePasswordPolicy");
    }
    let pathParams = {
      'environmentID': environmentID,
      'passwordPolicyID': passwordPolicyID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/passwordPolicies/{passwordPolicyID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Password Policy
   * @param {String} environmentID 
   * @param {String} passwordPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deletePasswordPolicy(environmentID, passwordPolicyID) {
    return this.deletePasswordPolicyWithHttpInfo(environmentID, passwordPolicyID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Password Policies
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllPasswordPoliciesWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllPasswordPolicies");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/passwordPolicies', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Password Policies
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllPasswordPolicies(environmentID) {
    return this.readAllPasswordPoliciesWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Password Policy
   * @param {String} environmentID 
   * @param {String} passwordPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PasswordPolicy} and HTTP response
   */
  readOnePasswordPolicyWithHttpInfo(environmentID, passwordPolicyID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOnePasswordPolicy");
    }
    // verify the required parameter 'passwordPolicyID' is set
    if (passwordPolicyID === undefined || passwordPolicyID === null) {
      throw new Error("Missing the required parameter 'passwordPolicyID' when calling readOnePasswordPolicy");
    }
    let pathParams = {
      'environmentID': environmentID,
      'passwordPolicyID': passwordPolicyID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = PasswordPolicy;
    return this.apiClient.callApi('/environments/{environmentID}/passwordPolicies/{passwordPolicyID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Password Policy
   * @param {String} environmentID 
   * @param {String} passwordPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PasswordPolicy}
   */
  readOnePasswordPolicy(environmentID, passwordPolicyID) {
    return this.readOnePasswordPolicyWithHttpInfo(environmentID, passwordPolicyID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Password Policy
   * @param {String} environmentID 
   * @param {String} passwordPolicyID 
   * @param {Object} opts Optional parameters
   * @param {module:model/PasswordPolicy} [passwordPolicy] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/PasswordPolicy} and HTTP response
   */
  updatePasswordPolicyWithHttpInfo(environmentID, passwordPolicyID, opts) {
    opts = opts || {};
    let postBody = opts['passwordPolicy'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updatePasswordPolicy");
    }
    // verify the required parameter 'passwordPolicyID' is set
    if (passwordPolicyID === undefined || passwordPolicyID === null) {
      throw new Error("Missing the required parameter 'passwordPolicyID' when calling updatePasswordPolicy");
    }
    let pathParams = {
      'environmentID': environmentID,
      'passwordPolicyID': passwordPolicyID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = PasswordPolicy;
    return this.apiClient.callApi('/environments/{environmentID}/passwordPolicies/{passwordPolicyID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Password Policy
   * @param {String} environmentID 
   * @param {String} passwordPolicyID 
   * @param {Object} opts Optional parameters
   * @param {module:model/PasswordPolicy} opts.passwordPolicy 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/PasswordPolicy}
   */
  updatePasswordPolicy(environmentID, passwordPolicyID, opts) {
    return this.updatePasswordPolicyWithHttpInfo(environmentID, passwordPolicyID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}