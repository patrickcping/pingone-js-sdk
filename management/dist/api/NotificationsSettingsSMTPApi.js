/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import NotificationsSettingsEmailDeliverySettings from '../model/NotificationsSettingsEmailDeliverySettings';
import P1Error from '../model/P1Error';

/**
* NotificationsSettingsSMTP service.
* @module api/NotificationsSettingsSMTPApi
* @version 2023-06-29
*/
export default class NotificationsSettingsSMTPApi {
  /**
  * Constructs a new NotificationsSettingsSMTPApi. 
  * @alias module:api/NotificationsSettingsSMTPApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * DELETE Email Delivery Settings
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteEmailDeliverySettingsWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteEmailDeliverySettings");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/notificationsSettings/emailDeliverySettings', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Email Delivery Settings
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteEmailDeliverySettings(environmentID) {
    return this.deleteEmailDeliverySettingsWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Email Notifications Settings
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationsSettingsEmailDeliverySettings} and HTTP response
   */
  readEmailNotificationsSettingsWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readEmailNotificationsSettings");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = NotificationsSettingsEmailDeliverySettings;
    return this.apiClient.callApi('/environments/{environmentID}/notificationsSettings/emailDeliverySettings', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Email Notifications Settings
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationsSettingsEmailDeliverySettings}
   */
  readEmailNotificationsSettings(environmentID) {
    return this.readEmailNotificationsSettingsWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Email Notifications Settings
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/NotificationsSettingsEmailDeliverySettings} [notificationsSettingsEmailDeliverySettings] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/NotificationsSettingsEmailDeliverySettings} and HTTP response
   */
  updateEmailNotificationsSettingsWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['notificationsSettingsEmailDeliverySettings'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateEmailNotificationsSettings");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = NotificationsSettingsEmailDeliverySettings;
    return this.apiClient.callApi('/environments/{environmentID}/notificationsSettings/emailDeliverySettings', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Email Notifications Settings
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/NotificationsSettingsEmailDeliverySettings} opts.notificationsSettingsEmailDeliverySettings 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/NotificationsSettingsEmailDeliverySettings}
   */
  updateEmailNotificationsSettings(environmentID, opts) {
    return this.updateEmailNotificationsSettingsWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}