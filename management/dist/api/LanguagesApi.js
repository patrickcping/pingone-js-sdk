/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import Language from '../model/Language';
import P1Error from '../model/P1Error';

/**
* Languages service.
* @module api/LanguagesApi
* @version 2023-06-29
*/
export default class LanguagesApi {
  /**
  * Constructs a new LanguagesApi. 
  * @alias module:api/LanguagesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Language
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Language} [language] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Language} and HTTP response
   */
  createLanguageWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['language'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createLanguage");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Language;
    return this.apiClient.callApi('/environments/{environmentID}/languages', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Language
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Language} opts.language 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Language}
   */
  createLanguage(environmentID, opts) {
    return this.createLanguageWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Language
   * @param {String} environmentID 
   * @param {String} languageID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteLanguageWithHttpInfo(environmentID, languageID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteLanguage");
    }
    // verify the required parameter 'languageID' is set
    if (languageID === undefined || languageID === null) {
      throw new Error("Missing the required parameter 'languageID' when calling deleteLanguage");
    }
    let pathParams = {
      'environmentID': environmentID,
      'languageID': languageID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/languages/{languageID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Language
   * @param {String} environmentID 
   * @param {String} languageID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteLanguage(environmentID, languageID) {
    return this.deleteLanguageWithHttpInfo(environmentID, languageID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Languages
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readLanguagesWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readLanguages");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/languages', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Languages
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readLanguages(environmentID) {
    return this.readLanguagesWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Language
   * @param {String} environmentID 
   * @param {String} languageID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Language} and HTTP response
   */
  readOneLanguageWithHttpInfo(environmentID, languageID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneLanguage");
    }
    // verify the required parameter 'languageID' is set
    if (languageID === undefined || languageID === null) {
      throw new Error("Missing the required parameter 'languageID' when calling readOneLanguage");
    }
    let pathParams = {
      'environmentID': environmentID,
      'languageID': languageID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Language;
    return this.apiClient.callApi('/environments/{environmentID}/languages/{languageID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Language
   * @param {String} environmentID 
   * @param {String} languageID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Language}
   */
  readOneLanguage(environmentID, languageID) {
    return this.readOneLanguageWithHttpInfo(environmentID, languageID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Language
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Language} [language] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Language} and HTTP response
   */
  updateLanguageWithHttpInfo(environmentID, languageID, opts) {
    opts = opts || {};
    let postBody = opts['language'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateLanguage");
    }
    // verify the required parameter 'languageID' is set
    if (languageID === undefined || languageID === null) {
      throw new Error("Missing the required parameter 'languageID' when calling updateLanguage");
    }
    let pathParams = {
      'environmentID': environmentID,
      'languageID': languageID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Language;
    return this.apiClient.callApi('/environments/{environmentID}/languages/{languageID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Language
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Language} opts.language 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Language}
   */
  updateLanguage(environmentID, languageID, opts) {
    return this.updateLanguageWithHttpInfo(environmentID, languageID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}