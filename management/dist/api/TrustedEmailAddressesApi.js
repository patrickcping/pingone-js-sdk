/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EmailDomainTrustedEmail from '../model/EmailDomainTrustedEmail';
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';

/**
* TrustedEmailAddresses service.
* @module api/TrustedEmailAddressesApi
* @version 2023-06-29
*/
export default class TrustedEmailAddressesApi {
  /**
  * Constructs a new TrustedEmailAddressesApi. 
  * @alias module:api/TrustedEmailAddressesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Trusted Email Address
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @param {Object} opts Optional parameters
   * @param {module:model/EmailDomainTrustedEmail} [emailDomainTrustedEmail] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailDomainTrustedEmail} and HTTP response
   */
  createTrustedEmailAddressWithHttpInfo(environmentID, emailDomainID, opts) {
    opts = opts || {};
    let postBody = opts['emailDomainTrustedEmail'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createTrustedEmailAddress");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling createTrustedEmailAddress");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = EmailDomainTrustedEmail;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}/trustedEmails', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Trusted Email Address
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @param {Object} opts Optional parameters
   * @param {module:model/EmailDomainTrustedEmail} opts.emailDomainTrustedEmail 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailDomainTrustedEmail}
   */
  createTrustedEmailAddress(environmentID, emailDomainID, opts) {
    return this.createTrustedEmailAddressWithHttpInfo(environmentID, emailDomainID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Trusted Email Address
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @param {String} trustedEmailId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteTrustedEmailAddressWithHttpInfo(environmentID, emailDomainID, trustedEmailId) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteTrustedEmailAddress");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling deleteTrustedEmailAddress");
    }
    // verify the required parameter 'trustedEmailId' is set
    if (trustedEmailId === undefined || trustedEmailId === null) {
      throw new Error("Missing the required parameter 'trustedEmailId' when calling deleteTrustedEmailAddress");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID,
      'trustedEmailId': trustedEmailId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}/trustedEmails/{trustedEmailId}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Trusted Email Address
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @param {String} trustedEmailId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteTrustedEmailAddress(environmentID, emailDomainID, trustedEmailId) {
    return this.deleteTrustedEmailAddressWithHttpInfo(environmentID, emailDomainID, trustedEmailId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Trusted Email Addresses
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllTrustedEmailAddressesWithHttpInfo(environmentID, emailDomainID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllTrustedEmailAddresses");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling readAllTrustedEmailAddresses");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}/trustedEmails', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Trusted Email Addresses
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllTrustedEmailAddresses(environmentID, emailDomainID) {
    return this.readAllTrustedEmailAddressesWithHttpInfo(environmentID, emailDomainID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Trusted Email Address
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @param {String} trustedEmailId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailDomainTrustedEmail} and HTTP response
   */
  readOneTrustedEmailAddressWithHttpInfo(environmentID, emailDomainID, trustedEmailId) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneTrustedEmailAddress");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling readOneTrustedEmailAddress");
    }
    // verify the required parameter 'trustedEmailId' is set
    if (trustedEmailId === undefined || trustedEmailId === null) {
      throw new Error("Missing the required parameter 'trustedEmailId' when calling readOneTrustedEmailAddress");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID,
      'trustedEmailId': trustedEmailId
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EmailDomainTrustedEmail;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}/trustedEmails/{trustedEmailId}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Trusted Email Address
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @param {String} trustedEmailId 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailDomainTrustedEmail}
   */
  readOneTrustedEmailAddress(environmentID, emailDomainID, trustedEmailId) {
    return this.readOneTrustedEmailAddressWithHttpInfo(environmentID, emailDomainID, trustedEmailId).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Resend Verification Code To Email
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @param {String} trustedEmailId 
   * @param {Object} opts Optional parameters
   * @param {String} [contentType] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailDomainTrustedEmail} and HTTP response
   */
  resendVerificationCodeToEmailWithHttpInfo(environmentID, emailDomainID, trustedEmailId, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling resendVerificationCodeToEmail");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling resendVerificationCodeToEmail");
    }
    // verify the required parameter 'trustedEmailId' is set
    if (trustedEmailId === undefined || trustedEmailId === null) {
      throw new Error("Missing the required parameter 'trustedEmailId' when calling resendVerificationCodeToEmail");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID,
      'trustedEmailId': trustedEmailId
    };
    let queryParams = {};
    let headerParams = {
      'Content-Type': opts['contentType']
    };
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EmailDomainTrustedEmail;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}/trustedEmails/{trustedEmailId}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * Resend Verification Code To Email
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @param {String} trustedEmailId 
   * @param {Object} opts Optional parameters
   * @param {String} opts.contentType 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailDomainTrustedEmail}
   */
  resendVerificationCodeToEmail(environmentID, emailDomainID, trustedEmailId, opts) {
    return this.resendVerificationCodeToEmailWithHttpInfo(environmentID, emailDomainID, trustedEmailId, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}