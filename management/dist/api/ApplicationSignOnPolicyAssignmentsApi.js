/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import SignOnPolicyAssignment from '../model/SignOnPolicyAssignment';

/**
* ApplicationSignOnPolicyAssignments service.
* @module api/ApplicationSignOnPolicyAssignmentsApi
* @version 2023-06-29
*/
export default class ApplicationSignOnPolicyAssignmentsApi {
  /**
  * Constructs a new ApplicationSignOnPolicyAssignmentsApi. 
  * @alias module:api/ApplicationSignOnPolicyAssignmentsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE SOP Assignment
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/SignOnPolicyAssignment} [signOnPolicyAssignment] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignOnPolicyAssignment} and HTTP response
   */
  createSignOnPolicyAssignmentWithHttpInfo(environmentID, applicationID, opts) {
    opts = opts || {};
    let postBody = opts['signOnPolicyAssignment'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createSignOnPolicyAssignment");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling createSignOnPolicyAssignment");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = SignOnPolicyAssignment;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE SOP Assignment
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/SignOnPolicyAssignment} opts.signOnPolicyAssignment 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignOnPolicyAssignment}
   */
  createSignOnPolicyAssignment(environmentID, applicationID, opts) {
    return this.createSignOnPolicyAssignmentWithHttpInfo(environmentID, applicationID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE SOP Assignment
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} sOPAssignmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteSignOnPolicyAssignmentWithHttpInfo(environmentID, applicationID, sOPAssignmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteSignOnPolicyAssignment");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling deleteSignOnPolicyAssignment");
    }
    // verify the required parameter 'sOPAssignmentID' is set
    if (sOPAssignmentID === undefined || sOPAssignmentID === null) {
      throw new Error("Missing the required parameter 'sOPAssignmentID' when calling deleteSignOnPolicyAssignment");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'SOPAssignmentID': sOPAssignmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments/{SOPAssignmentID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE SOP Assignment
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} sOPAssignmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteSignOnPolicyAssignment(environmentID, applicationID, sOPAssignmentID) {
    return this.deleteSignOnPolicyAssignmentWithHttpInfo(environmentID, applicationID, sOPAssignmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All SOP Assignments
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllSignOnPolicyAssignmentsWithHttpInfo(environmentID, applicationID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllSignOnPolicyAssignments");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling readAllSignOnPolicyAssignments");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All SOP Assignments
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllSignOnPolicyAssignments(environmentID, applicationID) {
    return this.readAllSignOnPolicyAssignmentsWithHttpInfo(environmentID, applicationID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One SOP Assignment
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} sOPAssignmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignOnPolicyAssignment} and HTTP response
   */
  readOneSignOnPolicyAssignmentWithHttpInfo(environmentID, applicationID, sOPAssignmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneSignOnPolicyAssignment");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling readOneSignOnPolicyAssignment");
    }
    // verify the required parameter 'sOPAssignmentID' is set
    if (sOPAssignmentID === undefined || sOPAssignmentID === null) {
      throw new Error("Missing the required parameter 'sOPAssignmentID' when calling readOneSignOnPolicyAssignment");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'SOPAssignmentID': sOPAssignmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = SignOnPolicyAssignment;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments/{SOPAssignmentID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One SOP Assignment
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} sOPAssignmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignOnPolicyAssignment}
   */
  readOneSignOnPolicyAssignment(environmentID, applicationID, sOPAssignmentID) {
    return this.readOneSignOnPolicyAssignmentWithHttpInfo(environmentID, applicationID, sOPAssignmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE SOP Assignment
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} sOPAssignmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/SignOnPolicyAssignment} [signOnPolicyAssignment] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignOnPolicyAssignment} and HTTP response
   */
  updateSignOnPolicyAssignmentWithHttpInfo(environmentID, applicationID, sOPAssignmentID, opts) {
    opts = opts || {};
    let postBody = opts['signOnPolicyAssignment'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateSignOnPolicyAssignment");
    }
    // verify the required parameter 'applicationID' is set
    if (applicationID === undefined || applicationID === null) {
      throw new Error("Missing the required parameter 'applicationID' when calling updateSignOnPolicyAssignment");
    }
    // verify the required parameter 'sOPAssignmentID' is set
    if (sOPAssignmentID === undefined || sOPAssignmentID === null) {
      throw new Error("Missing the required parameter 'sOPAssignmentID' when calling updateSignOnPolicyAssignment");
    }
    let pathParams = {
      'environmentID': environmentID,
      'applicationID': applicationID,
      'SOPAssignmentID': sOPAssignmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = SignOnPolicyAssignment;
    return this.apiClient.callApi('/environments/{environmentID}/applications/{applicationID}/signOnPolicyAssignments/{SOPAssignmentID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE SOP Assignment
   * @param {String} environmentID 
   * @param {String} applicationID 
   * @param {String} sOPAssignmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/SignOnPolicyAssignment} opts.signOnPolicyAssignment 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignOnPolicyAssignment}
   */
  updateSignOnPolicyAssignment(environmentID, applicationID, sOPAssignmentID, opts) {
    return this.updateSignOnPolicyAssignmentWithHttpInfo(environmentID, applicationID, sOPAssignmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}