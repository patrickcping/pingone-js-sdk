/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import LanguageLocalizationStatus from '../model/LanguageLocalizationStatus';
import P1Error from '../model/P1Error';

/**
* LanguageLocalizationStatus service.
* @module api/LanguageLocalizationStatusApi
* @version 2023-06-29
*/
export default class LanguageLocalizationStatusApi {
  /**
  * Constructs a new LanguageLocalizationStatusApi. 
  * @alias module:api/LanguageLocalizationStatusApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {Object} opts Optional parameters
   * @param {module:model/LanguageLocalizationStatus} [languageLocalizationStatus] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguageLocalizationStatus} and HTTP response
   */
  createLanguageLocalizationStatusWithHttpInfo(environmentID, languageID, opts) {
    opts = opts || {};
    let postBody = opts['languageLocalizationStatus'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createLanguageLocalizationStatus");
    }
    // verify the required parameter 'languageID' is set
    if (languageID === undefined || languageID === null) {
      throw new Error("Missing the required parameter 'languageID' when calling createLanguageLocalizationStatus");
    }
    let pathParams = {
      'environmentID': environmentID,
      'languageID': languageID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = LanguageLocalizationStatus;
    return this.apiClient.callApi('/environments/{environmentID}/languages/{languageID}/status', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {Object} opts Optional parameters
   * @param {module:model/LanguageLocalizationStatus} opts.languageLocalizationStatus 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguageLocalizationStatus}
   */
  createLanguageLocalizationStatus(environmentID, languageID, opts) {
    return this.createLanguageLocalizationStatusWithHttpInfo(environmentID, languageID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {String} l10nStatusID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteLanguageLocalizationStatusWithHttpInfo(environmentID, languageID, l10nStatusID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteLanguageLocalizationStatus");
    }
    // verify the required parameter 'languageID' is set
    if (languageID === undefined || languageID === null) {
      throw new Error("Missing the required parameter 'languageID' when calling deleteLanguageLocalizationStatus");
    }
    // verify the required parameter 'l10nStatusID' is set
    if (l10nStatusID === undefined || l10nStatusID === null) {
      throw new Error("Missing the required parameter 'l10nStatusID' when calling deleteLanguageLocalizationStatus");
    }
    let pathParams = {
      'environmentID': environmentID,
      'languageID': languageID,
      'l10nStatusID': l10nStatusID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/languages/{languageID}/status/{l10nStatusID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {String} l10nStatusID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteLanguageLocalizationStatus(environmentID, languageID, l10nStatusID) {
    return this.deleteLanguageLocalizationStatusWithHttpInfo(environmentID, languageID, l10nStatusID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguageLocalizationStatus} and HTTP response
   */
  readLanguageLocalizationStatusWithHttpInfo(environmentID, languageID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readLanguageLocalizationStatus");
    }
    // verify the required parameter 'languageID' is set
    if (languageID === undefined || languageID === null) {
      throw new Error("Missing the required parameter 'languageID' when calling readLanguageLocalizationStatus");
    }
    let pathParams = {
      'environmentID': environmentID,
      'languageID': languageID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LanguageLocalizationStatus;
    return this.apiClient.callApi('/environments/{environmentID}/languages/{languageID}/status', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguageLocalizationStatus}
   */
  readLanguageLocalizationStatus(environmentID, languageID) {
    return this.readLanguageLocalizationStatusWithHttpInfo(environmentID, languageID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {String} l10nStatusID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguageLocalizationStatus} and HTTP response
   */
  readOneLanguageLocalizationStatusWithHttpInfo(environmentID, languageID, l10nStatusID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneLanguageLocalizationStatus");
    }
    // verify the required parameter 'languageID' is set
    if (languageID === undefined || languageID === null) {
      throw new Error("Missing the required parameter 'languageID' when calling readOneLanguageLocalizationStatus");
    }
    // verify the required parameter 'l10nStatusID' is set
    if (l10nStatusID === undefined || l10nStatusID === null) {
      throw new Error("Missing the required parameter 'l10nStatusID' when calling readOneLanguageLocalizationStatus");
    }
    let pathParams = {
      'environmentID': environmentID,
      'languageID': languageID,
      'l10nStatusID': l10nStatusID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = LanguageLocalizationStatus;
    return this.apiClient.callApi('/environments/{environmentID}/languages/{languageID}/status/{l10nStatusID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {String} l10nStatusID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguageLocalizationStatus}
   */
  readOneLanguageLocalizationStatus(environmentID, languageID, l10nStatusID) {
    return this.readOneLanguageLocalizationStatusWithHttpInfo(environmentID, languageID, l10nStatusID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {String} l10nStatusID 
   * @param {Object} opts Optional parameters
   * @param {module:model/LanguageLocalizationStatus} [languageLocalizationStatus] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/LanguageLocalizationStatus} and HTTP response
   */
  updateLanguageLocalizationStatusWithHttpInfo(environmentID, languageID, l10nStatusID, opts) {
    opts = opts || {};
    let postBody = opts['languageLocalizationStatus'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateLanguageLocalizationStatus");
    }
    // verify the required parameter 'languageID' is set
    if (languageID === undefined || languageID === null) {
      throw new Error("Missing the required parameter 'languageID' when calling updateLanguageLocalizationStatus");
    }
    // verify the required parameter 'l10nStatusID' is set
    if (l10nStatusID === undefined || l10nStatusID === null) {
      throw new Error("Missing the required parameter 'l10nStatusID' when calling updateLanguageLocalizationStatus");
    }
    let pathParams = {
      'environmentID': environmentID,
      'languageID': languageID,
      'l10nStatusID': l10nStatusID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = LanguageLocalizationStatus;
    return this.apiClient.callApi('/environments/{environmentID}/languages/{languageID}/status/{l10nStatusID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Language Localization Status
   * @param {String} environmentID 
   * @param {String} languageID 
   * @param {String} l10nStatusID 
   * @param {Object} opts Optional parameters
   * @param {module:model/LanguageLocalizationStatus} opts.languageLocalizationStatus 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/LanguageLocalizationStatus}
   */
  updateLanguageLocalizationStatus(environmentID, languageID, l10nStatusID, opts) {
    return this.updateLanguageLocalizationStatusWithHttpInfo(environmentID, languageID, l10nStatusID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}