/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CustomDomain from '../model/CustomDomain';
import CustomDomainCertificateRequest from '../model/CustomDomainCertificateRequest';
import EntityArray from '../model/EntityArray';
import EnumCustomDomainPostHeader from '../model/EnumCustomDomainPostHeader';
import P1Error from '../model/P1Error';

/**
* CustomDomains service.
* @module api/CustomDomainsApi
* @version 2023-06-29
*/
export default class CustomDomainsApi {
  /**
  * Constructs a new CustomDomainsApi. 
  * @alias module:api/CustomDomainsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Domain
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/CustomDomain} [customDomain] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomDomain} and HTTP response
   */
  createDomainWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['customDomain'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createDomain");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = CustomDomain;
    return this.apiClient.callApi('/environments/{environmentID}/customDomains', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Domain
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/CustomDomain} opts.customDomain 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomDomain}
   */
  createDomain(environmentID, opts) {
    return this.createDomainWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Domain
   * @param {String} environmentID 
   * @param {String} customDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteDomainWithHttpInfo(environmentID, customDomainID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteDomain");
    }
    // verify the required parameter 'customDomainID' is set
    if (customDomainID === undefined || customDomainID === null) {
      throw new Error("Missing the required parameter 'customDomainID' when calling deleteDomain");
    }
    let pathParams = {
      'environmentID': environmentID,
      'customDomainID': customDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/customDomains/{customDomainID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Domain
   * @param {String} environmentID 
   * @param {String} customDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteDomain(environmentID, customDomainID) {
    return this.deleteDomainWithHttpInfo(environmentID, customDomainID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Domains
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllDomainsWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllDomains");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/customDomains', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Domains
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllDomains(environmentID) {
    return this.readAllDomainsWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Domain
   * @param {String} environmentID 
   * @param {String} customDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomDomain} and HTTP response
   */
  readOneDomainWithHttpInfo(environmentID, customDomainID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneDomain");
    }
    // verify the required parameter 'customDomainID' is set
    if (customDomainID === undefined || customDomainID === null) {
      throw new Error("Missing the required parameter 'customDomainID' when calling readOneDomain");
    }
    let pathParams = {
      'environmentID': environmentID,
      'customDomainID': customDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = CustomDomain;
    return this.apiClient.callApi('/environments/{environmentID}/customDomains/{customDomainID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Domain
   * @param {String} environmentID 
   * @param {String} customDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomDomain}
   */
  readOneDomain(environmentID, customDomainID) {
    return this.readOneDomainWithHttpInfo(environmentID, customDomainID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * Update Domain
   * @param {String} environmentID 
   * @param {String} customDomainID 
   * @param {Object} opts Optional parameters
   * @param {module:model/EnumCustomDomainPostHeader} [contentType] 
   * @param {module:model/CustomDomainCertificateRequest} [customDomainCertificateRequest] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CustomDomain} and HTTP response
   */
  updateDomainWithHttpInfo(environmentID, customDomainID, opts) {
    opts = opts || {};
    let postBody = opts['customDomainCertificateRequest'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateDomain");
    }
    // verify the required parameter 'customDomainID' is set
    if (customDomainID === undefined || customDomainID === null) {
      throw new Error("Missing the required parameter 'customDomainID' when calling updateDomain");
    }
    let pathParams = {
      'environmentID': environmentID,
      'customDomainID': customDomainID
    };
    let queryParams = {};
    let headerParams = {
      'Content-Type': opts['contentType']
    };
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = CustomDomain;
    return this.apiClient.callApi('/environments/{environmentID}/customDomains/{customDomainID}', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * Update Domain
   * @param {String} environmentID 
   * @param {String} customDomainID 
   * @param {Object} opts Optional parameters
   * @param {module:model/EnumCustomDomainPostHeader} opts.contentType 
   * @param {module:model/CustomDomainCertificateRequest} opts.customDomainCertificateRequest 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CustomDomain}
   */
  updateDomain(environmentID, customDomainID, opts) {
    return this.updateDomainWithHttpInfo(environmentID, customDomainID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}