/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import Organization from '../model/Organization';
import P1Error from '../model/P1Error';

/**
* Organizations service.
* @module api/OrganizationsApi
* @version 2023-06-29
*/
export default class OrganizationsApi {
  /**
  * Constructs a new OrganizationsApi. 
  * @alias module:api/OrganizationsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * READ All Organizations
   * @param {Object} opts Optional parameters
   * @param {Number} [limit] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllOrganizationsWithHttpInfo(opts) {
    opts = opts || {};
    let postBody = null;
    let pathParams = {};
    let queryParams = {
      'limit': opts['limit']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/organizations', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Organizations
   * @param {Object} opts Optional parameters
   * @param {Number} opts.limit 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllOrganizations(opts) {
    return this.readAllOrganizationsWithHttpInfo(opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Organization
   * @param {String} organizationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Organization} and HTTP response
   */
  readOneOrganizationWithHttpInfo(organizationID) {
    let postBody = null;
    // verify the required parameter 'organizationID' is set
    if (organizationID === undefined || organizationID === null) {
      throw new Error("Missing the required parameter 'organizationID' when calling readOneOrganization");
    }
    let pathParams = {
      'organizationID': organizationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Organization;
    return this.apiClient.callApi('/organizations/{organizationID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Organization
   * @param {String} organizationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Organization}
   */
  readOneOrganization(organizationID) {
    return this.readOneOrganizationWithHttpInfo(organizationID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}