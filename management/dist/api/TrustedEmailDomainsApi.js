/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EmailDomain from '../model/EmailDomain';
import EmailDomainDKIMStatus from '../model/EmailDomainDKIMStatus';
import EmailDomainOwnershipStatus from '../model/EmailDomainOwnershipStatus';
import EmailDomainSPFStatus from '../model/EmailDomainSPFStatus';
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';

/**
* TrustedEmailDomains service.
* @module api/TrustedEmailDomainsApi
* @version 2023-06-29
*/
export default class TrustedEmailDomainsApi {
  /**
  * Constructs a new TrustedEmailDomainsApi. 
  * @alias module:api/TrustedEmailDomainsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Trusted Email Domain
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/EmailDomain} [emailDomain] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailDomain} and HTTP response
   */
  createTrustedEmailDomainWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['emailDomain'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createTrustedEmailDomain");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = EmailDomain;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Trusted Email Domain
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/EmailDomain} opts.emailDomain 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailDomain}
   */
  createTrustedEmailDomain(environmentID, opts) {
    return this.createTrustedEmailDomainWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Trusted Email Domain
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteTrustedEmailDomainWithHttpInfo(environmentID, emailDomainID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteTrustedEmailDomain");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling deleteTrustedEmailDomain");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Trusted Email Domain
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteTrustedEmailDomain(environmentID, emailDomainID) {
    return this.deleteTrustedEmailDomainWithHttpInfo(environmentID, emailDomainID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Trusted Email Domains
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllTrustedEmailDomainsWithHttpInfo(environmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllTrustedEmailDomains");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Trusted Email Domains
   * @param {String} environmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllTrustedEmailDomains(environmentID) {
    return this.readAllTrustedEmailDomainsWithHttpInfo(environmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Trusted Email Domain
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailDomain} and HTTP response
   */
  readOneTrustedEmailDomainWithHttpInfo(environmentID, emailDomainID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneTrustedEmailDomain");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling readOneTrustedEmailDomain");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EmailDomain;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Trusted Email Domain
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailDomain}
   */
  readOneTrustedEmailDomain(environmentID, emailDomainID) {
    return this.readOneTrustedEmailDomainWithHttpInfo(environmentID, emailDomainID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Trusted Email Domain DKIM Status
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailDomainDKIMStatus} and HTTP response
   */
  readTrustedEmailDomainDKIMStatusWithHttpInfo(environmentID, emailDomainID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readTrustedEmailDomainDKIMStatus");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling readTrustedEmailDomainDKIMStatus");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EmailDomainDKIMStatus;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}/dkim', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Trusted Email Domain DKIM Status
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailDomainDKIMStatus}
   */
  readTrustedEmailDomainDKIMStatus(environmentID, emailDomainID) {
    return this.readTrustedEmailDomainDKIMStatusWithHttpInfo(environmentID, emailDomainID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Trusted Email Domain Ownership Status
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailDomainOwnershipStatus} and HTTP response
   */
  readTrustedEmailDomainOwnershipStatusWithHttpInfo(environmentID, emailDomainID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readTrustedEmailDomainOwnershipStatus");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling readTrustedEmailDomainOwnershipStatus");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EmailDomainOwnershipStatus;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}/ownership', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Trusted Email Domain Ownership Status
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailDomainOwnershipStatus}
   */
  readTrustedEmailDomainOwnershipStatus(environmentID, emailDomainID) {
    return this.readTrustedEmailDomainOwnershipStatusWithHttpInfo(environmentID, emailDomainID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Trusted Email Domain SPF Status
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EmailDomainSPFStatus} and HTTP response
   */
  readTrustedEmailDomainSPFStatusWithHttpInfo(environmentID, emailDomainID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readTrustedEmailDomainSPFStatus");
    }
    // verify the required parameter 'emailDomainID' is set
    if (emailDomainID === undefined || emailDomainID === null) {
      throw new Error("Missing the required parameter 'emailDomainID' when calling readTrustedEmailDomainSPFStatus");
    }
    let pathParams = {
      'environmentID': environmentID,
      'emailDomainID': emailDomainID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EmailDomainSPFStatus;
    return this.apiClient.callApi('/environments/{environmentID}/emailDomains/{emailDomainID}/spf', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Trusted Email Domain SPF Status
   * @param {String} environmentID 
   * @param {String} emailDomainID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EmailDomainSPFStatus}
   */
  readTrustedEmailDomainSPFStatus(environmentID, emailDomainID) {
    return this.readTrustedEmailDomainSPFStatusWithHttpInfo(environmentID, emailDomainID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}