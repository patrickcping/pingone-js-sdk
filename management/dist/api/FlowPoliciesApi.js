/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import FlowPolicy from '../model/FlowPolicy';
import P1Error from '../model/P1Error';

/**
* FlowPolicies service.
* @module api/FlowPoliciesApi
* @version 2023-06-29
*/
export default class FlowPoliciesApi {
  /**
  * Constructs a new FlowPoliciesApi. 
  * @alias module:api/FlowPoliciesApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * READ All Flow Policies
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {String} [filter] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllFlowPoliciesWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllFlowPolicies");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {
      'filter': opts['filter']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/flowPolicies', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Flow Policies
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {String} opts.filter 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllFlowPolicies(environmentID, opts) {
    return this.readAllFlowPoliciesWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ ONE Flow Policy
   * @param {String} environmentID 
   * @param {String} flowPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/FlowPolicy} and HTTP response
   */
  readOneFlowPolicyWithHttpInfo(environmentID, flowPolicyID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneFlowPolicy");
    }
    // verify the required parameter 'flowPolicyID' is set
    if (flowPolicyID === undefined || flowPolicyID === null) {
      throw new Error("Missing the required parameter 'flowPolicyID' when calling readOneFlowPolicy");
    }
    let pathParams = {
      'environmentID': environmentID,
      'flowPolicyID': flowPolicyID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = FlowPolicy;
    return this.apiClient.callApi('/environments/{environmentID}/flowPolicies/{flowPolicyID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ ONE Flow Policy
   * @param {String} environmentID 
   * @param {String} flowPolicyID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/FlowPolicy}
   */
  readOneFlowPolicy(environmentID, flowPolicyID) {
    return this.readOneFlowPolicyWithHttpInfo(environmentID, flowPolicyID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}