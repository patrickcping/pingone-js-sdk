/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import Group from '../model/Group';
import GroupNesting from '../model/GroupNesting';
import P1Error from '../model/P1Error';

/**
* Groups service.
* @module api/GroupsApi
* @version 2023-06-29
*/
export default class GroupsApi {
  /**
  * Constructs a new GroupsApi. 
  * @alias module:api/GroupsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Group
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Group} [group] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Group} and HTTP response
   */
  createGroupWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['group'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createGroup");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Group;
    return this.apiClient.callApi('/environments/{environmentID}/groups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Group
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Group} opts.group 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Group}
   */
  createGroup(environmentID, opts) {
    return this.createGroupWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * CREATE Group Nesting
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {Object} opts Optional parameters
   * @param {module:model/GroupNesting} [groupNesting] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupNesting} and HTTP response
   */
  createGroupNestingWithHttpInfo(environmentID, groupID, opts) {
    opts = opts || {};
    let postBody = opts['groupNesting'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createGroupNesting");
    }
    // verify the required parameter 'groupID' is set
    if (groupID === undefined || groupID === null) {
      throw new Error("Missing the required parameter 'groupID' when calling createGroupNesting");
    }
    let pathParams = {
      'environmentID': environmentID,
      'groupID': groupID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = GroupNesting;
    return this.apiClient.callApi('/environments/{environmentID}/groups/{groupID}/memberOfGroups', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Group Nesting
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {Object} opts Optional parameters
   * @param {module:model/GroupNesting} opts.groupNesting 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupNesting}
   */
  createGroupNesting(environmentID, groupID, opts) {
    return this.createGroupNestingWithHttpInfo(environmentID, groupID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Group
   * @param {String} environmentID 
   * @param {String} groupID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteGroupWithHttpInfo(environmentID, groupID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteGroup");
    }
    // verify the required parameter 'groupID' is set
    if (groupID === undefined || groupID === null) {
      throw new Error("Missing the required parameter 'groupID' when calling deleteGroup");
    }
    let pathParams = {
      'environmentID': environmentID,
      'groupID': groupID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/groups/{groupID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Group
   * @param {String} environmentID 
   * @param {String} groupID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteGroup(environmentID, groupID) {
    return this.deleteGroupWithHttpInfo(environmentID, groupID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Group Nesting
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {String} nestedGroupID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteGroupNestingWithHttpInfo(environmentID, groupID, nestedGroupID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteGroupNesting");
    }
    // verify the required parameter 'groupID' is set
    if (groupID === undefined || groupID === null) {
      throw new Error("Missing the required parameter 'groupID' when calling deleteGroupNesting");
    }
    // verify the required parameter 'nestedGroupID' is set
    if (nestedGroupID === undefined || nestedGroupID === null) {
      throw new Error("Missing the required parameter 'nestedGroupID' when calling deleteGroupNesting");
    }
    let pathParams = {
      'environmentID': environmentID,
      'groupID': groupID,
      'nestedGroupID': nestedGroupID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/groups/{groupID}/memberOfGroups/{nestedGroupID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Group Nesting
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {String} nestedGroupID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteGroupNesting(environmentID, groupID, nestedGroupID) {
    return this.deleteGroupNestingWithHttpInfo(environmentID, groupID, nestedGroupID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Groups
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {String} [filter] 
   * @param {Number} [limit] 
   * @param {String} [cursor] Adding a cursor value to retrieve the next page of results, used with the `limit` parameter. The cursor value is returned in the `_links.next.href` link in the response payload.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllGroupsWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllGroups");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {
      'filter': opts['filter'],
      'limit': opts['limit'],
      'cursor': opts['cursor']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/groups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Groups
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {String} opts.filter 
   * @param {Number} opts.limit 
   * @param {String} opts.cursor Adding a cursor value to retrieve the next page of results, used with the `limit` parameter. The cursor value is returned in the `_links.next.href` link in the response payload.
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllGroups(environmentID, opts) {
    return this.readAllGroupsWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Group Nesting
   * @param {String} environmentID 
   * @param {String} groupID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readGroupNestingWithHttpInfo(environmentID, groupID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readGroupNesting");
    }
    // verify the required parameter 'groupID' is set
    if (groupID === undefined || groupID === null) {
      throw new Error("Missing the required parameter 'groupID' when calling readGroupNesting");
    }
    let pathParams = {
      'environmentID': environmentID,
      'groupID': groupID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/groups/{groupID}/memberOfGroups', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Group Nesting
   * @param {String} environmentID 
   * @param {String} groupID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readGroupNesting(environmentID, groupID) {
    return this.readGroupNestingWithHttpInfo(environmentID, groupID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Group
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {Object} opts Optional parameters
   * @param {String} [include] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Group} and HTTP response
   */
  readOneGroupWithHttpInfo(environmentID, groupID, opts) {
    opts = opts || {};
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneGroup");
    }
    // verify the required parameter 'groupID' is set
    if (groupID === undefined || groupID === null) {
      throw new Error("Missing the required parameter 'groupID' when calling readOneGroup");
    }
    let pathParams = {
      'environmentID': environmentID,
      'groupID': groupID
    };
    let queryParams = {
      'include': opts['include']
    };
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = Group;
    return this.apiClient.callApi('/environments/{environmentID}/groups/{groupID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Group
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {Object} opts Optional parameters
   * @param {String} opts.include 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Group}
   */
  readOneGroup(environmentID, groupID, opts) {
    return this.readOneGroupWithHttpInfo(environmentID, groupID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Group Nesting
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {String} nestedGroupID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GroupNesting} and HTTP response
   */
  readOneGroupNestingWithHttpInfo(environmentID, groupID, nestedGroupID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneGroupNesting");
    }
    // verify the required parameter 'groupID' is set
    if (groupID === undefined || groupID === null) {
      throw new Error("Missing the required parameter 'groupID' when calling readOneGroupNesting");
    }
    // verify the required parameter 'nestedGroupID' is set
    if (nestedGroupID === undefined || nestedGroupID === null) {
      throw new Error("Missing the required parameter 'nestedGroupID' when calling readOneGroupNesting");
    }
    let pathParams = {
      'environmentID': environmentID,
      'groupID': groupID,
      'nestedGroupID': nestedGroupID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = GroupNesting;
    return this.apiClient.callApi('/environments/{environmentID}/groups/{groupID}/memberOfGroups/{nestedGroupID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Group Nesting
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {String} nestedGroupID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GroupNesting}
   */
  readOneGroupNesting(environmentID, groupID, nestedGroupID) {
    return this.readOneGroupNestingWithHttpInfo(environmentID, groupID, nestedGroupID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Group
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Group} [group] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Group} and HTTP response
   */
  updateGroupWithHttpInfo(environmentID, groupID, opts) {
    opts = opts || {};
    let postBody = opts['group'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateGroup");
    }
    // verify the required parameter 'groupID' is set
    if (groupID === undefined || groupID === null) {
      throw new Error("Missing the required parameter 'groupID' when calling updateGroup");
    }
    let pathParams = {
      'environmentID': environmentID,
      'groupID': groupID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = Group;
    return this.apiClient.callApi('/environments/{environmentID}/groups/{groupID}', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Group
   * @param {String} environmentID 
   * @param {String} groupID 
   * @param {Object} opts Optional parameters
   * @param {module:model/Group} opts.group 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Group}
   */
  updateGroup(environmentID, groupID, opts) {
    return this.updateGroupWithHttpInfo(environmentID, groupID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}