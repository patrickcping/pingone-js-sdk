/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import RoleAssignment from '../model/RoleAssignment';

/**
* UserRoleAssignments service.
* @module api/UserRoleAssignmentsApi
* @version 2023-06-29
*/
export default class UserRoleAssignmentsApi {
  /**
  * Constructs a new UserRoleAssignmentsApi. 
  * @alias module:api/UserRoleAssignmentsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE User Role Assignment
   * @param {String} environmentID 
   * @param {String} userID 
   * @param {Object} opts Optional parameters
   * @param {module:model/RoleAssignment} [roleAssignment] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleAssignment} and HTTP response
   */
  createUserRoleAssignmentWithHttpInfo(environmentID, userID, opts) {
    opts = opts || {};
    let postBody = opts['roleAssignment'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createUserRoleAssignment");
    }
    // verify the required parameter 'userID' is set
    if (userID === undefined || userID === null) {
      throw new Error("Missing the required parameter 'userID' when calling createUserRoleAssignment");
    }
    let pathParams = {
      'environmentID': environmentID,
      'userID': userID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = RoleAssignment;
    return this.apiClient.callApi('/environments/{environmentID}/users/{userID}/roleAssignments', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE User Role Assignment
   * @param {String} environmentID 
   * @param {String} userID 
   * @param {Object} opts Optional parameters
   * @param {module:model/RoleAssignment} opts.roleAssignment 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleAssignment}
   */
  createUserRoleAssignment(environmentID, userID, opts) {
    return this.createUserRoleAssignmentWithHttpInfo(environmentID, userID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE User's Role Assignment
   * @param {String} environmentID 
   * @param {String} userID 
   * @param {String} roleAssignmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteUserRoleAssignmentWithHttpInfo(environmentID, userID, roleAssignmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteUserRoleAssignment");
    }
    // verify the required parameter 'userID' is set
    if (userID === undefined || userID === null) {
      throw new Error("Missing the required parameter 'userID' when calling deleteUserRoleAssignment");
    }
    // verify the required parameter 'roleAssignmentID' is set
    if (roleAssignmentID === undefined || roleAssignmentID === null) {
      throw new Error("Missing the required parameter 'roleAssignmentID' when calling deleteUserRoleAssignment");
    }
    let pathParams = {
      'environmentID': environmentID,
      'userID': userID,
      'roleAssignmentID': roleAssignmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/users/{userID}/roleAssignments/{roleAssignmentID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE User's Role Assignment
   * @param {String} environmentID 
   * @param {String} userID 
   * @param {String} roleAssignmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteUserRoleAssignment(environmentID, userID, roleAssignmentID) {
    return this.deleteUserRoleAssignmentWithHttpInfo(environmentID, userID, roleAssignmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Role Assignment
   * @param {String} environmentID 
   * @param {String} userID 
   * @param {String} roleAssignmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleAssignment} and HTTP response
   */
  readOneUserRoleAssignmentWithHttpInfo(environmentID, userID, roleAssignmentID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneUserRoleAssignment");
    }
    // verify the required parameter 'userID' is set
    if (userID === undefined || userID === null) {
      throw new Error("Missing the required parameter 'userID' when calling readOneUserRoleAssignment");
    }
    // verify the required parameter 'roleAssignmentID' is set
    if (roleAssignmentID === undefined || roleAssignmentID === null) {
      throw new Error("Missing the required parameter 'roleAssignmentID' when calling readOneUserRoleAssignment");
    }
    let pathParams = {
      'environmentID': environmentID,
      'userID': userID,
      'roleAssignmentID': roleAssignmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = RoleAssignment;
    return this.apiClient.callApi('/environments/{environmentID}/users/{userID}/roleAssignments/{roleAssignmentID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Role Assignment
   * @param {String} environmentID 
   * @param {String} userID 
   * @param {String} roleAssignmentID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleAssignment}
   */
  readOneUserRoleAssignment(environmentID, userID, roleAssignmentID) {
    return this.readOneUserRoleAssignmentWithHttpInfo(environmentID, userID, roleAssignmentID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ Role Assignments
   * @param {String} environmentID 
   * @param {String} userID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readUserRoleAssignmentsWithHttpInfo(environmentID, userID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readUserRoleAssignments");
    }
    // verify the required parameter 'userID' is set
    if (userID === undefined || userID === null) {
      throw new Error("Missing the required parameter 'userID' when calling readUserRoleAssignments");
    }
    let pathParams = {
      'environmentID': environmentID,
      'userID': userID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/users/{userID}/roleAssignments', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ Role Assignments
   * @param {String} environmentID 
   * @param {String} userID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readUserRoleAssignments(environmentID, userID) {
    return this.readUserRoleAssignmentsWithHttpInfo(environmentID, userID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}