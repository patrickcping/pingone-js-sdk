/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import GatewayCredential from '../model/GatewayCredential';
import P1Error from '../model/P1Error';

/**
* GatewayCredentials service.
* @module api/GatewayCredentialsApi
* @version 2023-06-29
*/
export default class GatewayCredentialsApi {
  /**
  * Constructs a new GatewayCredentialsApi. 
  * @alias module:api/GatewayCredentialsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Gateway Credentials
   * @param {String} environmentID 
   * @param {String} gatewayID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCredential} and HTTP response
   */
  createGatewayCredentialWithHttpInfo(environmentID, gatewayID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createGatewayCredential");
    }
    // verify the required parameter 'gatewayID' is set
    if (gatewayID === undefined || gatewayID === null) {
      throw new Error("Missing the required parameter 'gatewayID' when calling createGatewayCredential");
    }
    let pathParams = {
      'environmentID': environmentID,
      'gatewayID': gatewayID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = GatewayCredential;
    return this.apiClient.callApi('/environments/{environmentID}/gateways/{gatewayID}/credentials', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Gateway Credentials
   * @param {String} environmentID 
   * @param {String} gatewayID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCredential}
   */
  createGatewayCredential(environmentID, gatewayID) {
    return this.createGatewayCredentialWithHttpInfo(environmentID, gatewayID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * DELETE Gateway Credentials
   * @param {String} environmentID 
   * @param {String} gatewayID 
   * @param {String} credentialID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
   */
  deleteGatewayCredentialWithHttpInfo(environmentID, gatewayID, credentialID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling deleteGatewayCredential");
    }
    // verify the required parameter 'gatewayID' is set
    if (gatewayID === undefined || gatewayID === null) {
      throw new Error("Missing the required parameter 'gatewayID' when calling deleteGatewayCredential");
    }
    // verify the required parameter 'credentialID' is set
    if (credentialID === undefined || credentialID === null) {
      throw new Error("Missing the required parameter 'credentialID' when calling deleteGatewayCredential");
    }
    let pathParams = {
      'environmentID': environmentID,
      'gatewayID': gatewayID,
      'credentialID': credentialID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = null;
    return this.apiClient.callApi('/environments/{environmentID}/gateways/{gatewayID}/credentials/{credentialID}', 'DELETE', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * DELETE Gateway Credentials
   * @param {String} environmentID 
   * @param {String} gatewayID 
   * @param {String} credentialID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}
   */
  deleteGatewayCredential(environmentID, gatewayID, credentialID) {
    return this.deleteGatewayCredentialWithHttpInfo(environmentID, gatewayID, credentialID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ All Gateway Credentials
   * @param {String} environmentID 
   * @param {String} gatewayID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
   */
  readAllGatewayCredentialsWithHttpInfo(environmentID, gatewayID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readAllGatewayCredentials");
    }
    // verify the required parameter 'gatewayID' is set
    if (gatewayID === undefined || gatewayID === null) {
      throw new Error("Missing the required parameter 'gatewayID' when calling readAllGatewayCredentials");
    }
    let pathParams = {
      'environmentID': environmentID,
      'gatewayID': gatewayID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = EntityArray;
    return this.apiClient.callApi('/environments/{environmentID}/gateways/{gatewayID}/credentials', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ All Gateway Credentials
   * @param {String} environmentID 
   * @param {String} gatewayID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
   */
  readAllGatewayCredentials(environmentID, gatewayID) {
    return this.readAllGatewayCredentialsWithHttpInfo(environmentID, gatewayID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Gateway Credential
   * @param {String} environmentID 
   * @param {String} gatewayID 
   * @param {String} credentialID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GatewayCredential} and HTTP response
   */
  readOneGatewayCredentialWithHttpInfo(environmentID, gatewayID, credentialID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneGatewayCredential");
    }
    // verify the required parameter 'gatewayID' is set
    if (gatewayID === undefined || gatewayID === null) {
      throw new Error("Missing the required parameter 'gatewayID' when calling readOneGatewayCredential");
    }
    // verify the required parameter 'credentialID' is set
    if (credentialID === undefined || credentialID === null) {
      throw new Error("Missing the required parameter 'credentialID' when calling readOneGatewayCredential");
    }
    let pathParams = {
      'environmentID': environmentID,
      'gatewayID': gatewayID,
      'credentialID': credentialID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = GatewayCredential;
    return this.apiClient.callApi('/environments/{environmentID}/gateways/{gatewayID}/credentials/{credentialID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Gateway Credential
   * @param {String} environmentID 
   * @param {String} gatewayID 
   * @param {String} credentialID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GatewayCredential}
   */
  readOneGatewayCredential(environmentID, gatewayID, credentialID) {
    return this.readOneGatewayCredentialWithHttpInfo(environmentID, gatewayID, credentialID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}