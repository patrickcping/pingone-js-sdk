/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import P1Error from '../model/P1Error';

/**
* PropagationRules service.
* @module api/PropagationRulesApi
* @version 2023-06-29
*/
export default class PropagationRulesApi {

    /**
    * Constructs a new PropagationRulesApi. 
    * @alias module:api/PropagationRulesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * READ One Plan's Rules
     * @param {String} environmentID 
     * @param {String} planID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [contentType] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationPlansPlanIDRulesGetWithHttpInfo(environmentID, planID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationPlansPlanIDRulesGet");
      }
      // verify the required parameter 'planID' is set
      if (planID === undefined || planID === null) {
        throw new Error("Missing the required parameter 'planID' when calling environmentsEnvironmentIDPropagationPlansPlanIDRulesGet");
      }

      let pathParams = {
        'environmentID': environmentID,
        'planID': planID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/plans/{planID}/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Plan's Rules
     * @param {String} environmentID 
     * @param {String} planID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.contentType 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationPlansPlanIDRulesGet(environmentID, planID, opts) {
      return this.environmentsEnvironmentIDPropagationPlansPlanIDRulesGetWithHttpInfo(environmentID, planID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All Rules
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @param {String} [authorization] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationRulesGetWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationRulesGet");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept'],
        'Authorization': opts['authorization']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All Rules
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @param {String} opts.authorization 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationRulesGet(environmentID, opts) {
      return this.environmentsEnvironmentIDPropagationRulesGetWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * CREATE Rule
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationRulesPostWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationRulesPost");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/rules', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE Rule
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationRulesPost(environmentID, opts) {
      return this.environmentsEnvironmentIDPropagationRulesPostWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE Rule
     * @param {String} environmentID 
     * @param {String} ruleID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationRulesRuleIDDeleteWithHttpInfo(environmentID, ruleID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationRulesRuleIDDelete");
      }
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling environmentsEnvironmentIDPropagationRulesRuleIDDelete");
      }

      let pathParams = {
        'environmentID': environmentID,
        'ruleID': ruleID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/rules/{ruleID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE Rule
     * @param {String} environmentID 
     * @param {String} ruleID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationRulesRuleIDDelete(environmentID, ruleID, opts) {
      return this.environmentsEnvironmentIDPropagationRulesRuleIDDeleteWithHttpInfo(environmentID, ruleID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One Rule
     * @param {String} environmentID 
     * @param {String} ruleID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationRulesRuleIDGetWithHttpInfo(environmentID, ruleID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationRulesRuleIDGet");
      }
      // verify the required parameter 'ruleID' is set
      if (ruleID === undefined || ruleID === null) {
        throw new Error("Missing the required parameter 'ruleID' when calling environmentsEnvironmentIDPropagationRulesRuleIDGet");
      }

      let pathParams = {
        'environmentID': environmentID,
        'ruleID': ruleID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/rules/{ruleID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Rule
     * @param {String} environmentID 
     * @param {String} ruleID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationRulesRuleIDGet(environmentID, ruleID, opts) {
      return this.environmentsEnvironmentIDPropagationRulesRuleIDGetWithHttpInfo(environmentID, ruleID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE Rule
     * @param {String} environmentID 
     * @param {String} storeID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationRulesStoreIDPutWithHttpInfo(environmentID, storeID, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationRulesStoreIDPut");
      }
      // verify the required parameter 'storeID' is set
      if (storeID === undefined || storeID === null) {
        throw new Error("Missing the required parameter 'storeID' when calling environmentsEnvironmentIDPropagationRulesStoreIDPut");
      }

      let pathParams = {
        'environmentID': environmentID,
        'storeID': storeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/rules/{storeID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE Rule
     * @param {String} environmentID 
     * @param {String} storeID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationRulesStoreIDPut(environmentID, storeID, opts) {
      return this.environmentsEnvironmentIDPropagationRulesStoreIDPutWithHttpInfo(environmentID, storeID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
