/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import RoleAssignment from '../model/RoleAssignment';

/**
* GatewayRoleAssignments service.
* @module api/GatewayRoleAssignmentsApi
* @version 2023-06-29
*/
export default class GatewayRoleAssignmentsApi {

    /**
    * Constructs a new GatewayRoleAssignmentsApi. 
    * @alias module:api/GatewayRoleAssignmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE Gateway Role Assignments
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleAssignment} [roleAssignment] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleAssignment} and HTTP response
     */
    createGatewayRoleAssignmentWithHttpInfo(environmentID, gatewayID, opts) {
      opts = opts || {};
      let postBody = opts['roleAssignment'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createGatewayRoleAssignment");
      }
      // verify the required parameter 'gatewayID' is set
      if (gatewayID === undefined || gatewayID === null) {
        throw new Error("Missing the required parameter 'gatewayID' when calling createGatewayRoleAssignment");
      }

      let pathParams = {
        'environmentID': environmentID,
        'gatewayID': gatewayID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways/{gatewayID}/roleAssignments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE Gateway Role Assignments
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {Object} opts Optional parameters
     * @param {module:model/RoleAssignment} opts.roleAssignment 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleAssignment}
     */
    createGatewayRoleAssignment(environmentID, gatewayID, opts) {
      return this.createGatewayRoleAssignmentWithHttpInfo(environmentID, gatewayID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE Gateway Role Assignment
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {String} gatewayRoleAssignmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteGatewayRoleAssignmentWithHttpInfo(environmentID, gatewayID, gatewayRoleAssignmentID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteGatewayRoleAssignment");
      }
      // verify the required parameter 'gatewayID' is set
      if (gatewayID === undefined || gatewayID === null) {
        throw new Error("Missing the required parameter 'gatewayID' when calling deleteGatewayRoleAssignment");
      }
      // verify the required parameter 'gatewayRoleAssignmentID' is set
      if (gatewayRoleAssignmentID === undefined || gatewayRoleAssignmentID === null) {
        throw new Error("Missing the required parameter 'gatewayRoleAssignmentID' when calling deleteGatewayRoleAssignment");
      }

      let pathParams = {
        'environmentID': environmentID,
        'gatewayID': gatewayID,
        'gatewayRoleAssignmentID': gatewayRoleAssignmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways/{gatewayID}/roleAssignments/{gatewayRoleAssignmentID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE Gateway Role Assignment
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {String} gatewayRoleAssignmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteGatewayRoleAssignment(environmentID, gatewayID, gatewayRoleAssignmentID) {
      return this.deleteGatewayRoleAssignmentWithHttpInfo(environmentID, gatewayID, gatewayRoleAssignmentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ Gateway Role Assignments
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readGatewayRoleAssignmentsWithHttpInfo(environmentID, gatewayID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readGatewayRoleAssignments");
      }
      // verify the required parameter 'gatewayID' is set
      if (gatewayID === undefined || gatewayID === null) {
        throw new Error("Missing the required parameter 'gatewayID' when calling readGatewayRoleAssignments");
      }

      let pathParams = {
        'environmentID': environmentID,
        'gatewayID': gatewayID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways/{gatewayID}/roleAssignments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ Gateway Role Assignments
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readGatewayRoleAssignments(environmentID, gatewayID) {
      return this.readGatewayRoleAssignmentsWithHttpInfo(environmentID, gatewayID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One Gateway Role Assignment
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {String} gatewayRoleAssignmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleAssignment} and HTTP response
     */
    readOneGatewayRoleAssignmentWithHttpInfo(environmentID, gatewayID, gatewayRoleAssignmentID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneGatewayRoleAssignment");
      }
      // verify the required parameter 'gatewayID' is set
      if (gatewayID === undefined || gatewayID === null) {
        throw new Error("Missing the required parameter 'gatewayID' when calling readOneGatewayRoleAssignment");
      }
      // verify the required parameter 'gatewayRoleAssignmentID' is set
      if (gatewayRoleAssignmentID === undefined || gatewayRoleAssignmentID === null) {
        throw new Error("Missing the required parameter 'gatewayRoleAssignmentID' when calling readOneGatewayRoleAssignment");
      }

      let pathParams = {
        'environmentID': environmentID,
        'gatewayID': gatewayID,
        'gatewayRoleAssignmentID': gatewayRoleAssignmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways/{gatewayID}/roleAssignments/{gatewayRoleAssignmentID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Gateway Role Assignment
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {String} gatewayRoleAssignmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleAssignment}
     */
    readOneGatewayRoleAssignment(environmentID, gatewayID, gatewayRoleAssignmentID) {
      return this.readOneGatewayRoleAssignmentWithHttpInfo(environmentID, gatewayID, gatewayRoleAssignmentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE Gateway Role Assignments
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {String} gatewayRoleAssignmentID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} [body] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RoleAssignment} and HTTP response
     */
    updateGatewayRoleAssignmentWithHttpInfo(environmentID, gatewayID, gatewayRoleAssignmentID, opts) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updateGatewayRoleAssignment");
      }
      // verify the required parameter 'gatewayID' is set
      if (gatewayID === undefined || gatewayID === null) {
        throw new Error("Missing the required parameter 'gatewayID' when calling updateGatewayRoleAssignment");
      }
      // verify the required parameter 'gatewayRoleAssignmentID' is set
      if (gatewayRoleAssignmentID === undefined || gatewayRoleAssignmentID === null) {
        throw new Error("Missing the required parameter 'gatewayRoleAssignmentID' when calling updateGatewayRoleAssignment");
      }

      let pathParams = {
        'environmentID': environmentID,
        'gatewayID': gatewayID,
        'gatewayRoleAssignmentID': gatewayRoleAssignmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = RoleAssignment;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways/{gatewayID}/roleAssignments/{gatewayRoleAssignmentID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE Gateway Role Assignments
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {String} gatewayRoleAssignmentID 
     * @param {Object} opts Optional parameters
     * @param {Object.<String, Object>} opts.body 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RoleAssignment}
     */
    updateGatewayRoleAssignment(environmentID, gatewayID, gatewayRoleAssignmentID, opts) {
      return this.updateGatewayRoleAssignmentWithHttpInfo(environmentID, gatewayID, gatewayRoleAssignmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
