/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateGateway201Response from '../model/CreateGateway201Response';
import CreateGatewayRequest from '../model/CreateGatewayRequest';
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';

/**
* Gateways service.
* @module api/GatewaysApi
* @version 2023-06-29
*/
export default class GatewaysApi {

    /**
    * Constructs a new GatewaysApi. 
    * @alias module:api/GatewaysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE Gateway
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGatewayRequest} [createGatewayRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGateway201Response} and HTTP response
     */
    createGatewayWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = opts['createGatewayRequest'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createGateway");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGateway201Response;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE Gateway
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGatewayRequest} opts.createGatewayRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGateway201Response}
     */
    createGateway(environmentID, opts) {
      return this.createGatewayWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE Gateway
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteGatewayWithHttpInfo(environmentID, gatewayID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteGateway");
      }
      // verify the required parameter 'gatewayID' is set
      if (gatewayID === undefined || gatewayID === null) {
        throw new Error("Missing the required parameter 'gatewayID' when calling deleteGateway");
      }

      let pathParams = {
        'environmentID': environmentID,
        'gatewayID': gatewayID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways/{gatewayID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE Gateway
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteGateway(environmentID, gatewayID) {
      return this.deleteGatewayWithHttpInfo(environmentID, gatewayID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All Gateways
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readAllGatewaysWithHttpInfo(environmentID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readAllGateways");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All Gateways
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readAllGateways(environmentID) {
      return this.readAllGatewaysWithHttpInfo(environmentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One Gateway
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGateway201Response} and HTTP response
     */
    readOneGatewayWithHttpInfo(environmentID, gatewayID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneGateway");
      }
      // verify the required parameter 'gatewayID' is set
      if (gatewayID === undefined || gatewayID === null) {
        throw new Error("Missing the required parameter 'gatewayID' when calling readOneGateway");
      }

      let pathParams = {
        'environmentID': environmentID,
        'gatewayID': gatewayID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CreateGateway201Response;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways/{gatewayID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Gateway
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGateway201Response}
     */
    readOneGateway(environmentID, gatewayID) {
      return this.readOneGatewayWithHttpInfo(environmentID, gatewayID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE Gateway
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGatewayRequest} [createGatewayRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateGateway201Response} and HTTP response
     */
    updateGatewayWithHttpInfo(environmentID, gatewayID, opts) {
      opts = opts || {};
      let postBody = opts['createGatewayRequest'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updateGateway");
      }
      // verify the required parameter 'gatewayID' is set
      if (gatewayID === undefined || gatewayID === null) {
        throw new Error("Missing the required parameter 'gatewayID' when calling updateGateway");
      }

      let pathParams = {
        'environmentID': environmentID,
        'gatewayID': gatewayID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateGateway201Response;
      return this.apiClient.callApi(
        '/environments/{environmentID}/gateways/{gatewayID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE Gateway
     * @param {String} environmentID 
     * @param {String} gatewayID 
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateGatewayRequest} opts.createGatewayRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateGateway201Response}
     */
    updateGateway(environmentID, gatewayID, opts) {
      return this.updateGatewayWithHttpInfo(environmentID, gatewayID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
