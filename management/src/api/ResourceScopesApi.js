/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';
import ResourceScope from '../model/ResourceScope';

/**
* ResourceScopes service.
* @module api/ResourceScopesApi
* @version 2023-06-29
*/
export default class ResourceScopesApi {

    /**
    * Constructs a new ResourceScopesApi. 
    * @alias module:api/ResourceScopesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE PingOne access control scope
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceScope} [resourceScope] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceScope} and HTTP response
     */
    createResourceScopeWithHttpInfo(environmentID, resourceID, opts) {
      opts = opts || {};
      let postBody = opts['resourceScope'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createResourceScope");
      }
      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling createResourceScope");
      }

      let pathParams = {
        'environmentID': environmentID,
        'resourceID': resourceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceScope;
      return this.apiClient.callApi(
        '/environments/{environmentID}/resources/{resourceID}/scopes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE PingOne access control scope
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceScope} opts.resourceScope 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceScope}
     */
    createResourceScope(environmentID, resourceID, opts) {
      return this.createResourceScopeWithHttpInfo(environmentID, resourceID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE Scope
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @param {String} scopeID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteResourceScopeWithHttpInfo(environmentID, resourceID, scopeID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteResourceScope");
      }
      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling deleteResourceScope");
      }
      // verify the required parameter 'scopeID' is set
      if (scopeID === undefined || scopeID === null) {
        throw new Error("Missing the required parameter 'scopeID' when calling deleteResourceScope");
      }

      let pathParams = {
        'environmentID': environmentID,
        'resourceID': resourceID,
        'scopeID': scopeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/resources/{resourceID}/scopes/{scopeID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE Scope
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @param {String} scopeID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteResourceScope(environmentID, resourceID, scopeID) {
      return this.deleteResourceScopeWithHttpInfo(environmentID, resourceID, scopeID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All Scopes (Resource)
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readAllResourceScopesWithHttpInfo(environmentID, resourceID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readAllResourceScopes");
      }
      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling readAllResourceScopes");
      }

      let pathParams = {
        'environmentID': environmentID,
        'resourceID': resourceID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/resources/{resourceID}/scopes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All Scopes (Resource)
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readAllResourceScopes(environmentID, resourceID) {
      return this.readAllResourceScopesWithHttpInfo(environmentID, resourceID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One Scope
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @param {String} scopeID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceScope} and HTTP response
     */
    readOneResourceScopeWithHttpInfo(environmentID, resourceID, scopeID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneResourceScope");
      }
      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling readOneResourceScope");
      }
      // verify the required parameter 'scopeID' is set
      if (scopeID === undefined || scopeID === null) {
        throw new Error("Missing the required parameter 'scopeID' when calling readOneResourceScope");
      }

      let pathParams = {
        'environmentID': environmentID,
        'resourceID': resourceID,
        'scopeID': scopeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceScope;
      return this.apiClient.callApi(
        '/environments/{environmentID}/resources/{resourceID}/scopes/{scopeID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Scope
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @param {String} scopeID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceScope}
     */
    readOneResourceScope(environmentID, resourceID, scopeID) {
      return this.readOneResourceScopeWithHttpInfo(environmentID, resourceID, scopeID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE PingOne access control scope
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @param {String} scopeID 
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceScope} [resourceScope] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResourceScope} and HTTP response
     */
    updateResourceScopeWithHttpInfo(environmentID, resourceID, scopeID, opts) {
      opts = opts || {};
      let postBody = opts['resourceScope'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updateResourceScope");
      }
      // verify the required parameter 'resourceID' is set
      if (resourceID === undefined || resourceID === null) {
        throw new Error("Missing the required parameter 'resourceID' when calling updateResourceScope");
      }
      // verify the required parameter 'scopeID' is set
      if (scopeID === undefined || scopeID === null) {
        throw new Error("Missing the required parameter 'scopeID' when calling updateResourceScope");
      }

      let pathParams = {
        'environmentID': environmentID,
        'resourceID': resourceID,
        'scopeID': scopeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceScope;
      return this.apiClient.callApi(
        '/environments/{environmentID}/resources/{resourceID}/scopes/{scopeID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE PingOne access control scope
     * @param {String} environmentID 
     * @param {String} resourceID 
     * @param {String} scopeID 
     * @param {Object} opts Optional parameters
     * @param {module:model/ResourceScope} opts.resourceScope 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResourceScope}
     */
    updateResourceScope(environmentID, resourceID, scopeID, opts) {
      return this.updateResourceScopeWithHttpInfo(environmentID, resourceID, scopeID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
