/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import P1Error from '../model/P1Error';

/**
* UserAgreementConsents service.
* @module api/UserAgreementConsentsApi
* @version 2023-06-29
*/
export default class UserAgreementConsentsApi {

    /**
    * Constructs a new UserAgreementConsentsApi. 
    * @alias module:api/UserAgreementConsentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * READ One User Agreement Consent
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {String} agreementID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDGetWithHttpInfo(environmentID, userID, agreementID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDGet");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDGet");
      }
      // verify the required parameter 'agreementID' is set
      if (agreementID === undefined || agreementID === null) {
        throw new Error("Missing the required parameter 'agreementID' when calling environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDGet");
      }

      let pathParams = {
        'environmentID': environmentID,
        'userID': userID,
        'agreementID': agreementID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/users/{userID}/agreementConsents/{agreementID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One User Agreement Consent
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {String} agreementID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDGet(environmentID, userID, agreementID) {
      return this.environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDGetWithHttpInfo(environmentID, userID, agreementID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Revoke Agreement
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {String} agreementID 
     * @param {Object} opts Optional parameters
     * @param {String} [contentType] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDPostWithHttpInfo(environmentID, userID, agreementID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDPost");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDPost");
      }
      // verify the required parameter 'agreementID' is set
      if (agreementID === undefined || agreementID === null) {
        throw new Error("Missing the required parameter 'agreementID' when calling environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDPost");
      }

      let pathParams = {
        'environmentID': environmentID,
        'userID': userID,
        'agreementID': agreementID
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': opts['contentType']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/users/{userID}/agreementConsents/{agreementID}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Revoke Agreement
     * @param {String} environmentID 
     * @param {String} userID 
     * @param {String} agreementID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentType 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDPost(environmentID, userID, agreementID, opts) {
      return this.environmentsEnvironmentIDUsersUserIDAgreementConsentsAgreementIDPostWithHttpInfo(environmentID, userID, agreementID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All User Agreement Consents
     * @param {String} environmentID 
     * @param {String} userID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDUsersUserIDAgreementConsentsGetWithHttpInfo(environmentID, userID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDUsersUserIDAgreementConsentsGet");
      }
      // verify the required parameter 'userID' is set
      if (userID === undefined || userID === null) {
        throw new Error("Missing the required parameter 'userID' when calling environmentsEnvironmentIDUsersUserIDAgreementConsentsGet");
      }

      let pathParams = {
        'environmentID': environmentID,
        'userID': userID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/users/{userID}/agreementConsents', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All User Agreement Consents
     * @param {String} environmentID 
     * @param {String} userID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDUsersUserIDAgreementConsentsGet(environmentID, userID) {
      return this.environmentsEnvironmentIDUsersUserIDAgreementConsentsGetWithHttpInfo(environmentID, userID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
