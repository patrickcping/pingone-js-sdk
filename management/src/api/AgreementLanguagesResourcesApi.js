/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AgreementLanguage from '../model/AgreementLanguage';
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';

/**
* AgreementLanguagesResources service.
* @module api/AgreementLanguagesResourcesApi
* @version 2023-06-29
*/
export default class AgreementLanguagesResourcesApi {

    /**
    * Constructs a new AgreementLanguagesResourcesApi. 
    * @alias module:api/AgreementLanguagesResourcesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE Language
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @param {Object} opts Optional parameters
     * @param {module:model/AgreementLanguage} [agreementLanguage] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgreementLanguage} and HTTP response
     */
    createAgreementLanguageWithHttpInfo(environmentID, agreementID, opts) {
      opts = opts || {};
      let postBody = opts['agreementLanguage'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createAgreementLanguage");
      }
      // verify the required parameter 'agreementID' is set
      if (agreementID === undefined || agreementID === null) {
        throw new Error("Missing the required parameter 'agreementID' when calling createAgreementLanguage");
      }

      let pathParams = {
        'environmentID': environmentID,
        'agreementID': agreementID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AgreementLanguage;
      return this.apiClient.callApi(
        '/environments/{environmentID}/agreements/{agreementID}/languages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE Language
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @param {Object} opts Optional parameters
     * @param {module:model/AgreementLanguage} opts.agreementLanguage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgreementLanguage}
     */
    createAgreementLanguage(environmentID, agreementID, opts) {
      return this.createAgreementLanguageWithHttpInfo(environmentID, agreementID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE Language
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @param {String} languageID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteAgreementLanguageWithHttpInfo(environmentID, agreementID, languageID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteAgreementLanguage");
      }
      // verify the required parameter 'agreementID' is set
      if (agreementID === undefined || agreementID === null) {
        throw new Error("Missing the required parameter 'agreementID' when calling deleteAgreementLanguage");
      }
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling deleteAgreementLanguage");
      }

      let pathParams = {
        'environmentID': environmentID,
        'agreementID': agreementID,
        'languageID': languageID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE Language
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @param {String} languageID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteAgreementLanguage(environmentID, agreementID, languageID) {
      return this.deleteAgreementLanguageWithHttpInfo(environmentID, agreementID, languageID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All Languages
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readAllAgreementLanguagesWithHttpInfo(environmentID, agreementID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readAllAgreementLanguages");
      }
      // verify the required parameter 'agreementID' is set
      if (agreementID === undefined || agreementID === null) {
        throw new Error("Missing the required parameter 'agreementID' when calling readAllAgreementLanguages");
      }

      let pathParams = {
        'environmentID': environmentID,
        'agreementID': agreementID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/agreements/{agreementID}/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All Languages
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readAllAgreementLanguages(environmentID, agreementID) {
      return this.readAllAgreementLanguagesWithHttpInfo(environmentID, agreementID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One Language
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @param {String} languageID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgreementLanguage} and HTTP response
     */
    readOneAgreementLanguageWithHttpInfo(environmentID, agreementID, languageID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneAgreementLanguage");
      }
      // verify the required parameter 'agreementID' is set
      if (agreementID === undefined || agreementID === null) {
        throw new Error("Missing the required parameter 'agreementID' when calling readOneAgreementLanguage");
      }
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling readOneAgreementLanguage");
      }

      let pathParams = {
        'environmentID': environmentID,
        'agreementID': agreementID,
        'languageID': languageID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgreementLanguage;
      return this.apiClient.callApi(
        '/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Language
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @param {String} languageID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgreementLanguage}
     */
    readOneAgreementLanguage(environmentID, agreementID, languageID) {
      return this.readOneAgreementLanguageWithHttpInfo(environmentID, agreementID, languageID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE Language
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @param {String} languageID 
     * @param {Object} opts Optional parameters
     * @param {module:model/AgreementLanguage} [agreementLanguage] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgreementLanguage} and HTTP response
     */
    updateAgreementLanguageWithHttpInfo(environmentID, agreementID, languageID, opts) {
      opts = opts || {};
      let postBody = opts['agreementLanguage'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updateAgreementLanguage");
      }
      // verify the required parameter 'agreementID' is set
      if (agreementID === undefined || agreementID === null) {
        throw new Error("Missing the required parameter 'agreementID' when calling updateAgreementLanguage");
      }
      // verify the required parameter 'languageID' is set
      if (languageID === undefined || languageID === null) {
        throw new Error("Missing the required parameter 'languageID' when calling updateAgreementLanguage");
      }

      let pathParams = {
        'environmentID': environmentID,
        'agreementID': agreementID,
        'languageID': languageID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AgreementLanguage;
      return this.apiClient.callApi(
        '/environments/{environmentID}/agreements/{agreementID}/languages/{languageID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE Language
     * @param {String} environmentID 
     * @param {String} agreementID 
     * @param {String} languageID 
     * @param {Object} opts Optional parameters
     * @param {module:model/AgreementLanguage} opts.agreementLanguage 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgreementLanguage}
     */
    updateAgreementLanguage(environmentID, agreementID, languageID, opts) {
      return this.updateAgreementLanguageWithHttpInfo(environmentID, agreementID, languageID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
