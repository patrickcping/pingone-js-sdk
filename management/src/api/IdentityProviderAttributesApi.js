/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import IdentityProviderAttribute from '../model/IdentityProviderAttribute';
import P1Error from '../model/P1Error';

/**
* IdentityProviderAttributes service.
* @module api/IdentityProviderAttributesApi
* @version 2023-06-29
*/
export default class IdentityProviderAttributesApi {

    /**
    * Constructs a new IdentityProviderAttributesApi. 
    * @alias module:api/IdentityProviderAttributesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE Identity Provider Attribute
     * @param {String} environmentID 
     * @param {String} providerID 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityProviderAttribute} [identityProviderAttribute] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdentityProviderAttribute} and HTTP response
     */
    createIdentityProviderAttributeWithHttpInfo(environmentID, providerID, opts) {
      opts = opts || {};
      let postBody = opts['identityProviderAttribute'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createIdentityProviderAttribute");
      }
      // verify the required parameter 'providerID' is set
      if (providerID === undefined || providerID === null) {
        throw new Error("Missing the required parameter 'providerID' when calling createIdentityProviderAttribute");
      }

      let pathParams = {
        'environmentID': environmentID,
        'providerID': providerID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityProviderAttribute;
      return this.apiClient.callApi(
        '/environments/{environmentID}/identityProviders/{providerID}/attributes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE Identity Provider Attribute
     * @param {String} environmentID 
     * @param {String} providerID 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityProviderAttribute} opts.identityProviderAttribute 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdentityProviderAttribute}
     */
    createIdentityProviderAttribute(environmentID, providerID, opts) {
      return this.createIdentityProviderAttributeWithHttpInfo(environmentID, providerID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE Identity Provider Attribute
     * @param {String} environmentID 
     * @param {String} providerID 
     * @param {String} providerAttributeID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteIdentityProviderAttributeWithHttpInfo(environmentID, providerID, providerAttributeID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteIdentityProviderAttribute");
      }
      // verify the required parameter 'providerID' is set
      if (providerID === undefined || providerID === null) {
        throw new Error("Missing the required parameter 'providerID' when calling deleteIdentityProviderAttribute");
      }
      // verify the required parameter 'providerAttributeID' is set
      if (providerAttributeID === undefined || providerAttributeID === null) {
        throw new Error("Missing the required parameter 'providerAttributeID' when calling deleteIdentityProviderAttribute");
      }

      let pathParams = {
        'environmentID': environmentID,
        'providerID': providerID,
        'providerAttributeID': providerAttributeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/identityProviders/{providerID}/attributes/{providerAttributeID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE Identity Provider Attribute
     * @param {String} environmentID 
     * @param {String} providerID 
     * @param {String} providerAttributeID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteIdentityProviderAttribute(environmentID, providerID, providerAttributeID) {
      return this.deleteIdentityProviderAttributeWithHttpInfo(environmentID, providerID, providerAttributeID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All Identity Provider Attributes
     * @param {String} environmentID 
     * @param {String} providerID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readAllIdentityProviderAttributesWithHttpInfo(environmentID, providerID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readAllIdentityProviderAttributes");
      }
      // verify the required parameter 'providerID' is set
      if (providerID === undefined || providerID === null) {
        throw new Error("Missing the required parameter 'providerID' when calling readAllIdentityProviderAttributes");
      }

      let pathParams = {
        'environmentID': environmentID,
        'providerID': providerID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/identityProviders/{providerID}/attributes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All Identity Provider Attributes
     * @param {String} environmentID 
     * @param {String} providerID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readAllIdentityProviderAttributes(environmentID, providerID) {
      return this.readAllIdentityProviderAttributesWithHttpInfo(environmentID, providerID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One Identity Provider Attribute
     * @param {String} environmentID 
     * @param {String} providerID 
     * @param {String} providerAttributeID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdentityProviderAttribute} and HTTP response
     */
    readOneIdentityProviderAttributeWithHttpInfo(environmentID, providerID, providerAttributeID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneIdentityProviderAttribute");
      }
      // verify the required parameter 'providerID' is set
      if (providerID === undefined || providerID === null) {
        throw new Error("Missing the required parameter 'providerID' when calling readOneIdentityProviderAttribute");
      }
      // verify the required parameter 'providerAttributeID' is set
      if (providerAttributeID === undefined || providerAttributeID === null) {
        throw new Error("Missing the required parameter 'providerAttributeID' when calling readOneIdentityProviderAttribute");
      }

      let pathParams = {
        'environmentID': environmentID,
        'providerID': providerID,
        'providerAttributeID': providerAttributeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentityProviderAttribute;
      return this.apiClient.callApi(
        '/environments/{environmentID}/identityProviders/{providerID}/attributes/{providerAttributeID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Identity Provider Attribute
     * @param {String} environmentID 
     * @param {String} providerID 
     * @param {String} providerAttributeID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdentityProviderAttribute}
     */
    readOneIdentityProviderAttribute(environmentID, providerID, providerAttributeID) {
      return this.readOneIdentityProviderAttributeWithHttpInfo(environmentID, providerID, providerAttributeID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE Identity Provider Attribute
     * @param {String} environmentID 
     * @param {String} providerID 
     * @param {String} providerAttributeID 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityProviderAttribute} [identityProviderAttribute] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdentityProviderAttribute} and HTTP response
     */
    updateIdentityProviderAttributeWithHttpInfo(environmentID, providerID, providerAttributeID, opts) {
      opts = opts || {};
      let postBody = opts['identityProviderAttribute'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updateIdentityProviderAttribute");
      }
      // verify the required parameter 'providerID' is set
      if (providerID === undefined || providerID === null) {
        throw new Error("Missing the required parameter 'providerID' when calling updateIdentityProviderAttribute");
      }
      // verify the required parameter 'providerAttributeID' is set
      if (providerAttributeID === undefined || providerAttributeID === null) {
        throw new Error("Missing the required parameter 'providerAttributeID' when calling updateIdentityProviderAttribute");
      }

      let pathParams = {
        'environmentID': environmentID,
        'providerID': providerID,
        'providerAttributeID': providerAttributeID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityProviderAttribute;
      return this.apiClient.callApi(
        '/environments/{environmentID}/identityProviders/{providerID}/attributes/{providerAttributeID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE Identity Provider Attribute
     * @param {String} environmentID 
     * @param {String} providerID 
     * @param {String} providerAttributeID 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityProviderAttribute} opts.identityProviderAttribute 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdentityProviderAttribute}
     */
    updateIdentityProviderAttribute(environmentID, providerID, providerAttributeID, opts) {
      return this.updateIdentityProviderAttributeWithHttpInfo(environmentID, providerID, providerAttributeID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
