/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import P1Error from '../model/P1Error';

/**
* PropagationRevisions service.
* @module api/PropagationRevisionsApi
* @version 2023-06-29
*/
export default class PropagationRevisionsApi {

    /**
    * Constructs a new PropagationRevisionsApi. 
    * @alias module:api/PropagationRevisionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * READ Latest Revision
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationRevisionsIdlatestGetWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationRevisionsIdlatestGet");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/revisions/id:latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ Latest Revision
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationRevisionsIdlatestGet(environmentID, opts) {
      return this.environmentsEnvironmentIDPropagationRevisionsIdlatestGetWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * CREATE Revision
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationRevisionsPostWithHttpInfo(environmentID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationRevisionsPost");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/revisions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE Revision
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationRevisionsPost(environmentID) {
      return this.environmentsEnvironmentIDPropagationRevisionsPostWithHttpInfo(environmentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ Previous Revision
     * @param {String} environmentID 
     * @param {String} previousRevisionID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    environmentsEnvironmentIDPropagationRevisionsPreviousRevisionIDGetWithHttpInfo(environmentID, previousRevisionID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling environmentsEnvironmentIDPropagationRevisionsPreviousRevisionIDGet");
      }
      // verify the required parameter 'previousRevisionID' is set
      if (previousRevisionID === undefined || previousRevisionID === null) {
        throw new Error("Missing the required parameter 'previousRevisionID' when calling environmentsEnvironmentIDPropagationRevisionsPreviousRevisionIDGet");
      }

      let pathParams = {
        'environmentID': environmentID,
        'previousRevisionID': previousRevisionID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/revisions/{previousRevisionID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ Previous Revision
     * @param {String} environmentID 
     * @param {String} previousRevisionID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    environmentsEnvironmentIDPropagationRevisionsPreviousRevisionIDGet(environmentID, previousRevisionID, opts) {
      return this.environmentsEnvironmentIDPropagationRevisionsPreviousRevisionIDGetWithHttpInfo(environmentID, previousRevisionID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
