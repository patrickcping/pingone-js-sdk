/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntityArray from '../model/EntityArray';
import IdentityPropagationPlan from '../model/IdentityPropagationPlan';
import P1Error from '../model/P1Error';

/**
* IdentityPropagationPlans service.
* @module api/IdentityPropagationPlansApi
* @version 2023-06-29
*/
export default class IdentityPropagationPlansApi {

    /**
    * Constructs a new IdentityPropagationPlansApi. 
    * @alias module:api/IdentityPropagationPlansApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * CREATE Plan
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityPropagationPlan} [identityPropagationPlan] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdentityPropagationPlan} and HTTP response
     */
    createPlanWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = opts['identityPropagationPlan'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createPlan");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityPropagationPlan;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/plans', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * CREATE Plan
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityPropagationPlan} opts.identityPropagationPlan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdentityPropagationPlan}
     */
    createPlan(environmentID, opts) {
      return this.createPlanWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * DELETE Plan
     * @param {String} environmentID 
     * @param {String} planID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deletePlanWithHttpInfo(environmentID, planID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deletePlan");
      }
      // verify the required parameter 'planID' is set
      if (planID === undefined || planID === null) {
        throw new Error("Missing the required parameter 'planID' when calling deletePlan");
      }

      let pathParams = {
        'environmentID': environmentID,
        'planID': planID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/plans/{planID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * DELETE Plan
     * @param {String} environmentID 
     * @param {String} planID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deletePlan(environmentID, planID, opts) {
      return this.deletePlanWithHttpInfo(environmentID, planID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ All Plans
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readAllPlansWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readAllPlans");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/plans', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ All Plans
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readAllPlans(environmentID, opts) {
      return this.readAllPlansWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * READ One Plan
     * @param {String} environmentID 
     * @param {String} planID 
     * @param {Object} opts Optional parameters
     * @param {String} [accept] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdentityPropagationPlan} and HTTP response
     */
    readOnePlanWithHttpInfo(environmentID, planID, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOnePlan");
      }
      // verify the required parameter 'planID' is set
      if (planID === undefined || planID === null) {
        throw new Error("Missing the required parameter 'planID' when calling readOnePlan");
      }

      let pathParams = {
        'environmentID': environmentID,
        'planID': planID
      };
      let queryParams = {
      };
      let headerParams = {
        'Accept': opts['accept']
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IdentityPropagationPlan;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/plans/{planID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * READ One Plan
     * @param {String} environmentID 
     * @param {String} planID 
     * @param {Object} opts Optional parameters
     * @param {String} opts.accept 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdentityPropagationPlan}
     */
    readOnePlan(environmentID, planID, opts) {
      return this.readOnePlanWithHttpInfo(environmentID, planID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * UPDATE Plan
     * @param {String} environmentID 
     * @param {String} planID 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityPropagationPlan} [identityPropagationPlan] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/IdentityPropagationPlan} and HTTP response
     */
    updatePlanWithHttpInfo(environmentID, planID, opts) {
      opts = opts || {};
      let postBody = opts['identityPropagationPlan'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updatePlan");
      }
      // verify the required parameter 'planID' is set
      if (planID === undefined || planID === null) {
        throw new Error("Missing the required parameter 'planID' when calling updatePlan");
      }

      let pathParams = {
        'environmentID': environmentID,
        'planID': planID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IdentityPropagationPlan;
      return this.apiClient.callApi(
        '/environments/{environmentID}/propagation/plans/{planID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * UPDATE Plan
     * @param {String} environmentID 
     * @param {String} planID 
     * @param {Object} opts Optional parameters
     * @param {module:model/IdentityPropagationPlan} opts.identityPropagationPlan 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/IdentityPropagationPlan}
     */
    updatePlan(environmentID, planID, opts) {
      return this.updatePlanWithHttpInfo(environmentID, planID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
