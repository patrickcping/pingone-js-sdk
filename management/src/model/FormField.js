/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFormElementLabelMode from './EnumFormElementLabelMode';
import EnumFormElementLayout from './EnumFormElementLayout';
import EnumFormFieldType from './EnumFormFieldType';
import EnumFormItemAlignment from './EnumFormItemAlignment';
import EnumFormQrCodeType from './EnumFormQrCodeType';
import EnumFormRecaptchaV2Size from './EnumFormRecaptchaV2Size';
import EnumFormRecaptchaV2Theme from './EnumFormRecaptchaV2Theme';
import EnumFormSocialLoginIdpType from './EnumFormSocialLoginIdpType';
import FormElementOption from './FormElementOption';
import FormElementValidation from './FormElementValidation';
import FormFieldCheckbox from './FormFieldCheckbox';
import FormFieldCombobox from './FormFieldCombobox';
import FormFieldCommonPosition from './FormFieldCommonPosition';
import FormFieldDivider from './FormFieldDivider';
import FormFieldDropdown from './FormFieldDropdown';
import FormFieldEmptyField from './FormFieldEmptyField';
import FormFieldErrorDisplay from './FormFieldErrorDisplay';
import FormFieldFlowButton from './FormFieldFlowButton';
import FormFieldFlowLink from './FormFieldFlowLink';
import FormFieldPassword from './FormFieldPassword';
import FormFieldPasswordVerify from './FormFieldPasswordVerify';
import FormFieldQrCode from './FormFieldQrCode';
import FormFieldRadio from './FormFieldRadio';
import FormFieldRecaptchaV2 from './FormFieldRecaptchaV2';
import FormFieldSlateTextblob from './FormFieldSlateTextblob';
import FormFieldSocialLoginButton from './FormFieldSocialLoginButton';
import FormFieldSubmitButton from './FormFieldSubmitButton';
import FormFieldText from './FormFieldText';
import FormFieldTextblob from './FormFieldTextblob';
import FormSocialLoginButtonStyles from './FormSocialLoginButtonStyles';

/**
 * The FormField model module.
 * @module model/FormField
 * @version 2023-06-29
 */
class FormField {
    /**
     * Constructs a new <code>FormField</code>.
     * @alias module:model/FormField
     * @param {(module:model/FormFieldCheckbox|module:model/FormFieldCombobox|module:model/FormFieldDivider|module:model/FormFieldDropdown|module:model/FormFieldEmptyField|module:model/FormFieldErrorDisplay|module:model/FormFieldFlowButton|module:model/FormFieldFlowLink|module:model/FormFieldPassword|module:model/FormFieldPasswordVerify|module:model/FormFieldQrCode|module:model/FormFieldRadio|module:model/FormFieldRecaptchaV2|module:model/FormFieldSlateTextblob|module:model/FormFieldSocialLoginButton|module:model/FormFieldSubmitButton|module:model/FormFieldText|module:model/FormFieldTextblob)} instance The actual instance to initialize FormField.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "FormFieldText") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldText.validateJSON(instance); // throw an exception if no match
                // create FormFieldText from JS object
                this.actualInstance = FormFieldText.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldText
            errorMessages.push("Failed to construct FormFieldText: " + err)
        }

        try {
            if (typeof instance === "FormFieldPassword") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldPassword.validateJSON(instance); // throw an exception if no match
                // create FormFieldPassword from JS object
                this.actualInstance = FormFieldPassword.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldPassword
            errorMessages.push("Failed to construct FormFieldPassword: " + err)
        }

        try {
            if (typeof instance === "FormFieldPasswordVerify") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldPasswordVerify.validateJSON(instance); // throw an exception if no match
                // create FormFieldPasswordVerify from JS object
                this.actualInstance = FormFieldPasswordVerify.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldPasswordVerify
            errorMessages.push("Failed to construct FormFieldPasswordVerify: " + err)
        }

        try {
            if (typeof instance === "FormFieldRadio") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldRadio.validateJSON(instance); // throw an exception if no match
                // create FormFieldRadio from JS object
                this.actualInstance = FormFieldRadio.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldRadio
            errorMessages.push("Failed to construct FormFieldRadio: " + err)
        }

        try {
            if (typeof instance === "FormFieldCheckbox") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldCheckbox.validateJSON(instance); // throw an exception if no match
                // create FormFieldCheckbox from JS object
                this.actualInstance = FormFieldCheckbox.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldCheckbox
            errorMessages.push("Failed to construct FormFieldCheckbox: " + err)
        }

        try {
            if (typeof instance === "FormFieldDropdown") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldDropdown.validateJSON(instance); // throw an exception if no match
                // create FormFieldDropdown from JS object
                this.actualInstance = FormFieldDropdown.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldDropdown
            errorMessages.push("Failed to construct FormFieldDropdown: " + err)
        }

        try {
            if (typeof instance === "FormFieldCombobox") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldCombobox.validateJSON(instance); // throw an exception if no match
                // create FormFieldCombobox from JS object
                this.actualInstance = FormFieldCombobox.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldCombobox
            errorMessages.push("Failed to construct FormFieldCombobox: " + err)
        }

        try {
            if (typeof instance === "FormFieldDivider") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldDivider.validateJSON(instance); // throw an exception if no match
                // create FormFieldDivider from JS object
                this.actualInstance = FormFieldDivider.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldDivider
            errorMessages.push("Failed to construct FormFieldDivider: " + err)
        }

        try {
            if (typeof instance === "FormFieldEmptyField") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldEmptyField.validateJSON(instance); // throw an exception if no match
                // create FormFieldEmptyField from JS object
                this.actualInstance = FormFieldEmptyField.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldEmptyField
            errorMessages.push("Failed to construct FormFieldEmptyField: " + err)
        }

        try {
            if (typeof instance === "FormFieldTextblob") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldTextblob.validateJSON(instance); // throw an exception if no match
                // create FormFieldTextblob from JS object
                this.actualInstance = FormFieldTextblob.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldTextblob
            errorMessages.push("Failed to construct FormFieldTextblob: " + err)
        }

        try {
            if (typeof instance === "FormFieldSlateTextblob") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldSlateTextblob.validateJSON(instance); // throw an exception if no match
                // create FormFieldSlateTextblob from JS object
                this.actualInstance = FormFieldSlateTextblob.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldSlateTextblob
            errorMessages.push("Failed to construct FormFieldSlateTextblob: " + err)
        }

        try {
            if (typeof instance === "FormFieldSubmitButton") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldSubmitButton.validateJSON(instance); // throw an exception if no match
                // create FormFieldSubmitButton from JS object
                this.actualInstance = FormFieldSubmitButton.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldSubmitButton
            errorMessages.push("Failed to construct FormFieldSubmitButton: " + err)
        }

        try {
            if (typeof instance === "FormFieldErrorDisplay") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldErrorDisplay.validateJSON(instance); // throw an exception if no match
                // create FormFieldErrorDisplay from JS object
                this.actualInstance = FormFieldErrorDisplay.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldErrorDisplay
            errorMessages.push("Failed to construct FormFieldErrorDisplay: " + err)
        }

        try {
            if (typeof instance === "FormFieldFlowLink") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldFlowLink.validateJSON(instance); // throw an exception if no match
                // create FormFieldFlowLink from JS object
                this.actualInstance = FormFieldFlowLink.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldFlowLink
            errorMessages.push("Failed to construct FormFieldFlowLink: " + err)
        }

        try {
            if (typeof instance === "FormFieldFlowButton") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldFlowButton.validateJSON(instance); // throw an exception if no match
                // create FormFieldFlowButton from JS object
                this.actualInstance = FormFieldFlowButton.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldFlowButton
            errorMessages.push("Failed to construct FormFieldFlowButton: " + err)
        }

        try {
            if (typeof instance === "FormFieldRecaptchaV2") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldRecaptchaV2.validateJSON(instance); // throw an exception if no match
                // create FormFieldRecaptchaV2 from JS object
                this.actualInstance = FormFieldRecaptchaV2.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldRecaptchaV2
            errorMessages.push("Failed to construct FormFieldRecaptchaV2: " + err)
        }

        try {
            if (typeof instance === "FormFieldQrCode") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldQrCode.validateJSON(instance); // throw an exception if no match
                // create FormFieldQrCode from JS object
                this.actualInstance = FormFieldQrCode.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldQrCode
            errorMessages.push("Failed to construct FormFieldQrCode: " + err)
        }

        try {
            if (typeof instance === "FormFieldSocialLoginButton") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                FormFieldSocialLoginButton.validateJSON(instance); // throw an exception if no match
                // create FormFieldSocialLoginButton from JS object
                this.actualInstance = FormFieldSocialLoginButton.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into FormFieldSocialLoginButton
            errorMessages.push("Failed to construct FormFieldSocialLoginButton: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `FormField` with oneOf schemas FormFieldCheckbox, FormFieldCombobox, FormFieldDivider, FormFieldDropdown, FormFieldEmptyField, FormFieldErrorDisplay, FormFieldFlowButton, FormFieldFlowLink, FormFieldPassword, FormFieldPasswordVerify, FormFieldQrCode, FormFieldRadio, FormFieldRecaptchaV2, FormFieldSlateTextblob, FormFieldSocialLoginButton, FormFieldSubmitButton, FormFieldText, FormFieldTextblob. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `FormField` with oneOf schemas FormFieldCheckbox, FormFieldCombobox, FormFieldDivider, FormFieldDropdown, FormFieldEmptyField, FormFieldErrorDisplay, FormFieldFlowButton, FormFieldFlowLink, FormFieldPassword, FormFieldPasswordVerify, FormFieldQrCode, FormFieldRadio, FormFieldRecaptchaV2, FormFieldSlateTextblob, FormFieldSocialLoginButton, FormFieldSubmitButton, FormFieldText, FormFieldTextblob. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>FormField</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormField} obj Optional instance to populate.
     * @return {module:model/FormField} The populated <code>FormField</code> instance.
     */
    static constructFromObject(data, obj) {
        return new FormField(data);
    }

    /**
     * Gets the actual instance, which can be <code>FormFieldCheckbox</code>, <code>FormFieldCombobox</code>, <code>FormFieldDivider</code>, <code>FormFieldDropdown</code>, <code>FormFieldEmptyField</code>, <code>FormFieldErrorDisplay</code>, <code>FormFieldFlowButton</code>, <code>FormFieldFlowLink</code>, <code>FormFieldPassword</code>, <code>FormFieldPasswordVerify</code>, <code>FormFieldQrCode</code>, <code>FormFieldRadio</code>, <code>FormFieldRecaptchaV2</code>, <code>FormFieldSlateTextblob</code>, <code>FormFieldSocialLoginButton</code>, <code>FormFieldSubmitButton</code>, <code>FormFieldText</code>, <code>FormFieldTextblob</code>.
     * @return {(module:model/FormFieldCheckbox|module:model/FormFieldCombobox|module:model/FormFieldDivider|module:model/FormFieldDropdown|module:model/FormFieldEmptyField|module:model/FormFieldErrorDisplay|module:model/FormFieldFlowButton|module:model/FormFieldFlowLink|module:model/FormFieldPassword|module:model/FormFieldPasswordVerify|module:model/FormFieldQrCode|module:model/FormFieldRadio|module:model/FormFieldRecaptchaV2|module:model/FormFieldSlateTextblob|module:model/FormFieldSocialLoginButton|module:model/FormFieldSubmitButton|module:model/FormFieldText|module:model/FormFieldTextblob)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>FormFieldCheckbox</code>, <code>FormFieldCombobox</code>, <code>FormFieldDivider</code>, <code>FormFieldDropdown</code>, <code>FormFieldEmptyField</code>, <code>FormFieldErrorDisplay</code>, <code>FormFieldFlowButton</code>, <code>FormFieldFlowLink</code>, <code>FormFieldPassword</code>, <code>FormFieldPasswordVerify</code>, <code>FormFieldQrCode</code>, <code>FormFieldRadio</code>, <code>FormFieldRecaptchaV2</code>, <code>FormFieldSlateTextblob</code>, <code>FormFieldSocialLoginButton</code>, <code>FormFieldSubmitButton</code>, <code>FormFieldText</code>, <code>FormFieldTextblob</code>.
     * @param {(module:model/FormFieldCheckbox|module:model/FormFieldCombobox|module:model/FormFieldDivider|module:model/FormFieldDropdown|module:model/FormFieldEmptyField|module:model/FormFieldErrorDisplay|module:model/FormFieldFlowButton|module:model/FormFieldFlowLink|module:model/FormFieldPassword|module:model/FormFieldPasswordVerify|module:model/FormFieldQrCode|module:model/FormFieldRadio|module:model/FormFieldRecaptchaV2|module:model/FormFieldSlateTextblob|module:model/FormFieldSocialLoginButton|module:model/FormFieldSubmitButton|module:model/FormFieldText|module:model/FormFieldTextblob)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = FormField.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of FormField from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/FormField} An instance of FormField.
     */
    static fromJSON = function(json_string){
        return FormField.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/EnumFormFieldType} type
 */
FormField.prototype['type'] = undefined;

/**
 * @member {module:model/FormFieldCommonPosition} position
 */
FormField.prototype['position'] = undefined;

/**
 * A boolean that specifies whether the linked directory attribute is disabled.
 * @member {Boolean} attributeDisabled
 */
FormField.prototype['attributeDisabled'] = undefined;

/**
 * A string that specifies an identifier for the field component.
 * @member {String} key
 */
FormField.prototype['key'] = undefined;

/**
 * A string that specifies the social login button label.
 * @member {String} label
 */
FormField.prototype['label'] = undefined;

/**
 * @member {module:model/EnumFormElementLabelMode} labelMode
 */
FormField.prototype['labelMode'] = undefined;

/**
 * A boolean that specifies whether the field is required.
 * @member {Boolean} required
 */
FormField.prototype['required'] = undefined;

/**
 * A boolean that specifies whether the end user can type an entry that is not in a predefined list.
 * @member {Boolean} otherOptionEnabled
 */
FormField.prototype['otherOptionEnabled'] = undefined;

/**
 * A string that specifies whether the form identifies that the choice is a custom choice not from a predefined list.
 * @member {String} otherOptionKey
 */
FormField.prototype['otherOptionKey'] = undefined;

/**
 * A string that specifies the label for a custom or \"other\" choice in a list.
 * @member {String} otherOptionLabel
 */
FormField.prototype['otherOptionLabel'] = undefined;

/**
 * A string that specifies the label for the other option in drop-down controls.
 * @member {String} otherOptionInputLabel
 */
FormField.prototype['otherOptionInputLabel'] = undefined;

/**
 * A boolean that specifies whether the directory attribute option is disabled. Set to true if it references a PingOne directory attribute.
 * @member {Boolean} otherOptionAttributeDisabled
 */
FormField.prototype['otherOptionAttributeDisabled'] = undefined;

/**
 * @member {module:model/EnumFormElementLayout} layout
 */
FormField.prototype['layout'] = undefined;

/**
 * An array of objects (label/value pairs) that specifies the unique list of options. This is a required property when the type is `RADIO`, `CHECKBOX`, or `DROPDOWN`.
 * @member {Array.<module:model/FormElementOption>} options
 */
FormField.prototype['options'] = undefined;

/**
 * @member {module:model/FormElementValidation} validation
 */
FormField.prototype['validation'] = undefined;

/**
 * A boolean that specifies whether the password requirements are displayed.
 * @member {Boolean} showPasswordRequirements
 */
FormField.prototype['showPasswordRequirements'] = undefined;

/**
 * A string that when a second field for verifies password is used, this poperty specifies the field label for that verify field.
 * @member {String} labelPasswordVerify
 */
FormField.prototype['labelPasswordVerify'] = undefined;

/**
 * A string that specifies the field content.
 * @member {String} content
 */
FormField.prototype['content'] = undefined;

/**
 * @member {module:model/FormSocialLoginButtonStyles} styles
 */
FormField.prototype['styles'] = undefined;

/**
 * @member {module:model/EnumFormRecaptchaV2Size} size
 */
FormField.prototype['size'] = undefined;

/**
 * @member {module:model/EnumFormRecaptchaV2Theme} theme
 */
FormField.prototype['theme'] = undefined;

/**
 * @member {module:model/EnumFormItemAlignment} alignment
 */
FormField.prototype['alignment'] = undefined;

/**
 * @member {module:model/EnumFormQrCodeType} qrCodeType
 */
FormField.prototype['qrCodeType'] = undefined;

/**
 * A boolean that specifies the border visibility.
 * @member {Boolean} showBorder
 */
FormField.prototype['showBorder'] = undefined;

/**
 * @member {module:model/EnumFormSocialLoginIdpType} idpType
 */
FormField.prototype['idpType'] = undefined;

/**
 * A string that specifies the external identity provider name.
 * @member {String} idpName
 */
FormField.prototype['idpName'] = undefined;

/**
 * A string that specifies the external identity provider's ID.
 * @member {String} idpId
 */
FormField.prototype['idpId'] = undefined;

/**
 * A boolean that specifies whether the external identity provider is enabled.
 * @member {Boolean} idpEnabled
 */
FormField.prototype['idpEnabled'] = undefined;

/**
 * A string that specifies the HTTP link (URL format) for the external identity provider's icon.
 * @member {String} iconSrc
 */
FormField.prototype['iconSrc'] = undefined;

/**
 * An integer that specifies the button width. Set as a percentage.
 * @member {Number} width
 */
FormField.prototype['width'] = undefined;


FormField.OneOf = ["FormFieldCheckbox", "FormFieldCombobox", "FormFieldDivider", "FormFieldDropdown", "FormFieldEmptyField", "FormFieldErrorDisplay", "FormFieldFlowButton", "FormFieldFlowLink", "FormFieldPassword", "FormFieldPasswordVerify", "FormFieldQrCode", "FormFieldRadio", "FormFieldRecaptchaV2", "FormFieldSlateTextblob", "FormFieldSocialLoginButton", "FormFieldSubmitButton", "FormFieldText", "FormFieldTextblob"];

export default FormField;

