/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumTemplateContentDeliveryMethod from './EnumTemplateContentDeliveryMethod';
import LinksHATEOAS from './LinksHATEOAS';
import TemplateContentCommon from './TemplateContentCommon';
import TemplateContentEmailAllOfFrom from './TemplateContentEmailAllOfFrom';
import TemplateContentEmailAllOfReplyTo from './TemplateContentEmailAllOfReplyTo';

/**
 * The TemplateContentEmail model module.
 * @module model/TemplateContentEmail
 * @version 2023-06-29
 */
class TemplateContentEmail {
    /**
     * Constructs a new <code>TemplateContentEmail</code>.
     * @alias module:model/TemplateContentEmail
     * @implements module:model/TemplateContentCommon
     * @param locale {String} A valid case-insensitive locale, complying with the ISO-639 language code and ISO-3166 country code standards: Two-character language code, for example, \"en\". Two-character language code followed by a two-character country code, separated by an underscore or dash, for example: \"en_GB\", \"en-GB\". Cannot be changed after it is initially set in `POST /environments/{{envID}}/templates/{{templateName}}/contents`. 
     * @param deliveryMethod {module:model/EnumTemplateContentDeliveryMethod} 
     * @param body {String} The email text. Email text cannot be larger than 100 kB. Email text can contain HTML. If supported, this can include variables.
     */
    constructor(locale, deliveryMethod, body) { 
        TemplateContentCommon.initialize(this, locale, deliveryMethod);
        TemplateContentEmail.initialize(this, locale, deliveryMethod, body);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, locale, deliveryMethod, body) { 
        obj['locale'] = locale;
        obj['deliveryMethod'] = deliveryMethod;
        obj['body'] = body;
    }

    /**
     * Constructs a <code>TemplateContentEmail</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TemplateContentEmail} obj Optional instance to populate.
     * @return {module:model/TemplateContentEmail} The populated <code>TemplateContentEmail</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TemplateContentEmail();
            TemplateContentCommon.constructFromObject(data, obj);

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'Boolean');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('deliveryMethod')) {
                obj['deliveryMethod'] = EnumTemplateContentDeliveryMethod.constructFromObject(data['deliveryMethod']);
            }
            if (data.hasOwnProperty('variant')) {
                obj['variant'] = ApiClient.convertToType(data['variant'], 'String');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('from')) {
                obj['from'] = TemplateContentEmailAllOfFrom.constructFromObject(data['from']);
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
            if (data.hasOwnProperty('replyTo')) {
                obj['replyTo'] = TemplateContentEmailAllOfReplyTo.constructFromObject(data['replyTo']);
            }
            if (data.hasOwnProperty('charset')) {
                obj['charset'] = ApiClient.convertToType(data['charset'], 'String');
            }
            if (data.hasOwnProperty('emailContentType')) {
                obj['emailContentType'] = ApiClient.convertToType(data['emailContentType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TemplateContentEmail</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TemplateContentEmail</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TemplateContentEmail.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['updatedAt'] && !(typeof data['updatedAt'] === 'string' || data['updatedAt'] instanceof String)) {
            throw new Error("Expected the field `updatedAt` to be a primitive type in the JSON string but got " + data['updatedAt']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['variant'] && !(typeof data['variant'] === 'string' || data['variant'] instanceof String)) {
            throw new Error("Expected the field `variant` to be a primitive type in the JSON string but got " + data['variant']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // validate the optional field `from`
        if (data['from']) { // data not null
          TemplateContentEmailAllOfFrom.validateJSON(data['from']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }
        // validate the optional field `replyTo`
        if (data['replyTo']) { // data not null
          TemplateContentEmailAllOfReplyTo.validateJSON(data['replyTo']);
        }
        // ensure the json data is a string
        if (data['charset'] && !(typeof data['charset'] === 'string' || data['charset'] instanceof String)) {
            throw new Error("Expected the field `charset` to be a primitive type in the JSON string but got " + data['charset']);
        }
        // ensure the json data is a string
        if (data['emailContentType'] && !(typeof data['emailContentType'] === 'string' || data['emailContentType'] instanceof String)) {
            throw new Error("Expected the field `emailContentType` to be a primitive type in the JSON string but got " + data['emailContentType']);
        }

        return true;
    }


}

TemplateContentEmail.RequiredProperties = ["locale", "deliveryMethod", "body"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
TemplateContentEmail.prototype['_links'] = undefined;

/**
 * The template id.
 * @member {String} id
 */
TemplateContentEmail.prototype['id'] = undefined;

/**
 * The time the resource was created.
 * @member {String} createdAt
 */
TemplateContentEmail.prototype['createdAt'] = undefined;

/**
 * The time the resource was last updated.
 * @member {String} updatedAt
 */
TemplateContentEmail.prototype['updatedAt'] = undefined;

/**
 * Specifies whether the template is a predefined default template.
 * @member {Boolean} default
 */
TemplateContentEmail.prototype['default'] = undefined;

/**
 * A valid case-insensitive locale, complying with the ISO-639 language code and ISO-3166 country code standards: Two-character language code, for example, \"en\". Two-character language code followed by a two-character country code, separated by an underscore or dash, for example: \"en_GB\", \"en-GB\". Cannot be changed after it is initially set in `POST /environments/{{envID}}/templates/{{templateName}}/contents`. 
 * @member {String} locale
 */
TemplateContentEmail.prototype['locale'] = undefined;

/**
 * @member {module:model/EnumTemplateContentDeliveryMethod} deliveryMethod
 */
TemplateContentEmail.prototype['deliveryMethod'] = undefined;

/**
 * Holds the unique user-defined name for each content variant that uses the same template + `deliveryMethod` + `locale` combination. This property is case insensitive and has a limit of 100 characters. For more information, see [Creating custom contents](https://apidocs.pingidentity.com/pingone/platform/v1/api/#notifications-templates-creating-custom-contents).
 * @member {String} variant
 */
TemplateContentEmail.prototype['variant'] = undefined;

/**
 * The email text. Email text cannot be larger than 100 kB. Email text can contain HTML. If supported, this can include variables.
 * @member {String} body
 */
TemplateContentEmail.prototype['body'] = undefined;

/**
 * @member {module:model/TemplateContentEmailAllOfFrom} from
 */
TemplateContentEmail.prototype['from'] = undefined;

/**
 * The email's subject line. Cannot exceed 256 characters. If supported, can include variables.
 * @member {String} subject
 */
TemplateContentEmail.prototype['subject'] = undefined;

/**
 * @member {module:model/TemplateContentEmailAllOfReplyTo} replyTo
 */
TemplateContentEmail.prototype['replyTo'] = undefined;

/**
 * If not specified, `UTF-8` is the default value.
 * @member {String} charset
 * @default 'UTF-8'
 */
TemplateContentEmail.prototype['charset'] = 'UTF-8';

/**
 * If not specified, `text/html` is the default value.
 * @member {String} emailContentType
 * @default 'text/html'
 */
TemplateContentEmail.prototype['emailContentType'] = 'text/html';


// Implement TemplateContentCommon interface:
/**
 * @member {module:model/LinksHATEOAS} _links
 */
TemplateContentCommon.prototype['_links'] = undefined;
/**
 * The template id.
 * @member {String} id
 */
TemplateContentCommon.prototype['id'] = undefined;
/**
 * The time the resource was created.
 * @member {String} createdAt
 */
TemplateContentCommon.prototype['createdAt'] = undefined;
/**
 * The time the resource was last updated.
 * @member {String} updatedAt
 */
TemplateContentCommon.prototype['updatedAt'] = undefined;
/**
 * Specifies whether the template is a predefined default template.
 * @member {Boolean} default
 */
TemplateContentCommon.prototype['default'] = undefined;
/**
 * A valid case-insensitive locale, complying with the ISO-639 language code and ISO-3166 country code standards: Two-character language code, for example, \"en\". Two-character language code followed by a two-character country code, separated by an underscore or dash, for example: \"en_GB\", \"en-GB\". Cannot be changed after it is initially set in `POST /environments/{{envID}}/templates/{{templateName}}/contents`. 
 * @member {String} locale
 */
TemplateContentCommon.prototype['locale'] = undefined;
/**
 * @member {module:model/EnumTemplateContentDeliveryMethod} deliveryMethod
 */
TemplateContentCommon.prototype['deliveryMethod'] = undefined;
/**
 * Holds the unique user-defined name for each content variant that uses the same template + `deliveryMethod` + `locale` combination. This property is case insensitive and has a limit of 100 characters. For more information, see [Creating custom contents](https://apidocs.pingidentity.com/pingone/platform/v1/api/#notifications-templates-creating-custom-contents).
 * @member {String} variant
 */
TemplateContentCommon.prototype['variant'] = undefined;




export default TemplateContentEmail;

