/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SignOnPolicyActionCommonConditionAggregate from './SignOnPolicyActionCommonConditionAggregate';
import SignOnPolicyActionCommonConditionAnd from './SignOnPolicyActionCommonConditionAnd';
import SignOnPolicyActionCommonConditionEqualsEquals from './SignOnPolicyActionCommonConditionEqualsEquals';
import SignOnPolicyActionCommonConditionIPRiskIpRisk from './SignOnPolicyActionCommonConditionIPRiskIpRisk';
import SignOnPolicyActionCommonConditionNot from './SignOnPolicyActionCommonConditionNot';
import SignOnPolicyActionCommonConditionOr from './SignOnPolicyActionCommonConditionOr';

/**
 * The SignOnPolicyActionCommonConditionOrOrInner model module.
 * @module model/SignOnPolicyActionCommonConditionOrOrInner
 * @version 2023-06-29
 */
class SignOnPolicyActionCommonConditionOrOrInner {
    /**
     * Constructs a new <code>SignOnPolicyActionCommonConditionOrOrInner</code>.
     * @alias module:model/SignOnPolicyActionCommonConditionOrOrInner
     * @param {(module:model/SignOnPolicyActionCommonConditionAggregate|module:model/SignOnPolicyActionCommonConditionAnd|module:model/SignOnPolicyActionCommonConditionNot|module:model/SignOnPolicyActionCommonConditionOr)} instance The actual instance to initialize SignOnPolicyActionCommonConditionOrOrInner.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "SignOnPolicyActionCommonConditionAnd") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SignOnPolicyActionCommonConditionAnd.validateJSON(instance); // throw an exception if no match
                // create SignOnPolicyActionCommonConditionAnd from JS object
                this.actualInstance = SignOnPolicyActionCommonConditionAnd.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SignOnPolicyActionCommonConditionAnd
            errorMessages.push("Failed to construct SignOnPolicyActionCommonConditionAnd: " + err)
        }

        try {
            if (typeof instance === "SignOnPolicyActionCommonConditionOr") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SignOnPolicyActionCommonConditionOr.validateJSON(instance); // throw an exception if no match
                // create SignOnPolicyActionCommonConditionOr from JS object
                this.actualInstance = SignOnPolicyActionCommonConditionOr.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SignOnPolicyActionCommonConditionOr
            errorMessages.push("Failed to construct SignOnPolicyActionCommonConditionOr: " + err)
        }

        try {
            if (typeof instance === "SignOnPolicyActionCommonConditionNot") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SignOnPolicyActionCommonConditionNot.validateJSON(instance); // throw an exception if no match
                // create SignOnPolicyActionCommonConditionNot from JS object
                this.actualInstance = SignOnPolicyActionCommonConditionNot.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SignOnPolicyActionCommonConditionNot
            errorMessages.push("Failed to construct SignOnPolicyActionCommonConditionNot: " + err)
        }

        try {
            if (typeof instance === "SignOnPolicyActionCommonConditionAggregate") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                SignOnPolicyActionCommonConditionAggregate.validateJSON(instance); // throw an exception if no match
                // create SignOnPolicyActionCommonConditionAggregate from JS object
                this.actualInstance = SignOnPolicyActionCommonConditionAggregate.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into SignOnPolicyActionCommonConditionAggregate
            errorMessages.push("Failed to construct SignOnPolicyActionCommonConditionAggregate: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `SignOnPolicyActionCommonConditionOrOrInner` with oneOf schemas SignOnPolicyActionCommonConditionAggregate, SignOnPolicyActionCommonConditionAnd, SignOnPolicyActionCommonConditionNot, SignOnPolicyActionCommonConditionOr. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `SignOnPolicyActionCommonConditionOrOrInner` with oneOf schemas SignOnPolicyActionCommonConditionAggregate, SignOnPolicyActionCommonConditionAnd, SignOnPolicyActionCommonConditionNot, SignOnPolicyActionCommonConditionOr. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>SignOnPolicyActionCommonConditionOrOrInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SignOnPolicyActionCommonConditionOrOrInner} obj Optional instance to populate.
     * @return {module:model/SignOnPolicyActionCommonConditionOrOrInner} The populated <code>SignOnPolicyActionCommonConditionOrOrInner</code> instance.
     */
    static constructFromObject(data, obj) {
        return new SignOnPolicyActionCommonConditionOrOrInner(data);
    }

    /**
     * Gets the actual instance, which can be <code>SignOnPolicyActionCommonConditionAggregate</code>, <code>SignOnPolicyActionCommonConditionAnd</code>, <code>SignOnPolicyActionCommonConditionNot</code>, <code>SignOnPolicyActionCommonConditionOr</code>.
     * @return {(module:model/SignOnPolicyActionCommonConditionAggregate|module:model/SignOnPolicyActionCommonConditionAnd|module:model/SignOnPolicyActionCommonConditionNot|module:model/SignOnPolicyActionCommonConditionOr)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>SignOnPolicyActionCommonConditionAggregate</code>, <code>SignOnPolicyActionCommonConditionAnd</code>, <code>SignOnPolicyActionCommonConditionNot</code>, <code>SignOnPolicyActionCommonConditionOr</code>.
     * @param {(module:model/SignOnPolicyActionCommonConditionAggregate|module:model/SignOnPolicyActionCommonConditionAnd|module:model/SignOnPolicyActionCommonConditionNot|module:model/SignOnPolicyActionCommonConditionOr)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = SignOnPolicyActionCommonConditionOrOrInner.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of SignOnPolicyActionCommonConditionOrOrInner from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/SignOnPolicyActionCommonConditionOrOrInner} An instance of SignOnPolicyActionCommonConditionOrOrInner.
     */
    static fromJSON = function(json_string){
        return SignOnPolicyActionCommonConditionOrOrInner.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {Array.<module:model/SignOnPolicyActionCommonConditionOrOrInner>} and
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['and'] = undefined;

/**
 * @member {Array.<module:model/SignOnPolicyActionCommonConditionOrOrInner>} or
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['or'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionCommonConditionAggregate} not
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['not'] = undefined;

/**
 * An integer that specifies the maximum number of seconds to wait since the last sign on before prompting for a new sign-on action.
 * @member {Number} greater
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['greater'] = undefined;

/**
 * A string representing a condition variable.  For more information, see documenation at https://apidocs.pingidentity.com/pingone/platform/v1/api/#sign-on-policy-actions .
 * @member {String} secondsSince
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['secondsSince'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionCommonConditionIPRiskIpRisk} ipRisk
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['ipRisk'] = undefined;

/**
 * @member {String} valid
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['valid'] = undefined;

/**
 * @member {String} contains
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['contains'] = undefined;

/**
 * @member {Array.<String>} ipRange
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['ipRange'] = undefined;

/**
 * @member {String} geoVelocity
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['geoVelocity'] = undefined;

/**
 * @member {Array.<String>} anonymousNetwork
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['anonymousNetwork'] = undefined;

/**
 * @member {String} value
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['value'] = undefined;

/**
 * @member {module:model/SignOnPolicyActionCommonConditionEqualsEquals} equals
 */
SignOnPolicyActionCommonConditionOrOrInner.prototype['equals'] = undefined;


SignOnPolicyActionCommonConditionOrOrInner.OneOf = ["SignOnPolicyActionCommonConditionAggregate", "SignOnPolicyActionCommonConditionAnd", "SignOnPolicyActionCommonConditionNot", "SignOnPolicyActionCommonConditionOr"];

export default SignOnPolicyActionCommonConditionOrOrInner;

