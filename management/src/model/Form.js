/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFormCategory from './EnumFormCategory';
import EnumFormFieldType from './EnumFormFieldType';
import EnumFormTranslationMethod from './EnumFormTranslationMethod';
import FormComponents from './FormComponents';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';

/**
 * The Form model module.
 * @module model/Form
 * @version 2023-06-29
 */
class Form {
    /**
     * Constructs a new <code>Form</code>.
     * @alias module:model/Form
     * @param name {String} A string that specifies the form name, which must be provided and must be unique within an environment.
     * @param category {module:model/EnumFormCategory} 
     * @param components {module:model/FormComponents} 
     * @param markOptional {Boolean} A boolean that specifies whether optional fields are highlighted in the rendered form.
     * @param markRequired {Boolean} A boolean that specifies whether required fields are highlighted in the rendered form.
     */
    constructor(name, category, components, markOptional, markRequired) { 
        
        Form.initialize(this, name, category, components, markOptional, markRequired);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, category, components, markOptional, markRequired) { 
        obj['name'] = name;
        obj['category'] = category;
        obj['components'] = components;
        obj['markOptional'] = markOptional;
        obj['markRequired'] = markRequired;
    }

    /**
     * Constructs a <code>Form</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Form} obj Optional instance to populate.
     * @return {module:model/Form} The populated <code>Form</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Form();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = EnumFormCategory.constructFromObject(data['category']);
            }
            if (data.hasOwnProperty('components')) {
                obj['components'] = FormComponents.constructFromObject(data['components']);
            }
            if (data.hasOwnProperty('cols')) {
                obj['cols'] = ApiClient.convertToType(data['cols'], 'Number');
            }
            if (data.hasOwnProperty('markOptional')) {
                obj['markOptional'] = ApiClient.convertToType(data['markOptional'], 'Boolean');
            }
            if (data.hasOwnProperty('markRequired')) {
                obj['markRequired'] = ApiClient.convertToType(data['markRequired'], 'Boolean');
            }
            if (data.hasOwnProperty('translationMethod')) {
                obj['translationMethod'] = EnumFormTranslationMethod.constructFromObject(data['translationMethod']);
            }
            if (data.hasOwnProperty('fieldTypes')) {
                obj['fieldTypes'] = ApiClient.convertToType(data['fieldTypes'], [EnumFormFieldType]);
            }
            if (data.hasOwnProperty('languageBundle')) {
                obj['languageBundle'] = ApiClient.convertToType(data['languageBundle'], {'String': 'String'});
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('modified')) {
                obj['modified'] = ApiClient.convertToType(data['modified'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Form</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Form</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Form.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          ObjectEnvironment.validateJSON(data['environment']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `components`
        if (data['components']) { // data not null
          FormComponents.validateJSON(data['components']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fieldTypes'])) {
            throw new Error("Expected the field `fieldTypes` to be an array in the JSON data but got " + data['fieldTypes']);
        }

        return true;
    }


}

Form.RequiredProperties = ["name", "category", "components", "markOptional", "markRequired"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
Form.prototype['_links'] = undefined;

/**
 * A string that specifies the resourceâ€™s unique identifier.
 * @member {String} id
 */
Form.prototype['id'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
Form.prototype['environment'] = undefined;

/**
 * A string that specifies the form name, which must be provided and must be unique within an environment.
 * @member {String} name
 */
Form.prototype['name'] = undefined;

/**
 * A string that specifies the description of the form.
 * @member {String} description
 */
Form.prototype['description'] = undefined;

/**
 * @member {module:model/EnumFormCategory} category
 */
Form.prototype['category'] = undefined;

/**
 * @member {module:model/FormComponents} components
 */
Form.prototype['components'] = undefined;

/**
 * An integer that specifies the number of columns in the form (min = 1; max = 4).
 * @member {Number} cols
 */
Form.prototype['cols'] = undefined;

/**
 * A boolean that specifies whether optional fields are highlighted in the rendered form.
 * @member {Boolean} markOptional
 */
Form.prototype['markOptional'] = undefined;

/**
 * A boolean that specifies whether required fields are highlighted in the rendered form.
 * @member {Boolean} markRequired
 */
Form.prototype['markRequired'] = undefined;

/**
 * @member {module:model/EnumFormTranslationMethod} translationMethod
 */
Form.prototype['translationMethod'] = undefined;

/**
 * A read-only object that specifies the list of the FormField types in the form.
 * @member {Array.<module:model/EnumFormFieldType>} fieldTypes
 */
Form.prototype['fieldTypes'] = undefined;

/**
 * An object that provides a map of i18n keys to their translations. This object includes both the keys and their default translations. The PingOne language management service finds this object, and creates the new keys for translation for this form.
 * @member {Object.<String, String>} languageBundle
 */
Form.prototype['languageBundle'] = undefined;

/**
 * The date the resouce was created (ISO-8061 format).
 * @member {Date} created
 */
Form.prototype['created'] = undefined;

/**
 * The date the resouce was modified (ISO-8061 format).
 * @member {Date} modified
 */
Form.prototype['modified'] = undefined;






export default Form;

