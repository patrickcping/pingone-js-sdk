/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumNotificationsPolicyQuotaDeliveryMethods from './EnumNotificationsPolicyQuotaDeliveryMethods';
import EnumNotificationsPolicyQuotaItemType from './EnumNotificationsPolicyQuotaItemType';

/**
 * The NotificationsPolicyQuotasInner model module.
 * @module model/NotificationsPolicyQuotasInner
 * @version 2023-06-29
 */
class NotificationsPolicyQuotasInner {
    /**
     * Constructs a new <code>NotificationsPolicyQuotasInner</code>.
     * @alias module:model/NotificationsPolicyQuotasInner
     * @param type {module:model/EnumNotificationsPolicyQuotaItemType} 
     * @param deliveryMethods {Array.<module:model/EnumNotificationsPolicyQuotaDeliveryMethods>} The delivery methods for which the limit is being defined. The value can be `Email` or `SMS,Voice`. When you use the `SMS`, `Voice` option, it means that the combined total of SMS and voice notifications must be below the limit defined. If you are limiting both email and SMS/voice, each limit should be represented by a different object in the `quotas` array, for example: `\"quotas\": [{\"type\": \"USER\",\"deliveryMethods\": [\"SMS\",\"Voice\"],\"total\": 30},{\"type\": \"USER\",\"deliveryMethods\": [\"Email\"],\"total\": 30}]` 
     */
    constructor(type, deliveryMethods) { 
        
        NotificationsPolicyQuotasInner.initialize(this, type, deliveryMethods);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, deliveryMethods) { 
        obj['type'] = type;
        obj['deliveryMethods'] = deliveryMethods;
    }

    /**
     * Constructs a <code>NotificationsPolicyQuotasInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationsPolicyQuotasInner} obj Optional instance to populate.
     * @return {module:model/NotificationsPolicyQuotasInner} The populated <code>NotificationsPolicyQuotasInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationsPolicyQuotasInner();

            if (data.hasOwnProperty('type')) {
                obj['type'] = EnumNotificationsPolicyQuotaItemType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('deliveryMethods')) {
                obj['deliveryMethods'] = ApiClient.convertToType(data['deliveryMethods'], [EnumNotificationsPolicyQuotaDeliveryMethods]);
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('claimed')) {
                obj['claimed'] = ApiClient.convertToType(data['claimed'], 'Number');
            }
            if (data.hasOwnProperty('unclaimed')) {
                obj['unclaimed'] = ApiClient.convertToType(data['unclaimed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationsPolicyQuotasInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationsPolicyQuotasInner</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationsPolicyQuotasInner.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deliveryMethods'])) {
            throw new Error("Expected the field `deliveryMethods` to be an array in the JSON data but got " + data['deliveryMethods']);
        }

        return true;
    }


}

NotificationsPolicyQuotasInner.RequiredProperties = ["type", "deliveryMethods"];

/**
 * @member {module:model/EnumNotificationsPolicyQuotaItemType} type
 */
NotificationsPolicyQuotasInner.prototype['type'] = undefined;

/**
 * The delivery methods for which the limit is being defined. The value can be `Email` or `SMS,Voice`. When you use the `SMS`, `Voice` option, it means that the combined total of SMS and voice notifications must be below the limit defined. If you are limiting both email and SMS/voice, each limit should be represented by a different object in the `quotas` array, for example: `\"quotas\": [{\"type\": \"USER\",\"deliveryMethods\": [\"SMS\",\"Voice\"],\"total\": 30},{\"type\": \"USER\",\"deliveryMethods\": [\"Email\"],\"total\": 30}]` 
 * @member {Array.<module:model/EnumNotificationsPolicyQuotaDeliveryMethods>} deliveryMethods
 */
NotificationsPolicyQuotasInner.prototype['deliveryMethods'] = undefined;

/**
 * The maximum number of notifications allowed per day.
 * @member {Number} total
 */
NotificationsPolicyQuotasInner.prototype['total'] = undefined;

/**
 * The maximum number of notifications that can be received and responded to each day. Used in conjunction with unclaimed in place of the single field total.
 * @member {Number} claimed
 */
NotificationsPolicyQuotasInner.prototype['claimed'] = undefined;

/**
 * The maximum number of notifications that can be received and not responded to each day. Used in conjunction with claimed in place of the single field total.
 * @member {Number} unclaimed
 */
NotificationsPolicyQuotasInner.prototype['unclaimed'] = undefined;






export default NotificationsPolicyQuotasInner;

