/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumSubscriptionFilterIncludedTags from './EnumSubscriptionFilterIncludedTags';
import SubscriptionFilterOptionsIncludedApplicationsInner from './SubscriptionFilterOptionsIncludedApplicationsInner';

/**
 * The SubscriptionFilterOptions model module.
 * @module model/SubscriptionFilterOptions
 * @version 2023-06-29
 */
class SubscriptionFilterOptions {
    /**
     * Constructs a new <code>SubscriptionFilterOptions</code>.
     * @alias module:model/SubscriptionFilterOptions
     * @param includedActionTypes {Array.<String>} A non-empty array that specifies the list of action types that should be matched for the subscription. This is a required property.
     */
    constructor(includedActionTypes) { 
        
        SubscriptionFilterOptions.initialize(this, includedActionTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, includedActionTypes) { 
        obj['includedActionTypes'] = includedActionTypes;
    }

    /**
     * Constructs a <code>SubscriptionFilterOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SubscriptionFilterOptions} obj Optional instance to populate.
     * @return {module:model/SubscriptionFilterOptions} The populated <code>SubscriptionFilterOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SubscriptionFilterOptions();

            if (data.hasOwnProperty('includedActionTypes')) {
                obj['includedActionTypes'] = ApiClient.convertToType(data['includedActionTypes'], ['String']);
            }
            if (data.hasOwnProperty('includedApplications')) {
                obj['includedApplications'] = ApiClient.convertToType(data['includedApplications'], [SubscriptionFilterOptionsIncludedApplicationsInner]);
            }
            if (data.hasOwnProperty('includedPopulations')) {
                obj['includedPopulations'] = ApiClient.convertToType(data['includedPopulations'], [SubscriptionFilterOptionsIncludedApplicationsInner]);
            }
            if (data.hasOwnProperty('includedTags')) {
                obj['includedTags'] = ApiClient.convertToType(data['includedTags'], [EnumSubscriptionFilterIncludedTags]);
            }
            if (data.hasOwnProperty('ipAddressExposed')) {
                obj['ipAddressExposed'] = ApiClient.convertToType(data['ipAddressExposed'], 'Boolean');
            }
            if (data.hasOwnProperty('userAgentExposed')) {
                obj['userAgentExposed'] = ApiClient.convertToType(data['userAgentExposed'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SubscriptionFilterOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SubscriptionFilterOptions</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SubscriptionFilterOptions.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedActionTypes'])) {
            throw new Error("Expected the field `includedActionTypes` to be an array in the JSON data but got " + data['includedActionTypes']);
        }
        if (data['includedApplications']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['includedApplications'])) {
                throw new Error("Expected the field `includedApplications` to be an array in the JSON data but got " + data['includedApplications']);
            }
            // validate the optional field `includedApplications` (array)
            for (const item of data['includedApplications']) {
                SubscriptionFilterOptionsIncludedApplicationsInner.validateJSON(item);
            };
        }
        if (data['includedPopulations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['includedPopulations'])) {
                throw new Error("Expected the field `includedPopulations` to be an array in the JSON data but got " + data['includedPopulations']);
            }
            // validate the optional field `includedPopulations` (array)
            for (const item of data['includedPopulations']) {
                SubscriptionFilterOptionsIncludedApplicationsInner.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['includedTags'])) {
            throw new Error("Expected the field `includedTags` to be an array in the JSON data but got " + data['includedTags']);
        }

        return true;
    }


}

SubscriptionFilterOptions.RequiredProperties = ["includedActionTypes"];

/**
 * A non-empty array that specifies the list of action types that should be matched for the subscription. This is a required property.
 * @member {Array.<String>} includedActionTypes
 */
SubscriptionFilterOptions.prototype['includedActionTypes'] = undefined;

/**
 * An array that specifies the list of applications (by ID) whose events are monitored by the subscription (maximum of 10 IDs in the array). This is an optional property. If a list of applications is not provided, events are monitored for all applications in the environment.
 * @member {Array.<module:model/SubscriptionFilterOptionsIncludedApplicationsInner>} includedApplications
 */
SubscriptionFilterOptions.prototype['includedApplications'] = undefined;

/**
 * An array that specifies the list of populations (by ID) whose events are monitored by the subscription (maximum of 10 IDs in the array). This property matches events for users in the specified populations, as opposed to events generated in which the user in one of the populations is the actor. This is an optional property.
 * @member {Array.<module:model/SubscriptionFilterOptionsIncludedApplicationsInner>} includedPopulations
 */
SubscriptionFilterOptions.prototype['includedPopulations'] = undefined;

/**
 * An array of tags that events must have to be monitored by the subscription. If tags are not specified, all events are monitored. Currently, the available tags are `adminIdentityEvent`. Identifies the event as the action of an administrator on other administrators.
 * @member {Array.<module:model/EnumSubscriptionFilterIncludedTags>} includedTags
 */
SubscriptionFilterOptions.prototype['includedTags'] = undefined;

/**
 * Whether the IP address of an actor should be present in the `source` section of the event.
 * @member {Boolean} ipAddressExposed
 * @default false
 */
SubscriptionFilterOptions.prototype['ipAddressExposed'] = false;

/**
 * Whether the User-Agent HTTP header of an event should be present in the `source` section of the event.
 * @member {Boolean} userAgentExposed
 * @default false
 */
SubscriptionFilterOptions.prototype['userAgentExposed'] = false;






export default SubscriptionFilterOptions;

