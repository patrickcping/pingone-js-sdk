/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AgreementLanguageAgreement from './AgreementLanguageAgreement';
import AgreementLanguageRevisionLanguage from './AgreementLanguageRevisionLanguage';
import EnumAgreementRevisionContentType from './EnumAgreementRevisionContentType';
import LinksHATEOAS from './LinksHATEOAS';

/**
 * The AgreementLanguageRevision model module.
 * @module model/AgreementLanguageRevision
 * @version 2023-06-29
 */
class AgreementLanguageRevision {
    /**
     * Constructs a new <code>AgreementLanguageRevision</code>.
     * @alias module:model/AgreementLanguageRevision
     * @param contentType {module:model/EnumAgreementRevisionContentType} 
     * @param effectiveAt {Date} A date that specifies the start date that the revision is presented to users. This property value can be modified only if the current value is a date that has not already passed. The effective date must be unique for each language agreement, and the property value can be the present date or a future date only.
     * @param requireReconsent {Boolean} A boolean that specifies whether the user is required to provide consent to the language revision after it becomes effective.
     * @param text {String} An immutable string that specifies text or HTML for the revision. This attribute is supported in POST requests only. For more information, see contentType.
     */
    constructor(contentType, effectiveAt, requireReconsent, text) { 
        
        AgreementLanguageRevision.initialize(this, contentType, effectiveAt, requireReconsent, text);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contentType, effectiveAt, requireReconsent, text) { 
        obj['contentType'] = contentType;
        obj['effectiveAt'] = effectiveAt;
        obj['requireReconsent'] = requireReconsent;
        obj['text'] = text;
    }

    /**
     * Constructs a <code>AgreementLanguageRevision</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AgreementLanguageRevision} obj Optional instance to populate.
     * @return {module:model/AgreementLanguageRevision} The populated <code>AgreementLanguageRevision</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AgreementLanguageRevision();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('agreement')) {
                obj['agreement'] = AgreementLanguageAgreement.constructFromObject(data['agreement']);
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = EnumAgreementRevisionContentType.constructFromObject(data['contentType']);
            }
            if (data.hasOwnProperty('effectiveAt')) {
                obj['effectiveAt'] = ApiClient.convertToType(data['effectiveAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = AgreementLanguageRevisionLanguage.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('notValidAfter')) {
                obj['notValidAfter'] = ApiClient.convertToType(data['notValidAfter'], 'Date');
            }
            if (data.hasOwnProperty('requireReconsent')) {
                obj['requireReconsent'] = ApiClient.convertToType(data['requireReconsent'], 'Boolean');
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AgreementLanguageRevision</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AgreementLanguageRevision</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AgreementLanguageRevision.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `agreement`
        if (data['agreement']) { // data not null
          AgreementLanguageAgreement.validateJSON(data['agreement']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `language`
        if (data['language']) { // data not null
          AgreementLanguageRevisionLanguage.validateJSON(data['language']);
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}

AgreementLanguageRevision.RequiredProperties = ["contentType", "effectiveAt", "requireReconsent", "text"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
AgreementLanguageRevision.prototype['_links'] = undefined;

/**
 * @member {module:model/AgreementLanguageAgreement} agreement
 */
AgreementLanguageRevision.prototype['agreement'] = undefined;

/**
 * @member {module:model/EnumAgreementRevisionContentType} contentType
 */
AgreementLanguageRevision.prototype['contentType'] = undefined;

/**
 * A date that specifies the start date that the revision is presented to users. This property value can be modified only if the current value is a date that has not already passed. The effective date must be unique for each language agreement, and the property value can be the present date or a future date only.
 * @member {Date} effectiveAt
 */
AgreementLanguageRevision.prototype['effectiveAt'] = undefined;

/**
 * A read-only string that specifies the revision ID.
 * @member {String} id
 */
AgreementLanguageRevision.prototype['id'] = undefined;

/**
 * @member {module:model/AgreementLanguageRevisionLanguage} language
 */
AgreementLanguageRevision.prototype['language'] = undefined;

/**
 * A date that specifies whether the revision is still valid in the context of all revisions for a language. This property is calculated dynamically at read time, taking into consideration the agreement language, the language enabled property, and the agreement enabled property. When a new revision is added, the notValidAfter property values for all other previous revisions might be impacted. For example, if a new revision becomes effective and it forces reconsent, then all older revisions are no longer valid.
 * @member {Date} notValidAfter
 */
AgreementLanguageRevision.prototype['notValidAfter'] = undefined;

/**
 * A boolean that specifies whether the user is required to provide consent to the language revision after it becomes effective.
 * @member {Boolean} requireReconsent
 */
AgreementLanguageRevision.prototype['requireReconsent'] = undefined;

/**
 * An immutable string that specifies text or HTML for the revision. This attribute is supported in POST requests only. For more information, see contentType.
 * @member {String} text
 */
AgreementLanguageRevision.prototype['text'] = undefined;






export default AgreementLanguageRevision;

