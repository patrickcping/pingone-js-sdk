/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumNotificationsPolicyCountryLimitDeliveryMethod from './EnumNotificationsPolicyCountryLimitDeliveryMethod';
import EnumNotificationsPolicyCountryLimitType from './EnumNotificationsPolicyCountryLimitType';

/**
 * The NotificationsPolicyCountryLimit model module.
 * @module model/NotificationsPolicyCountryLimit
 * @version 2023-06-29
 */
class NotificationsPolicyCountryLimit {
    /**
     * Constructs a new <code>NotificationsPolicyCountryLimit</code>.
     * You can use the &#x60;countryLimit&#x60; object to limit the countries where you can send SMS and voice notifications.
     * @alias module:model/NotificationsPolicyCountryLimit
     * @param type {module:model/EnumNotificationsPolicyCountryLimitType} 
     * @param countries {Array.<String>} The countries where the specified methods should be allowed or denied. Use the two-letter country codes from ISO 3166-1.
     */
    constructor(type, countries) { 
        
        NotificationsPolicyCountryLimit.initialize(this, type, countries);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, countries) { 
        obj['type'] = type;
        obj['countries'] = countries;
    }

    /**
     * Constructs a <code>NotificationsPolicyCountryLimit</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NotificationsPolicyCountryLimit} obj Optional instance to populate.
     * @return {module:model/NotificationsPolicyCountryLimit} The populated <code>NotificationsPolicyCountryLimit</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NotificationsPolicyCountryLimit();

            if (data.hasOwnProperty('type')) {
                obj['type'] = EnumNotificationsPolicyCountryLimitType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('deliveryMethods')) {
                obj['deliveryMethods'] = ApiClient.convertToType(data['deliveryMethods'], [EnumNotificationsPolicyCountryLimitDeliveryMethod]);
            }
            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NotificationsPolicyCountryLimit</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NotificationsPolicyCountryLimit</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of NotificationsPolicyCountryLimit.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deliveryMethods'])) {
            throw new Error("Expected the field `deliveryMethods` to be an array in the JSON data but got " + data['deliveryMethods']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['countries'])) {
            throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
        }

        return true;
    }


}

NotificationsPolicyCountryLimit.RequiredProperties = ["type", "countries"];

/**
 * @member {module:model/EnumNotificationsPolicyCountryLimitType} type
 */
NotificationsPolicyCountryLimit.prototype['type'] = undefined;

/**
 * The delivery methods that the defined limitation should be applied to. Content of the array can be `SMS`, `Voice`, or both. If the parameter is not provided, the default is `SMS` and `Voice`.
 * @member {Array.<module:model/EnumNotificationsPolicyCountryLimitDeliveryMethod>} deliveryMethods
 */
NotificationsPolicyCountryLimit.prototype['deliveryMethods'] = undefined;

/**
 * The countries where the specified methods should be allowed or denied. Use the two-letter country codes from ISO 3166-1.
 * @member {Array.<String>} countries
 */
NotificationsPolicyCountryLimit.prototype['countries'] = undefined;






export default NotificationsPolicyCountryLimit;

