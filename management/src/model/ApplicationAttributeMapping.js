/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApplicationAttributeMappingApplication from './ApplicationAttributeMappingApplication';
import EnumAttributeMappingType from './EnumAttributeMappingType';
import LinksHATEOAS from './LinksHATEOAS';

/**
 * The ApplicationAttributeMapping model module.
 * @module model/ApplicationAttributeMapping
 * @version 2023-06-29
 */
class ApplicationAttributeMapping {
    /**
     * Constructs a new <code>ApplicationAttributeMapping</code>.
     * @alias module:model/ApplicationAttributeMapping
     * @param name {String} A string that specifies the name of attribute and must be unique within an application. For SAML applications, the samlAssertion.subject name is a reserved case-insensitive name which indicates the mapping to be used for the subject in an assertion. For OpenID Connect applications, the following names are reserved and cannot be used acr, amr, at_hash, aud, auth_time, azp, client_id, exp, iat, iss, jti, nbf, nonce, org, scope, sid, sub  This is a required property.
     * @param required {Boolean} A boolean to specify whether a mapping value is required for this attribute. If true, a value must be set and a non-empty value must be available in the SAML assertion or ID token.
     * @param value {String} A string that specifies the string constants or expression for mapping the attribute path against a specific source. The expression format is ${<source>.<attribute_path>}. The only supported source is user (for example, ${user.id}). This is a required property.
     */
    constructor(name, required, value) { 
        
        ApplicationAttributeMapping.initialize(this, name, required, value);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, required, value) { 
        obj['name'] = name;
        obj['required'] = required;
        obj['value'] = value;
    }

    /**
     * Constructs a <code>ApplicationAttributeMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ApplicationAttributeMapping} obj Optional instance to populate.
     * @return {module:model/ApplicationAttributeMapping} The populated <code>ApplicationAttributeMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ApplicationAttributeMapping();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('application')) {
                obj['application'] = ApplicationAttributeMappingApplication.constructFromObject(data['application']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('mappingType')) {
                obj['mappingType'] = EnumAttributeMappingType.constructFromObject(data['mappingType']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
            if (data.hasOwnProperty('nameFormat')) {
                obj['nameFormat'] = ApiClient.convertToType(data['nameFormat'], 'String');
            }
            if (data.hasOwnProperty('idToken')) {
                obj['idToken'] = ApiClient.convertToType(data['idToken'], 'Boolean');
            }
            if (data.hasOwnProperty('userInfo')) {
                obj['userInfo'] = ApiClient.convertToType(data['userInfo'], 'Boolean');
            }
            if (data.hasOwnProperty('oidcScopes')) {
                obj['oidcScopes'] = ApiClient.convertToType(data['oidcScopes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ApplicationAttributeMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ApplicationAttributeMapping</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ApplicationAttributeMapping.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `application`
        if (data['application']) { // data not null
          ApplicationAttributeMappingApplication.validateJSON(data['application']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }
        // ensure the json data is a string
        if (data['nameFormat'] && !(typeof data['nameFormat'] === 'string' || data['nameFormat'] instanceof String)) {
            throw new Error("Expected the field `nameFormat` to be a primitive type in the JSON string but got " + data['nameFormat']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['oidcScopes'])) {
            throw new Error("Expected the field `oidcScopes` to be an array in the JSON data but got " + data['oidcScopes']);
        }

        return true;
    }


}

ApplicationAttributeMapping.RequiredProperties = ["name", "required", "value"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
ApplicationAttributeMapping.prototype['_links'] = undefined;

/**
 * A string that specifies the application ID.
 * @member {String} id
 */
ApplicationAttributeMapping.prototype['id'] = undefined;

/**
 * @member {module:model/ApplicationAttributeMappingApplication} application
 */
ApplicationAttributeMapping.prototype['application'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} createdAt
 */
ApplicationAttributeMapping.prototype['createdAt'] = undefined;

/**
 * @member {module:model/EnumAttributeMappingType} mappingType
 */
ApplicationAttributeMapping.prototype['mappingType'] = undefined;

/**
 * A string that specifies the name of attribute and must be unique within an application. For SAML applications, the samlAssertion.subject name is a reserved case-insensitive name which indicates the mapping to be used for the subject in an assertion. For OpenID Connect applications, the following names are reserved and cannot be used acr, amr, at_hash, aud, auth_time, azp, client_id, exp, iat, iss, jti, nbf, nonce, org, scope, sid, sub  This is a required property.
 * @member {String} name
 */
ApplicationAttributeMapping.prototype['name'] = undefined;

/**
 * A boolean to specify whether a mapping value is required for this attribute. If true, a value must be set and a non-empty value must be available in the SAML assertion or ID token.
 * @member {Boolean} required
 */
ApplicationAttributeMapping.prototype['required'] = undefined;

/**
 * The time the resource was updated.
 * @member {Date} updatedAt
 */
ApplicationAttributeMapping.prototype['updatedAt'] = undefined;

/**
 * A string that specifies the string constants or expression for mapping the attribute path against a specific source. The expression format is ${<source>.<attribute_path>}. The only supported source is user (for example, ${user.id}). This is a required property.
 * @member {String} value
 */
ApplicationAttributeMapping.prototype['value'] = undefined;

/**
 * A URI reference representing the classification of the attribute. Helps the service provider interpret the attribute format.
 * @member {String} nameFormat
 */
ApplicationAttributeMapping.prototype['nameFormat'] = undefined;

/**
 * Whether the attribute mapping should be available in the ID Token. This property is applicable only when the application's `protocol` property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the `idToken` and `userInfo` properties cannot both be set to `false`. At least one of these properties must have a value of true.
 * @member {Boolean} idToken
 * @default true
 */
ApplicationAttributeMapping.prototype['idToken'] = true;

/**
 * Whether the attribute mapping should be available through the `/as/userinfo` endpoint. This property is applicable only when the application's protocol property is `OPENID_CONNECT`. If omitted, the default is `true`. Note that the `idToken` and `userInfo` properties cannot both be set to `false`. At least one of these properties must have a value of `true`.
 * @member {Boolean} userInfo
 * @default true
 */
ApplicationAttributeMapping.prototype['userInfo'] = true;

/**
 * OIDC resource scope IDs that this attribute mapping is available for exclusively. This setting overrides any global OIDC resource scopes that contain an attribute mapping with the same name. The list can contain only scope IDs that have been granted for the application through the `/grants` endpoint. A null value is accepted for backwards compatibility. However, an empty set is invalid, and one scope ID is expected. If null, the response includes this mapping in the `openid` scope.
 * @member {Array.<String>} oidcScopes
 */
ApplicationAttributeMapping.prototype['oidcScopes'] = undefined;






export default ApplicationAttributeMapping;

