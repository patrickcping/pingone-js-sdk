/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumFormFieldType from './EnumFormFieldType';
import FormFieldCommon from './FormFieldCommon';
import FormFieldCommonPosition from './FormFieldCommonPosition';
import FormFlowButton from './FormFlowButton';
import FormStyles from './FormStyles';

/**
 * The FormFieldFlowButton model module.
 * @module model/FormFieldFlowButton
 * @version 2023-06-29
 */
class FormFieldFlowButton {
    /**
     * Constructs a new <code>FormFieldFlowButton</code>.
     * @alias module:model/FormFieldFlowButton
     * @implements module:model/FormFieldCommon
     * @implements module:model/FormFlowButton
     * @param type {module:model/EnumFormFieldType} 
     * @param position {module:model/FormFieldCommonPosition} 
     * @param key {String} A string that specifies an identifier for the field component.
     * @param label {String} A string that specifies the button label.
     */
    constructor(type, position, key, label) { 
        FormFieldCommon.initialize(this, type, position);FormFlowButton.initialize(this, key, label);
        FormFieldFlowButton.initialize(this, type, position, key, label);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type, position, key, label) { 
        obj['type'] = type;
        obj['position'] = position;
        obj['key'] = key;
        obj['label'] = label;
    }

    /**
     * Constructs a <code>FormFieldFlowButton</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormFieldFlowButton} obj Optional instance to populate.
     * @return {module:model/FormFieldFlowButton} The populated <code>FormFieldFlowButton</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormFieldFlowButton();
            FormFieldCommon.constructFromObject(data, obj);
            FormFlowButton.constructFromObject(data, obj);

            if (data.hasOwnProperty('type')) {
                obj['type'] = EnumFormFieldType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('position')) {
                obj['position'] = FormFieldCommonPosition.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('label')) {
                obj['label'] = ApiClient.convertToType(data['label'], 'String');
            }
            if (data.hasOwnProperty('styles')) {
                obj['styles'] = FormStyles.constructFromObject(data['styles']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormFieldFlowButton</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormFieldFlowButton</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FormFieldFlowButton.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `position`
        if (data['position']) { // data not null
          FormFieldCommonPosition.validateJSON(data['position']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['label'] && !(typeof data['label'] === 'string' || data['label'] instanceof String)) {
            throw new Error("Expected the field `label` to be a primitive type in the JSON string but got " + data['label']);
        }
        // validate the optional field `styles`
        if (data['styles']) { // data not null
          FormStyles.validateJSON(data['styles']);
        }

        return true;
    }


}

FormFieldFlowButton.RequiredProperties = ["type", "position", "key", "label"];

/**
 * @member {module:model/EnumFormFieldType} type
 */
FormFieldFlowButton.prototype['type'] = undefined;

/**
 * @member {module:model/FormFieldCommonPosition} position
 */
FormFieldFlowButton.prototype['position'] = undefined;

/**
 * A string that specifies an identifier for the field component.
 * @member {String} key
 */
FormFieldFlowButton.prototype['key'] = undefined;

/**
 * A string that specifies the button label.
 * @member {String} label
 */
FormFieldFlowButton.prototype['label'] = undefined;

/**
 * @member {module:model/FormStyles} styles
 */
FormFieldFlowButton.prototype['styles'] = undefined;


// Implement FormFieldCommon interface:
/**
 * @member {module:model/EnumFormFieldType} type
 */
FormFieldCommon.prototype['type'] = undefined;
/**
 * @member {module:model/FormFieldCommonPosition} position
 */
FormFieldCommon.prototype['position'] = undefined;
// Implement FormFlowButton interface:
/**
 * A string that specifies an identifier for the field component.
 * @member {String} key
 */
FormFlowButton.prototype['key'] = undefined;
/**
 * A string that specifies the button label.
 * @member {String} label
 */
FormFlowButton.prototype['label'] = undefined;
/**
 * @member {module:model/FormStyles} styles
 */
FormFlowButton.prototype['styles'] = undefined;




export default FormFieldFlowButton;

