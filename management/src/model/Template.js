/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinksHATEOAS from './LinksHATEOAS';

/**
 * The Template model module.
 * @module model/Template
 * @version 2023-06-29
 */
class Template {
    /**
     * Constructs a new <code>Template</code>.
     * @alias module:model/Template
     * @param displayName {String} The template’s display name.
     * @param deliveryMethods {Array.<module:model/Template.DeliveryMethodsEnum>} The delivery methods supported for this template. Valid values are `SMS`, `Voice`, `Email` and `Push`.
     * @param variables {Object} Lists the variables you can use in each template content. The `required` property indicates whether the variable is required in template content. If `required` is `true`, the `requiredForDeliveryMethods` property lists the `deliveryMethods` types that require the variable. Note that if `required` is `true`, but `requiredForDeliveryMethods` is not returned, all `deliveryMethods` types are required. For more information, see [Variables](https://apidocs.pingidentity.com/pingone/platform/v1/api/#notifications-templates-variables).
     */
    constructor(displayName, deliveryMethods, variables) { 
        
        Template.initialize(this, displayName, deliveryMethods, variables);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, displayName, deliveryMethods, variables) { 
        obj['displayName'] = displayName;
        obj['deliveryMethods'] = deliveryMethods;
        obj['variables'] = variables;
    }

    /**
     * Constructs a <code>Template</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Template} obj Optional instance to populate.
     * @return {module:model/Template} The populated <code>Template</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Template();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('deliveryMethods')) {
                obj['deliveryMethods'] = ApiClient.convertToType(data['deliveryMethods'], ['String']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('variables')) {
                obj['variables'] = ApiClient.convertToType(data['variables'], Object);
            }
            if (data.hasOwnProperty('allowDynamicVariables')) {
                obj['allowDynamicVariables'] = ApiClient.convertToType(data['allowDynamicVariables'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Template</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Template</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Template.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['deliveryMethods'])) {
            throw new Error("Expected the field `deliveryMethods` to be an array in the JSON data but got " + data['deliveryMethods']);
        }
        // ensure the json data is a string
        if (data['createdAt'] && !(typeof data['createdAt'] === 'string' || data['createdAt'] instanceof String)) {
            throw new Error("Expected the field `createdAt` to be a primitive type in the JSON string but got " + data['createdAt']);
        }
        // ensure the json data is a string
        if (data['updatedAt'] && !(typeof data['updatedAt'] === 'string' || data['updatedAt'] instanceof String)) {
            throw new Error("Expected the field `updatedAt` to be a primitive type in the JSON string but got " + data['updatedAt']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

Template.RequiredProperties = ["displayName", "deliveryMethods", "variables"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
Template.prototype['_links'] = undefined;

/**
 * The template id
 * @member {String} id
 */
Template.prototype['id'] = undefined;

/**
 * The template’s display name.
 * @member {String} displayName
 */
Template.prototype['displayName'] = undefined;

/**
 * The delivery methods supported for this template. Valid values are `SMS`, `Voice`, `Email` and `Push`.
 * @member {Array.<module:model/Template.DeliveryMethodsEnum>} deliveryMethods
 */
Template.prototype['deliveryMethods'] = undefined;

/**
 * The time the resource was created.
 * @member {String} createdAt
 */
Template.prototype['createdAt'] = undefined;

/**
 * The time the resource was last updated.
 * @member {String} updatedAt
 */
Template.prototype['updatedAt'] = undefined;

/**
 * The description of the template.
 * @member {String} description
 */
Template.prototype['description'] = undefined;

/**
 * Lists the variables you can use in each template content. The `required` property indicates whether the variable is required in template content. If `required` is `true`, the `requiredForDeliveryMethods` property lists the `deliveryMethods` types that require the variable. Note that if `required` is `true`, but `requiredForDeliveryMethods` is not returned, all `deliveryMethods` types are required. For more information, see [Variables](https://apidocs.pingidentity.com/pingone/platform/v1/api/#notifications-templates-variables).
 * @member {Object} variables
 */
Template.prototype['variables'] = undefined;

/**
 * Specifies whether dynamic variables can be used in the template's contents. For more information, see [Dynamic variables](https://apidocs.pingidentity.com/pingone/platform/v1/api/#notifications-templates-dynamic-variables).
 * @member {Boolean} allowDynamicVariables
 */
Template.prototype['allowDynamicVariables'] = undefined;





/**
 * Allowed values for the <code>deliveryMethods</code> property.
 * @enum {String}
 * @readonly
 */
Template['DeliveryMethodsEnum'] = {

    /**
     * value: "SMS"
     * @const
     */
    "SMS": "SMS",

    /**
     * value: "Voice"
     * @const
     */
    "Voice": "Voice",

    /**
     * value: "Email"
     * @const
     */
    "Email": "Email",

    /**
     * value: "Push"
     * @const
     */
    "Push": "Push"
};



export default Template;

