/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LicenseUsers model module.
 * @module model/LicenseUsers
 * @version 2023-06-29
 */
class LicenseUsers {
    /**
     * Constructs a new <code>LicenseUsers</code>.
     * @alias module:model/LicenseUsers
     */
    constructor() { 
        
        LicenseUsers.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LicenseUsers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseUsers} obj Optional instance to populate.
     * @return {module:model/LicenseUsers} The populated <code>LicenseUsers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseUsers();

            if (data.hasOwnProperty('allowPasswordManagementNotifications')) {
                obj['allowPasswordManagementNotifications'] = ApiClient.convertToType(data['allowPasswordManagementNotifications'], 'Boolean');
            }
            if (data.hasOwnProperty('allowIdentityProviders')) {
                obj['allowIdentityProviders'] = ApiClient.convertToType(data['allowIdentityProviders'], 'Boolean');
            }
            if (data.hasOwnProperty('allowMyAccount')) {
                obj['allowMyAccount'] = ApiClient.convertToType(data['allowMyAccount'], 'Boolean');
            }
            if (data.hasOwnProperty('allowPasswordManagement')) {
                obj['allowPasswordManagement'] = ApiClient.convertToType(data['allowPasswordManagement'], 'Boolean');
            }
            if (data.hasOwnProperty('allowPasswordOnlyAuthentication')) {
                obj['allowPasswordOnlyAuthentication'] = ApiClient.convertToType(data['allowPasswordOnlyAuthentication'], 'Boolean');
            }
            if (data.hasOwnProperty('allowPasswordPolicy')) {
                obj['allowPasswordPolicy'] = ApiClient.convertToType(data['allowPasswordPolicy'], 'Boolean');
            }
            if (data.hasOwnProperty('allowProvisioning')) {
                obj['allowProvisioning'] = ApiClient.convertToType(data['allowProvisioning'], 'Boolean');
            }
            if (data.hasOwnProperty('allowInboundProvisioning')) {
                obj['allowInboundProvisioning'] = ApiClient.convertToType(data['allowInboundProvisioning'], 'Boolean');
            }
            if (data.hasOwnProperty('allowRoleAssignment')) {
                obj['allowRoleAssignment'] = ApiClient.convertToType(data['allowRoleAssignment'], 'Boolean');
            }
            if (data.hasOwnProperty('allowVerificationFlow')) {
                obj['allowVerificationFlow'] = ApiClient.convertToType(data['allowVerificationFlow'], 'Boolean');
            }
            if (data.hasOwnProperty('allowUpdateSelf')) {
                obj['allowUpdateSelf'] = ApiClient.convertToType(data['allowUpdateSelf'], 'Boolean');
            }
            if (data.hasOwnProperty('entitledToSupport')) {
                obj['entitledToSupport'] = ApiClient.convertToType(data['entitledToSupport'], 'Boolean');
            }
            if (data.hasOwnProperty('max')) {
                obj['max'] = ApiClient.convertToType(data['max'], 'Number');
            }
            if (data.hasOwnProperty('hardLimitMax')) {
                obj['hardLimitMax'] = ApiClient.convertToType(data['hardLimitMax'], 'Number');
            }
            if (data.hasOwnProperty('annualActiveIncluded')) {
                obj['annualActiveIncluded'] = ApiClient.convertToType(data['annualActiveIncluded'], 'Number');
            }
            if (data.hasOwnProperty('monthlyActiveIncluded')) {
                obj['monthlyActiveIncluded'] = ApiClient.convertToType(data['monthlyActiveIncluded'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseUsers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseUsers</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * A read-only boolean that specifies whether the license supports sending password management notifications.
 * @member {Boolean} allowPasswordManagementNotifications
 */
LicenseUsers.prototype['allowPasswordManagementNotifications'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports using external identity providers in the specified environment.
 * @member {Boolean} allowIdentityProviders
 */
LicenseUsers.prototype['allowIdentityProviders'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports using My Account capabilities in the specified environment.
 * @member {Boolean} allowMyAccount
 */
LicenseUsers.prototype['allowMyAccount'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports using password management capabilities in the specified environment.
 * @member {Boolean} allowPasswordManagement
 */
LicenseUsers.prototype['allowPasswordManagement'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports using password only login capabilities in the specified environment.
 * @member {Boolean} allowPasswordOnlyAuthentication
 */
LicenseUsers.prototype['allowPasswordOnlyAuthentication'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports using password policies in the specified environment.
 * @member {Boolean} allowPasswordPolicy
 */
LicenseUsers.prototype['allowPasswordPolicy'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports using provisioning capabilities in the specified environment.
 * @member {Boolean} allowProvisioning
 */
LicenseUsers.prototype['allowProvisioning'] = undefined;

/**
 * @member {Boolean} allowInboundProvisioning
 */
LicenseUsers.prototype['allowInboundProvisioning'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports role assignments in the specified environment.
 * @member {Boolean} allowRoleAssignment
 */
LicenseUsers.prototype['allowRoleAssignment'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports using verification flows in the specified environment.
 * @member {Boolean} allowVerificationFlow
 */
LicenseUsers.prototype['allowVerificationFlow'] = undefined;

/**
 * A read-only boolean that specifies whether the license supports allowing users to update their own profile.
 * @member {Boolean} allowUpdateSelf
 */
LicenseUsers.prototype['allowUpdateSelf'] = undefined;

/**
 * A read-only boolean that specifies whether the license allows PingOne support.
 * @member {Boolean} entitledToSupport
 */
LicenseUsers.prototype['entitledToSupport'] = undefined;

/**
 * An read-only integer that specifies the maximum number of users allowed per environment.
 * @member {Number} max
 */
LicenseUsers.prototype['max'] = undefined;

/**
 * @member {Number} hardLimitMax
 */
LicenseUsers.prototype['hardLimitMax'] = undefined;

/**
 * A read-only integer that specifies a soft limit on the number of active identities across all environments on the license per year. This property is not visible if a value is not provided at the time the license is created.
 * @member {Number} annualActiveIncluded
 */
LicenseUsers.prototype['annualActiveIncluded'] = undefined;

/**
 * A read-only integer that specifies a soft limit on the number of active identities across all environments on the license per month. This property is not visible if a value is not provided at the time the license is created.
 * @member {Number} monthlyActiveIncluded
 */
LicenseUsers.prototype['monthlyActiveIncluded'] = undefined;






export default LicenseUsers;

