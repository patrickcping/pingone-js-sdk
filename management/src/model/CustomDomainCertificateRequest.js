/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomDomainCertificateRequest model module.
 * @module model/CustomDomainCertificateRequest
 * @version 2023-06-29
 */
class CustomDomainCertificateRequest {
    /**
     * Constructs a new <code>CustomDomainCertificateRequest</code>.
     * @alias module:model/CustomDomainCertificateRequest
     * @param certificate {String} A string that specifies the PEM-encoded certificate to import. This is a required property. The following validation is performed on the certificate: \\ It must not be expired. \\ It MUST not be self signed. \\ The custom domain name MUST match one of the subject alternative name (SAN) values on the certificate. 
     * @param privateKey {String} A string that specifies the PEM-encoded, unencrypted private key that matches the certificate's public key. This is a required property.
     */
    constructor(certificate, privateKey) { 
        
        CustomDomainCertificateRequest.initialize(this, certificate, privateKey);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, certificate, privateKey) { 
        obj['certificate'] = certificate;
        obj['privateKey'] = privateKey;
    }

    /**
     * Constructs a <code>CustomDomainCertificateRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomDomainCertificateRequest} obj Optional instance to populate.
     * @return {module:model/CustomDomainCertificateRequest} The populated <code>CustomDomainCertificateRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomDomainCertificateRequest();

            if (data.hasOwnProperty('certificate')) {
                obj['certificate'] = ApiClient.convertToType(data['certificate'], 'String');
            }
            if (data.hasOwnProperty('intermediateCertificates')) {
                obj['intermediateCertificates'] = ApiClient.convertToType(data['intermediateCertificates'], 'String');
            }
            if (data.hasOwnProperty('privateKey')) {
                obj['privateKey'] = ApiClient.convertToType(data['privateKey'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomDomainCertificateRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomDomainCertificateRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CustomDomainCertificateRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['certificate'] && !(typeof data['certificate'] === 'string' || data['certificate'] instanceof String)) {
            throw new Error("Expected the field `certificate` to be a primitive type in the JSON string but got " + data['certificate']);
        }
        // ensure the json data is a string
        if (data['intermediateCertificates'] && !(typeof data['intermediateCertificates'] === 'string' || data['intermediateCertificates'] instanceof String)) {
            throw new Error("Expected the field `intermediateCertificates` to be a primitive type in the JSON string but got " + data['intermediateCertificates']);
        }
        // ensure the json data is a string
        if (data['privateKey'] && !(typeof data['privateKey'] === 'string' || data['privateKey'] instanceof String)) {
            throw new Error("Expected the field `privateKey` to be a primitive type in the JSON string but got " + data['privateKey']);
        }

        return true;
    }


}

CustomDomainCertificateRequest.RequiredProperties = ["certificate", "privateKey"];

/**
 * A string that specifies the PEM-encoded certificate to import. This is a required property. The following validation is performed on the certificate: \\ It must not be expired. \\ It MUST not be self signed. \\ The custom domain name MUST match one of the subject alternative name (SAN) values on the certificate. 
 * @member {String} certificate
 */
CustomDomainCertificateRequest.prototype['certificate'] = undefined;

/**
 * A string that specifies the PEM-encoded certificate chain.
 * @member {String} intermediateCertificates
 */
CustomDomainCertificateRequest.prototype['intermediateCertificates'] = undefined;

/**
 * A string that specifies the PEM-encoded, unencrypted private key that matches the certificate's public key. This is a required property.
 * @member {String} privateKey
 */
CustomDomainCertificateRequest.prototype['privateKey'] = undefined;






export default CustomDomainCertificateRequest;

