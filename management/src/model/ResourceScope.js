/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';
import ObjectResource from './ObjectResource';

/**
 * The ResourceScope model module.
 * @module model/ResourceScope
 * @version 2023-06-29
 */
class ResourceScope {
    /**
     * Constructs a new <code>ResourceScope</code>.
     * @alias module:model/ResourceScope
     * @param name {String} A string that specifies the resource scope name.
     */
    constructor(name) { 
        
        ResourceScope.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ResourceScope</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceScope} obj Optional instance to populate.
     * @return {module:model/ResourceScope} The populated <code>ResourceScope</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceScope();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ObjectResource.constructFromObject(data['resource']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('schemaAttributes')) {
                obj['schemaAttributes'] = ApiClient.convertToType(data['schemaAttributes'], ['String']);
            }
            if (data.hasOwnProperty('mappedClaims')) {
                obj['mappedClaims'] = ApiClient.convertToType(data['mappedClaims'], ['String']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceScope</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceScope</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ResourceScope.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `resource`
        if (data['resource']) { // data not null
          ObjectResource.validateJSON(data['resource']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          ObjectEnvironment.validateJSON(data['environment']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['schemaAttributes'])) {
            throw new Error("Expected the field `schemaAttributes` to be an array in the JSON data but got " + data['schemaAttributes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mappedClaims'])) {
            throw new Error("Expected the field `mappedClaims` to be an array in the JSON data but got " + data['mappedClaims']);
        }

        return true;
    }


}

ResourceScope.RequiredProperties = ["name"];

/**
 * @member {module:model/LinksHATEOAS} _links
 */
ResourceScope.prototype['_links'] = undefined;

/**
 * A string that specifies the resourceâ€™s unique identifier.
 * @member {String} id
 */
ResourceScope.prototype['id'] = undefined;

/**
 * @member {module:model/ObjectResource} resource
 */
ResourceScope.prototype['resource'] = undefined;

/**
 * A string that specifies the resource scope name.
 * @member {String} name
 */
ResourceScope.prototype['name'] = undefined;

/**
 * A string that specifies the description of the scope.
 * @member {String} description
 */
ResourceScope.prototype['description'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
ResourceScope.prototype['environment'] = undefined;

/**
 * An array that specifies the user schema attributes that can be read or updated for the specified PingOne access control scope. The value is an array of schema attribute paths (such as `username`, `name.given`, `shirtSize`) that the scope controls. This property is supported only for the `p1:read:user`, `p1:update:user` and `p1:read:user:{suffix}` and `p1:update:user:{suffix}` scopes. No other PingOne platform scopes allow this behavior. Any attributes not listed in the attribute array are excluded from the read or update action. The wildcard path (*) in the array includes all attributes and cannot be used in conjunction with any other user schema attribute paths
 * @member {Array.<String>} schemaAttributes
 */
ResourceScope.prototype['schemaAttributes'] = undefined;

/**
 * A list of custom resource attribute IDs. This property applies only for the resource with its type property set to `OPENID_CONNECT`. Moreover, this property does not display predefined OpenID Connect (OIDC) mappings, such as the `email` claim in the OIDC `email` scope or the `name` claim in the `profile` scope. You can create custom attributes, and these custom attributes can be added to `mappedClaims` and will display in the response.
 * @member {Array.<String>} mappedClaims
 */
ResourceScope.prototype['mappedClaims'] = undefined;

/**
 * The time the resource was created.
 * @member {Date} createdAt
 */
ResourceScope.prototype['createdAt'] = undefined;

/**
 * The time the resource was last updated.
 * @member {Date} updatedAt
 */
ResourceScope.prototype['updatedAt'] = undefined;






export default ResourceScope;

