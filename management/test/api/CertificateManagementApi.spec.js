/**
 * PingOne Platform API - SSO and Base
 * The PingOne Platform API covering the base and SSO services (otherwise known as the Management APIs)
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.PingOnePlatformApiSsoAndBase);
  }
}(this, function(expect, PingOnePlatformApiSsoAndBase) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new PingOnePlatformApiSsoAndBase.CertificateManagementApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CertificateManagementApi', function() {
    describe('createCertificateFromFile', function() {
      it('should call createCertificateFromFile successfully', function(done) {
        //uncomment below and update the code to test createCertificateFromFile
        //instance.createCertificateFromFile(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('createKey', function() {
      it('should call createKey successfully', function(done) {
        //uncomment below and update the code to test createKey
        //instance.createKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteCertificate', function() {
      it('should call deleteCertificate successfully', function(done) {
        //uncomment below and update the code to test deleteCertificate
        //instance.deleteCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteKey', function() {
      it('should call deleteKey successfully', function(done) {
        //uncomment below and update the code to test deleteKey
        //instance.deleteKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('environmentsEnvironmentIDDecryptionsPost', function() {
      it('should call environmentsEnvironmentIDDecryptionsPost successfully', function(done) {
        //uncomment below and update the code to test environmentsEnvironmentIDDecryptionsPost
        //instance.environmentsEnvironmentIDDecryptionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('environmentsEnvironmentIDEncryptionsPost', function() {
      it('should call environmentsEnvironmentIDEncryptionsPost successfully', function(done) {
        //uncomment below and update the code to test environmentsEnvironmentIDEncryptionsPost
        //instance.environmentsEnvironmentIDEncryptionsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('environmentsEnvironmentIDSigningsPost', function() {
      it('should call environmentsEnvironmentIDSigningsPost successfully', function(done) {
        //uncomment below and update the code to test environmentsEnvironmentIDSigningsPost
        //instance.environmentsEnvironmentIDSigningsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('environmentsEnvironmentIDVerificationsPost', function() {
      it('should call environmentsEnvironmentIDVerificationsPost successfully', function(done) {
        //uncomment below and update the code to test environmentsEnvironmentIDVerificationsPost
        //instance.environmentsEnvironmentIDVerificationsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('exportCSR', function() {
      it('should call exportCSR successfully', function(done) {
        //uncomment below and update the code to test exportCSR
        //instance.exportCSR(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCertificate', function() {
      it('should call getCertificate successfully', function(done) {
        //uncomment below and update the code to test getCertificate
        //instance.getCertificate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCertificateApplications', function() {
      it('should call getCertificateApplications successfully', function(done) {
        //uncomment below and update the code to test getCertificateApplications
        //instance.getCertificateApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCertificates', function() {
      it('should call getCertificates successfully', function(done) {
        //uncomment below and update the code to test getCertificates
        //instance.getCertificates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKey', function() {
      it('should call getKey successfully', function(done) {
        //uncomment below and update the code to test getKey
        //instance.getKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKeyApplications', function() {
      it('should call getKeyApplications successfully', function(done) {
        //uncomment below and update the code to test getKeyApplications
        //instance.getKeyApplications(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getKeys', function() {
      it('should call getKeys successfully', function(done) {
        //uncomment below and update the code to test getKeys
        //instance.getKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('importCSRResponse', function() {
      it('should call importCSRResponse successfully', function(done) {
        //uncomment below and update the code to test importCSRResponse
        //instance.importCSRResponse(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateKey', function() {
      it('should call updateKey successfully', function(done) {
        //uncomment below and update the code to test updateKey
        //instance.updateKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
