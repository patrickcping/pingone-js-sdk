/**
 * PingOne Platform API - PingOne Risk
 * The PingOne Platform API covering the PingOne Risk service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RiskEvaluationEventBrowser model module.
 * @module model/RiskEvaluationEventBrowser
 * @version 2023-06-29
 */
class RiskEvaluationEventBrowser {
    /**
     * Constructs a new <code>RiskEvaluationEventBrowser</code>.
     * An object that specifies the browser fingerprint attributes. Browser data can be retrieved using browser fingerprint JS. For more information, see Overview of the PingOne Risk Integration Kit.
     * @alias module:model/RiskEvaluationEventBrowser
     */
    constructor() { 
        
        RiskEvaluationEventBrowser.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RiskEvaluationEventBrowser</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RiskEvaluationEventBrowser} obj Optional instance to populate.
     * @return {module:model/RiskEvaluationEventBrowser} The populated <code>RiskEvaluationEventBrowser</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RiskEvaluationEventBrowser();

            if (data.hasOwnProperty('userAgent')) {
                obj['userAgent'] = ApiClient.convertToType(data['userAgent'], 'String');
            }
            if (data.hasOwnProperty('cookie')) {
                obj['cookie'] = ApiClient.convertToType(data['cookie'], 'String');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('colorDepth')) {
                obj['colorDepth'] = ApiClient.convertToType(data['colorDepth'], 'Number');
            }
            if (data.hasOwnProperty('deviceMemory')) {
                obj['deviceMemory'] = ApiClient.convertToType(data['deviceMemory'], 'Number');
            }
            if (data.hasOwnProperty('hardwareConcurrency')) {
                obj['hardwareConcurrency'] = ApiClient.convertToType(data['hardwareConcurrency'], 'Number');
            }
            if (data.hasOwnProperty('screenResolution')) {
                obj['screenResolution'] = ApiClient.convertToType(data['screenResolution'], ['Number']);
            }
            if (data.hasOwnProperty('availableScreenResolution')) {
                obj['availableScreenResolution'] = ApiClient.convertToType(data['availableScreenResolution'], ['Number']);
            }
            if (data.hasOwnProperty('timezoneOffset')) {
                obj['timezoneOffset'] = ApiClient.convertToType(data['timezoneOffset'], 'Number');
            }
            if (data.hasOwnProperty('timezone')) {
                obj['timezone'] = ApiClient.convertToType(data['timezone'], 'String');
            }
            if (data.hasOwnProperty('sessionStorage')) {
                obj['sessionStorage'] = ApiClient.convertToType(data['sessionStorage'], 'Boolean');
            }
            if (data.hasOwnProperty('localStorage')) {
                obj['localStorage'] = ApiClient.convertToType(data['localStorage'], 'Boolean');
            }
            if (data.hasOwnProperty('indexedDb')) {
                obj['indexedDb'] = ApiClient.convertToType(data['indexedDb'], 'Boolean');
            }
            if (data.hasOwnProperty('addBehaviour')) {
                obj['addBehaviour'] = ApiClient.convertToType(data['addBehaviour'], Object);
            }
            if (data.hasOwnProperty('openDatabase')) {
                obj['openDatabase'] = ApiClient.convertToType(data['openDatabase'], 'Boolean');
            }
            if (data.hasOwnProperty('cpuClass')) {
                obj['cpuClass'] = ApiClient.convertToType(data['cpuClass'], 'String');
            }
            if (data.hasOwnProperty('platform')) {
                obj['platform'] = ApiClient.convertToType(data['platform'], 'String');
            }
            if (data.hasOwnProperty('plugins')) {
                obj['plugins'] = ApiClient.convertToType(data['plugins'], [Object]);
            }
            if (data.hasOwnProperty('webglVendorAndRenderer')) {
                obj['webglVendorAndRenderer'] = ApiClient.convertToType(data['webglVendorAndRenderer'], 'String');
            }
            if (data.hasOwnProperty('webgl')) {
                obj['webgl'] = ApiClient.convertToType(data['webgl'], ['String']);
            }
            if (data.hasOwnProperty('adBlock')) {
                obj['adBlock'] = ApiClient.convertToType(data['adBlock'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLiedLanguages')) {
                obj['hasLiedLanguages'] = ApiClient.convertToType(data['hasLiedLanguages'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLiedResolution')) {
                obj['hasLiedResolution'] = ApiClient.convertToType(data['hasLiedResolution'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLiedOs')) {
                obj['hasLiedOs'] = ApiClient.convertToType(data['hasLiedOs'], 'Boolean');
            }
            if (data.hasOwnProperty('hasLiedBrowser')) {
                obj['hasLiedBrowser'] = ApiClient.convertToType(data['hasLiedBrowser'], 'Boolean');
            }
            if (data.hasOwnProperty('touchSupport')) {
                obj['touchSupport'] = ApiClient.convertToType(data['touchSupport'], ['String']);
            }
            if (data.hasOwnProperty('fonts')) {
                obj['fonts'] = ApiClient.convertToType(data['fonts'], ['String']);
            }
            if (data.hasOwnProperty('audio')) {
                obj['audio'] = ApiClient.convertToType(data['audio'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RiskEvaluationEventBrowser</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RiskEvaluationEventBrowser</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['userAgent'] && !(typeof data['userAgent'] === 'string' || data['userAgent'] instanceof String)) {
            throw new Error("Expected the field `userAgent` to be a primitive type in the JSON string but got " + data['userAgent']);
        }
        // ensure the json data is a string
        if (data['cookie'] && !(typeof data['cookie'] === 'string' || data['cookie'] instanceof String)) {
            throw new Error("Expected the field `cookie` to be a primitive type in the JSON string but got " + data['cookie']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['screenResolution'])) {
            throw new Error("Expected the field `screenResolution` to be an array in the JSON data but got " + data['screenResolution']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['availableScreenResolution'])) {
            throw new Error("Expected the field `availableScreenResolution` to be an array in the JSON data but got " + data['availableScreenResolution']);
        }
        // ensure the json data is a string
        if (data['timezone'] && !(typeof data['timezone'] === 'string' || data['timezone'] instanceof String)) {
            throw new Error("Expected the field `timezone` to be a primitive type in the JSON string but got " + data['timezone']);
        }
        // ensure the json data is a string
        if (data['cpuClass'] && !(typeof data['cpuClass'] === 'string' || data['cpuClass'] instanceof String)) {
            throw new Error("Expected the field `cpuClass` to be a primitive type in the JSON string but got " + data['cpuClass']);
        }
        // ensure the json data is a string
        if (data['platform'] && !(typeof data['platform'] === 'string' || data['platform'] instanceof String)) {
            throw new Error("Expected the field `platform` to be a primitive type in the JSON string but got " + data['platform']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['plugins'])) {
            throw new Error("Expected the field `plugins` to be an array in the JSON data but got " + data['plugins']);
        }
        // ensure the json data is a string
        if (data['webglVendorAndRenderer'] && !(typeof data['webglVendorAndRenderer'] === 'string' || data['webglVendorAndRenderer'] instanceof String)) {
            throw new Error("Expected the field `webglVendorAndRenderer` to be a primitive type in the JSON string but got " + data['webglVendorAndRenderer']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['webgl'])) {
            throw new Error("Expected the field `webgl` to be an array in the JSON data but got " + data['webgl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['touchSupport'])) {
            throw new Error("Expected the field `touchSupport` to be an array in the JSON data but got " + data['touchSupport']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['fonts'])) {
            throw new Error("Expected the field `fonts` to be an array in the JSON data but got " + data['fonts']);
        }
        // ensure the json data is a string
        if (data['audio'] && !(typeof data['audio'] === 'string' || data['audio'] instanceof String)) {
            throw new Error("Expected the field `audio` to be a primitive type in the JSON string but got " + data['audio']);
        }

        return true;
    }


}



/**
 * @member {String} userAgent
 */
RiskEvaluationEventBrowser.prototype['userAgent'] = undefined;

/**
 * @member {String} cookie
 */
RiskEvaluationEventBrowser.prototype['cookie'] = undefined;

/**
 * @member {String} language
 */
RiskEvaluationEventBrowser.prototype['language'] = undefined;

/**
 * @member {Number} colorDepth
 */
RiskEvaluationEventBrowser.prototype['colorDepth'] = undefined;

/**
 * @member {Number} deviceMemory
 */
RiskEvaluationEventBrowser.prototype['deviceMemory'] = undefined;

/**
 * @member {Number} hardwareConcurrency
 */
RiskEvaluationEventBrowser.prototype['hardwareConcurrency'] = undefined;

/**
 * @member {Array.<Number>} screenResolution
 */
RiskEvaluationEventBrowser.prototype['screenResolution'] = undefined;

/**
 * @member {Array.<Number>} availableScreenResolution
 */
RiskEvaluationEventBrowser.prototype['availableScreenResolution'] = undefined;

/**
 * @member {Number} timezoneOffset
 */
RiskEvaluationEventBrowser.prototype['timezoneOffset'] = undefined;

/**
 * @member {String} timezone
 */
RiskEvaluationEventBrowser.prototype['timezone'] = undefined;

/**
 * @member {Boolean} sessionStorage
 */
RiskEvaluationEventBrowser.prototype['sessionStorage'] = undefined;

/**
 * @member {Boolean} localStorage
 */
RiskEvaluationEventBrowser.prototype['localStorage'] = undefined;

/**
 * @member {Boolean} indexedDb
 */
RiskEvaluationEventBrowser.prototype['indexedDb'] = undefined;

/**
 * @member {Object} addBehaviour
 */
RiskEvaluationEventBrowser.prototype['addBehaviour'] = undefined;

/**
 * @member {Boolean} openDatabase
 */
RiskEvaluationEventBrowser.prototype['openDatabase'] = undefined;

/**
 * @member {String} cpuClass
 */
RiskEvaluationEventBrowser.prototype['cpuClass'] = undefined;

/**
 * @member {String} platform
 */
RiskEvaluationEventBrowser.prototype['platform'] = undefined;

/**
 * @member {Array.<Object>} plugins
 */
RiskEvaluationEventBrowser.prototype['plugins'] = undefined;

/**
 * @member {String} webglVendorAndRenderer
 */
RiskEvaluationEventBrowser.prototype['webglVendorAndRenderer'] = undefined;

/**
 * @member {Array.<String>} webgl
 */
RiskEvaluationEventBrowser.prototype['webgl'] = undefined;

/**
 * @member {Boolean} adBlock
 */
RiskEvaluationEventBrowser.prototype['adBlock'] = undefined;

/**
 * @member {Boolean} hasLiedLanguages
 */
RiskEvaluationEventBrowser.prototype['hasLiedLanguages'] = undefined;

/**
 * @member {Boolean} hasLiedResolution
 */
RiskEvaluationEventBrowser.prototype['hasLiedResolution'] = undefined;

/**
 * @member {Boolean} hasLiedOs
 */
RiskEvaluationEventBrowser.prototype['hasLiedOs'] = undefined;

/**
 * @member {Boolean} hasLiedBrowser
 */
RiskEvaluationEventBrowser.prototype['hasLiedBrowser'] = undefined;

/**
 * @member {Array.<String>} touchSupport
 */
RiskEvaluationEventBrowser.prototype['touchSupport'] = undefined;

/**
 * @member {Array.<String>} fonts
 */
RiskEvaluationEventBrowser.prototype['fonts'] = undefined;

/**
 * @member {String} audio
 */
RiskEvaluationEventBrowser.prototype['audio'] = undefined;






export default RiskEvaluationEventBrowser;

