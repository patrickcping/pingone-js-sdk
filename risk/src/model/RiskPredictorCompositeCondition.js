/**
 * PingOne Platform API - PingOne Risk
 * The PingOne Platform API covering the PingOne Risk service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumPredictorCompositeConditionType from './EnumPredictorCompositeConditionType';
import RiskPredictorCompositeAnd from './RiskPredictorCompositeAnd';
import RiskPredictorCompositeConditionOneOf from './RiskPredictorCompositeConditionOneOf';
import RiskPredictorCompositeConditionOneOf1 from './RiskPredictorCompositeConditionOneOf1';
import RiskPredictorCompositeConditionOneOf1Equals from './RiskPredictorCompositeConditionOneOf1Equals';
import RiskPredictorCompositeNot from './RiskPredictorCompositeNot';
import RiskPredictorCompositeOr from './RiskPredictorCompositeOr';

/**
 * The RiskPredictorCompositeCondition model module.
 * @module model/RiskPredictorCompositeCondition
 * @version 2023-06-29
 */
class RiskPredictorCompositeCondition {
    /**
     * Constructs a new <code>RiskPredictorCompositeCondition</code>.
     * @alias module:model/RiskPredictorCompositeCondition
     * @param {(module:model/RiskPredictorCompositeAnd|module:model/RiskPredictorCompositeConditionOneOf|module:model/RiskPredictorCompositeConditionOneOf1|module:model/RiskPredictorCompositeNot|module:model/RiskPredictorCompositeOr)} instance The actual instance to initialize RiskPredictorCompositeCondition.
     */
    constructor(instance = null) {
        if (instance === null) {
            this.actualInstance = null;
            return;
        }
        var match = 0;
        var errorMessages = [];
        try {
            if (typeof instance === "RiskPredictorCompositeNot") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RiskPredictorCompositeNot.validateJSON(instance); // throw an exception if no match
                // create RiskPredictorCompositeNot from JS object
                this.actualInstance = RiskPredictorCompositeNot.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RiskPredictorCompositeNot
            errorMessages.push("Failed to construct RiskPredictorCompositeNot: " + err)
        }

        try {
            if (typeof instance === "RiskPredictorCompositeOr") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RiskPredictorCompositeOr.validateJSON(instance); // throw an exception if no match
                // create RiskPredictorCompositeOr from JS object
                this.actualInstance = RiskPredictorCompositeOr.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RiskPredictorCompositeOr
            errorMessages.push("Failed to construct RiskPredictorCompositeOr: " + err)
        }

        try {
            if (typeof instance === "RiskPredictorCompositeAnd") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RiskPredictorCompositeAnd.validateJSON(instance); // throw an exception if no match
                // create RiskPredictorCompositeAnd from JS object
                this.actualInstance = RiskPredictorCompositeAnd.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RiskPredictorCompositeAnd
            errorMessages.push("Failed to construct RiskPredictorCompositeAnd: " + err)
        }

        try {
            if (typeof instance === "RiskPredictorCompositeConditionOneOf") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RiskPredictorCompositeConditionOneOf.validateJSON(instance); // throw an exception if no match
                // create RiskPredictorCompositeConditionOneOf from JS object
                this.actualInstance = RiskPredictorCompositeConditionOneOf.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RiskPredictorCompositeConditionOneOf
            errorMessages.push("Failed to construct RiskPredictorCompositeConditionOneOf: " + err)
        }

        try {
            if (typeof instance === "RiskPredictorCompositeConditionOneOf1") {
                this.actualInstance = instance;
            } else {
                // plain JS object
                // validate the object
                RiskPredictorCompositeConditionOneOf1.validateJSON(instance); // throw an exception if no match
                // create RiskPredictorCompositeConditionOneOf1 from JS object
                this.actualInstance = RiskPredictorCompositeConditionOneOf1.constructFromObject(instance);
            }
            match++;
        } catch(err) {
            // json data failed to deserialize into RiskPredictorCompositeConditionOneOf1
            errorMessages.push("Failed to construct RiskPredictorCompositeConditionOneOf1: " + err)
        }

        if (match > 1) {
            throw new Error("Multiple matches found constructing `RiskPredictorCompositeCondition` with oneOf schemas RiskPredictorCompositeAnd, RiskPredictorCompositeConditionOneOf, RiskPredictorCompositeConditionOneOf1, RiskPredictorCompositeNot, RiskPredictorCompositeOr. Input: " + JSON.stringify(instance));
        } else if (match === 0) {
            this.actualInstance = null; // clear the actual instance in case there are multiple matches
            throw new Error("No match found constructing `RiskPredictorCompositeCondition` with oneOf schemas RiskPredictorCompositeAnd, RiskPredictorCompositeConditionOneOf, RiskPredictorCompositeConditionOneOf1, RiskPredictorCompositeNot, RiskPredictorCompositeOr. Details: " +
                            errorMessages.join(", "));
        } else { // only 1 match
            // the input is valid
        }
    }

    /**
     * Constructs a <code>RiskPredictorCompositeCondition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RiskPredictorCompositeCondition} obj Optional instance to populate.
     * @return {module:model/RiskPredictorCompositeCondition} The populated <code>RiskPredictorCompositeCondition</code> instance.
     */
    static constructFromObject(data, obj) {
        return new RiskPredictorCompositeCondition(data);
    }

    /**
     * Gets the actual instance, which can be <code>RiskPredictorCompositeAnd</code>, <code>RiskPredictorCompositeConditionOneOf</code>, <code>RiskPredictorCompositeConditionOneOf1</code>, <code>RiskPredictorCompositeNot</code>, <code>RiskPredictorCompositeOr</code>.
     * @return {(module:model/RiskPredictorCompositeAnd|module:model/RiskPredictorCompositeConditionOneOf|module:model/RiskPredictorCompositeConditionOneOf1|module:model/RiskPredictorCompositeNot|module:model/RiskPredictorCompositeOr)} The actual instance.
     */
    getActualInstance() {
        return this.actualInstance;
    }

    /**
     * Sets the actual instance, which can be <code>RiskPredictorCompositeAnd</code>, <code>RiskPredictorCompositeConditionOneOf</code>, <code>RiskPredictorCompositeConditionOneOf1</code>, <code>RiskPredictorCompositeNot</code>, <code>RiskPredictorCompositeOr</code>.
     * @param {(module:model/RiskPredictorCompositeAnd|module:model/RiskPredictorCompositeConditionOneOf|module:model/RiskPredictorCompositeConditionOneOf1|module:model/RiskPredictorCompositeNot|module:model/RiskPredictorCompositeOr)} obj The actual instance.
     */
    setActualInstance(obj) {
       this.actualInstance = RiskPredictorCompositeCondition.constructFromObject(obj).getActualInstance();
    }

    /**
     * Returns the JSON representation of the actual instance.
     * @return {string}
     */
    toJSON = function(){
        return this.getActualInstance();
    }

    /**
     * Create an instance of RiskPredictorCompositeCondition from a JSON string.
     * @param {string} json_string JSON string.
     * @return {module:model/RiskPredictorCompositeCondition} An instance of RiskPredictorCompositeCondition.
     */
    static fromJSON = function(json_string){
        return RiskPredictorCompositeCondition.constructFromObject(JSON.parse(json_string));
    }
}

/**
 * @member {module:model/RiskPredictorCompositeOr} not
 */
RiskPredictorCompositeCondition.prototype['not'] = undefined;

/**
 * @member {module:model/EnumPredictorCompositeConditionType} type
 */
RiskPredictorCompositeCondition.prototype['type'] = undefined;

/**
 * @member {Array.<module:model/RiskPredictorCompositeCondition>} or
 */
RiskPredictorCompositeCondition.prototype['or'] = undefined;

/**
 * @member {Array.<module:model/RiskPredictorCompositeCondition>} and
 */
RiskPredictorCompositeCondition.prototype['and'] = undefined;

/**
 * @member {String} contains
 */
RiskPredictorCompositeCondition.prototype['contains'] = undefined;

/**
 * @member {Array.<String>} list
 */
RiskPredictorCompositeCondition.prototype['list'] = undefined;

/**
 * @member {module:model/RiskPredictorCompositeConditionOneOf1Equals} equals
 */
RiskPredictorCompositeCondition.prototype['equals'] = undefined;

/**
 * @member {module:model/RiskPredictorCompositeConditionOneOf1Equals} notEquals
 */
RiskPredictorCompositeCondition.prototype['notEquals'] = undefined;

/**
 * @member {Number} greater
 */
RiskPredictorCompositeCondition.prototype['greater'] = undefined;

/**
 * @member {Number} greaterEquals
 */
RiskPredictorCompositeCondition.prototype['greaterEquals'] = undefined;

/**
 * @member {Number} lower
 */
RiskPredictorCompositeCondition.prototype['lower'] = undefined;

/**
 * @member {Number} lowerEquals
 */
RiskPredictorCompositeCondition.prototype['lowerEquals'] = undefined;

/**
 * @member {String} value
 */
RiskPredictorCompositeCondition.prototype['value'] = undefined;


RiskPredictorCompositeCondition.OneOf = ["RiskPredictorCompositeAnd", "RiskPredictorCompositeConditionOneOf", "RiskPredictorCompositeConditionOneOf1", "RiskPredictorCompositeNot", "RiskPredictorCompositeOr"];

export default RiskPredictorCompositeCondition;

