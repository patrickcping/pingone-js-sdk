/**
 * PingOne Platform API - PingOne Risk
 * The PingOne Platform API covering the PingOne Risk service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EnumPredictorCompositeConditionType from './EnumPredictorCompositeConditionType';
import RiskPredictorCompositeCondition from './RiskPredictorCompositeCondition';

/**
 * The RiskPredictorCompositeOr model module.
 * @module model/RiskPredictorCompositeOr
 * @version 2023-06-29
 */
class RiskPredictorCompositeOr {
  /**
   * Constructs a new <code>RiskPredictorCompositeOr</code>.
   * @alias module:model/RiskPredictorCompositeOr
   * @param or {Array.<module:model/RiskPredictorCompositeCondition>} 
   */
  constructor(or) {
    RiskPredictorCompositeOr.initialize(this, or);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj, or) {
    obj['or'] = or;
  }

  /**
   * Constructs a <code>RiskPredictorCompositeOr</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/RiskPredictorCompositeOr} obj Optional instance to populate.
   * @return {module:model/RiskPredictorCompositeOr} The populated <code>RiskPredictorCompositeOr</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new RiskPredictorCompositeOr();
      if (data.hasOwnProperty('or')) {
        obj['or'] = ApiClient.convertToType(data['or'], [RiskPredictorCompositeCondition]);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = EnumPredictorCompositeConditionType.constructFromObject(data['type']);
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>RiskPredictorCompositeOr</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RiskPredictorCompositeOr</code>.
   */
  static validateJSON(data) {
    // check to make sure all required properties are present in the JSON string
    for (const property of RiskPredictorCompositeOr.RequiredProperties) {
      if (!data.hasOwnProperty(property)) {
        throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
      }
    }
    if (data['or']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['or'])) {
        throw new Error("Expected the field `or` to be an array in the JSON data but got " + data['or']);
      }
      // validate the optional field `or` (array)
      for (const item of data['or']) {
        RiskPredictorCompositeCondition.validateJSON(item);
      }
      ;
    }
    return true;
  }
}
RiskPredictorCompositeOr.RequiredProperties = ["or"];

/**
 * @member {Array.<module:model/RiskPredictorCompositeCondition>} or
 */
RiskPredictorCompositeOr.prototype['or'] = undefined;

/**
 * @member {module:model/EnumPredictorCompositeConditionType} type
 */
RiskPredictorCompositeOr.prototype['type'] = undefined;
export default RiskPredictorCompositeOr;