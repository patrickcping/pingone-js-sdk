/**
 * PingOne Platform API - PingOne Risk
 * The PingOne Platform API covering the PingOne Risk service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import P1Error from '../model/P1Error';
import RiskEvaluation from '../model/RiskEvaluation';
import RiskEvaluationEvent from '../model/RiskEvaluationEvent';

/**
* RiskEvaluations service.
* @module api/RiskEvaluationsApi
* @version 2023-06-29
*/
export default class RiskEvaluationsApi {
  /**
  * Constructs a new RiskEvaluationsApi. 
  * @alias module:api/RiskEvaluationsApi
  * @class
  * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
  * default to {@link module:ApiClient#instance} if unspecified.
  */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * CREATE Risk Evaluation
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/RiskEvaluation} [riskEvaluation] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RiskEvaluation} and HTTP response
   */
  createRiskEvaluationWithHttpInfo(environmentID, opts) {
    opts = opts || {};
    let postBody = opts['riskEvaluation'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling createRiskEvaluation");
    }
    let pathParams = {
      'environmentID': environmentID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = RiskEvaluation;
    return this.apiClient.callApi('/environments/{environmentID}/riskEvaluations', 'POST', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * CREATE Risk Evaluation
   * @param {String} environmentID 
   * @param {Object} opts Optional parameters
   * @param {module:model/RiskEvaluation} opts.riskEvaluation 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RiskEvaluation}
   */
  createRiskEvaluation(environmentID, opts) {
    return this.createRiskEvaluationWithHttpInfo(environmentID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * READ One Risk Evaluation
   * @param {String} environmentID 
   * @param {String} riskEvaluationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RiskEvaluation} and HTTP response
   */
  readOneRiskEvaluationWithHttpInfo(environmentID, riskEvaluationID) {
    let postBody = null;
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling readOneRiskEvaluation");
    }
    // verify the required parameter 'riskEvaluationID' is set
    if (riskEvaluationID === undefined || riskEvaluationID === null) {
      throw new Error("Missing the required parameter 'riskEvaluationID' when calling readOneRiskEvaluation");
    }
    let pathParams = {
      'environmentID': environmentID,
      'riskEvaluationID': riskEvaluationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = [];
    let accepts = ['application/json'];
    let returnType = RiskEvaluation;
    return this.apiClient.callApi('/environments/{environmentID}/riskEvaluations/{riskEvaluationID}', 'GET', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * READ One Risk Evaluation
   * @param {String} environmentID 
   * @param {String} riskEvaluationID 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RiskEvaluation}
   */
  readOneRiskEvaluation(environmentID, riskEvaluationID) {
    return this.readOneRiskEvaluationWithHttpInfo(environmentID, riskEvaluationID).then(function (response_and_data) {
      return response_and_data.data;
    });
  }

  /**
   * UPDATE Risk Evaluation
   * @param {String} environmentID 
   * @param {String} riskEvaluationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/RiskEvaluationEvent} [riskEvaluationEvent] 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/RiskEvaluation} and HTTP response
   */
  updateRiskEvaluationWithHttpInfo(environmentID, riskEvaluationID, opts) {
    opts = opts || {};
    let postBody = opts['riskEvaluationEvent'];
    // verify the required parameter 'environmentID' is set
    if (environmentID === undefined || environmentID === null) {
      throw new Error("Missing the required parameter 'environmentID' when calling updateRiskEvaluation");
    }
    // verify the required parameter 'riskEvaluationID' is set
    if (riskEvaluationID === undefined || riskEvaluationID === null) {
      throw new Error("Missing the required parameter 'riskEvaluationID' when calling updateRiskEvaluation");
    }
    let pathParams = {
      'environmentID': environmentID,
      'riskEvaluationID': riskEvaluationID
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};
    let authNames = ['bearer'];
    let contentTypes = ['application/json'];
    let accepts = ['application/json'];
    let returnType = RiskEvaluation;
    return this.apiClient.callApi('/environments/{environmentID}/riskEvaluations/{riskEvaluationID}/event', 'PUT', pathParams, queryParams, headerParams, formParams, postBody, authNames, contentTypes, accepts, returnType, null);
  }

  /**
   * UPDATE Risk Evaluation
   * @param {String} environmentID 
   * @param {String} riskEvaluationID 
   * @param {Object} opts Optional parameters
   * @param {module:model/RiskEvaluationEvent} opts.riskEvaluationEvent 
   * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/RiskEvaluation}
   */
  updateRiskEvaluation(environmentID, riskEvaluationID, opts) {
    return this.updateRiskEvaluationWithHttpInfo(environmentID, riskEvaluationID, opts).then(function (response_and_data) {
      return response_and_data.data;
    });
  }
}