/**
 * PingOne Platform API - Credentials
 * The PingOne Platform API covering the PingOne Credentials service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CredentialTypeMetaDataFieldsInner from './CredentialTypeMetaDataFieldsInner';

/**
 * The CredentialTypeMetaData model module.
 * @module model/CredentialTypeMetaData
 * @version 2023-06-29
 */
class CredentialTypeMetaData {
  /**
   * Constructs a new <code>CredentialTypeMetaData</code>.
   * @alias module:model/CredentialTypeMetaData
   */
  constructor() {
    CredentialTypeMetaData.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>CredentialTypeMetaData</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CredentialTypeMetaData} obj Optional instance to populate.
   * @return {module:model/CredentialTypeMetaData} The populated <code>CredentialTypeMetaData</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CredentialTypeMetaData();
      if (data.hasOwnProperty('backgroundImage')) {
        obj['backgroundImage'] = ApiClient.convertToType(data['backgroundImage'], 'String');
      }
      if (data.hasOwnProperty('bgOpacityPercent')) {
        obj['bgOpacityPercent'] = ApiClient.convertToType(data['bgOpacityPercent'], 'Number');
      }
      if (data.hasOwnProperty('cardColor')) {
        obj['cardColor'] = ApiClient.convertToType(data['cardColor'], 'String');
      }
      if (data.hasOwnProperty('columns')) {
        obj['columns'] = ApiClient.convertToType(data['columns'], 'Number');
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('fields')) {
        obj['fields'] = ApiClient.convertToType(data['fields'], [CredentialTypeMetaDataFieldsInner]);
      }
      if (data.hasOwnProperty('logoImage')) {
        obj['logoImage'] = ApiClient.convertToType(data['logoImage'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('textColor')) {
        obj['textColor'] = ApiClient.convertToType(data['textColor'], 'String');
      }
      if (data.hasOwnProperty('version')) {
        obj['version'] = ApiClient.convertToType(data['version'], 'Number');
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>CredentialTypeMetaData</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CredentialTypeMetaData</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (data['backgroundImage'] && !(typeof data['backgroundImage'] === 'string' || data['backgroundImage'] instanceof String)) {
      throw new Error("Expected the field `backgroundImage` to be a primitive type in the JSON string but got " + data['backgroundImage']);
    }
    // ensure the json data is a string
    if (data['cardColor'] && !(typeof data['cardColor'] === 'string' || data['cardColor'] instanceof String)) {
      throw new Error("Expected the field `cardColor` to be a primitive type in the JSON string but got " + data['cardColor']);
    }
    // ensure the json data is a string
    if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
      throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
    }
    if (data['fields']) {
      // data not null
      // ensure the json data is an array
      if (!Array.isArray(data['fields'])) {
        throw new Error("Expected the field `fields` to be an array in the JSON data but got " + data['fields']);
      }
      // validate the optional field `fields` (array)
      for (const item of data['fields']) {
        CredentialTypeMetaDataFieldsInner.validateJSON(item);
      }
      ;
    }
    // ensure the json data is a string
    if (data['logoImage'] && !(typeof data['logoImage'] === 'string' || data['logoImage'] instanceof String)) {
      throw new Error("Expected the field `logoImage` to be a primitive type in the JSON string but got " + data['logoImage']);
    }
    // ensure the json data is a string
    if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
      throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
    }
    // ensure the json data is a string
    if (data['textColor'] && !(typeof data['textColor'] === 'string' || data['textColor'] instanceof String)) {
      throw new Error("Expected the field `textColor` to be a primitive type in the JSON string but got " + data['textColor']);
    }
    return true;
  }
}

/**
 * A string that specifies the URL to an image of the background to show in the credential.
 * @member {String} backgroundImage
 */
CredentialTypeMetaData.prototype['backgroundImage'] = undefined;

/**
 * A string that specifies the percent opacity of the background image in the credential. High percentage opacity may make reading text difficult.
 * @member {Number} bgOpacityPercent
 */
CredentialTypeMetaData.prototype['bgOpacityPercent'] = undefined;

/**
 * A string that specifies the color to show on the credential.
 * @member {String} cardColor
 */
CredentialTypeMetaData.prototype['cardColor'] = undefined;

/**
 * An integer value between 1-3 that specifies the vertical layout of displayed fields in the credential type.
 * @member {Number} columns
 */
CredentialTypeMetaData.prototype['columns'] = undefined;

/**
 * A string that specifies the description of the credential.
 * @member {String} description
 */
CredentialTypeMetaData.prototype['description'] = undefined;

/**
 * An array of objects that specifies the fields on the credential.
 * @member {Array.<module:model/CredentialTypeMetaDataFieldsInner>} fields
 */
CredentialTypeMetaData.prototype['fields'] = undefined;

/**
 * A string that specifies the URL to an image of the logo to show in the credential.
 * @member {String} logoImage
 */
CredentialTypeMetaData.prototype['logoImage'] = undefined;

/**
 * A string that specifies the name of the credential.
 * @member {String} name
 */
CredentialTypeMetaData.prototype['name'] = undefined;

/**
 * A string that specifies the color of the text to show on the credential.
 * @member {String} textColor
 */
CredentialTypeMetaData.prototype['textColor'] = undefined;

/**
 * An integer that specifies the version of this credential. If not provided, the service assigns a version.
 * @member {Number} version
 */
CredentialTypeMetaData.prototype['version'] = undefined;
export default CredentialTypeMetaData;