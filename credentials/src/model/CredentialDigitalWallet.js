/**
 * PingOne Platform API - Credentials
 * The PingOne Platform API covering the PingOne Credentials service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CredentialDigitalWalletApplication from './CredentialDigitalWalletApplication';
import CredentialDigitalWalletDigitalWalletApplication from './CredentialDigitalWalletDigitalWalletApplication';
import CredentialDigitalWalletNotification from './CredentialDigitalWalletNotification';
import CredentialDigitalWalletPairingSession from './CredentialDigitalWalletPairingSession';
import CredentialDigitalWalletUser from './CredentialDigitalWalletUser';
import LinksHATEOAS from './LinksHATEOAS';
import ObjectEnvironment from './ObjectEnvironment';

/**
 * The CredentialDigitalWallet model module.
 * @module model/CredentialDigitalWallet
 * @version 2023-06-29
 */
class CredentialDigitalWallet {
    /**
     * Constructs a new <code>CredentialDigitalWallet</code>.
     * @alias module:model/CredentialDigitalWallet
     */
    constructor() { 
        
        CredentialDigitalWallet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CredentialDigitalWallet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CredentialDigitalWallet} obj Optional instance to populate.
     * @return {module:model/CredentialDigitalWallet} The populated <code>CredentialDigitalWallet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CredentialDigitalWallet();

            if (data.hasOwnProperty('_links')) {
                obj['_links'] = LinksHATEOAS.constructFromObject(data['_links']);
            }
            if (data.hasOwnProperty('application')) {
                obj['application'] = CredentialDigitalWalletApplication.constructFromObject(data['application']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('digitalWalletApplication')) {
                obj['digitalWalletApplication'] = CredentialDigitalWalletDigitalWalletApplication.constructFromObject(data['digitalWalletApplication']);
            }
            if (data.hasOwnProperty('environment')) {
                obj['environment'] = ObjectEnvironment.constructFromObject(data['environment']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('notification')) {
                obj['notification'] = CredentialDigitalWalletNotification.constructFromObject(data['notification']);
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = CredentialDigitalWalletUser.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('pairingSession')) {
                obj['pairingSession'] = CredentialDigitalWalletPairingSession.constructFromObject(data['pairingSession']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CredentialDigitalWallet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CredentialDigitalWallet</code>.
     */
    static validateJSON(data) {
        // validate the optional field `application`
        if (data['application']) { // data not null
          CredentialDigitalWalletApplication.validateJSON(data['application']);
        }
        // validate the optional field `digitalWalletApplication`
        if (data['digitalWalletApplication']) { // data not null
          CredentialDigitalWalletDigitalWalletApplication.validateJSON(data['digitalWalletApplication']);
        }
        // validate the optional field `environment`
        if (data['environment']) { // data not null
          ObjectEnvironment.validateJSON(data['environment']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `notification`
        if (data['notification']) { // data not null
          CredentialDigitalWalletNotification.validateJSON(data['notification']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          CredentialDigitalWalletUser.validateJSON(data['user']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `pairingSession`
        if (data['pairingSession']) { // data not null
          CredentialDigitalWalletPairingSession.validateJSON(data['pairingSession']);
        }

        return true;
    }


}



/**
 * @member {module:model/LinksHATEOAS} _links
 */
CredentialDigitalWallet.prototype['_links'] = undefined;

/**
 * @member {module:model/CredentialDigitalWalletApplication} application
 */
CredentialDigitalWallet.prototype['application'] = undefined;

/**
 * A string that specifies the date and time the credential digital wallet was created.
 * @member {Date} createdAt
 */
CredentialDigitalWallet.prototype['createdAt'] = undefined;

/**
 * @member {module:model/CredentialDigitalWalletDigitalWalletApplication} digitalWalletApplication
 */
CredentialDigitalWallet.prototype['digitalWalletApplication'] = undefined;

/**
 * @member {module:model/ObjectEnvironment} environment
 */
CredentialDigitalWallet.prototype['environment'] = undefined;

/**
 * A string that specifies the identifier (UUID) associated with the credential digital wallet app.
 * @member {String} id
 */
CredentialDigitalWallet.prototype['id'] = undefined;

/**
 * @member {module:model/CredentialDigitalWalletNotification} notification
 */
CredentialDigitalWallet.prototype['notification'] = undefined;

/**
 * A string that specifies the date and time the credential digital wallet was last updated; can be null.
 * @member {Date} updatedAt
 */
CredentialDigitalWallet.prototype['updatedAt'] = undefined;

/**
 * @member {module:model/CredentialDigitalWalletUser} user
 */
CredentialDigitalWallet.prototype['user'] = undefined;

/**
 * A string that specifies the status of the wallet.
 * @member {String} status
 */
CredentialDigitalWallet.prototype['status'] = undefined;

/**
 * @member {module:model/CredentialDigitalWalletPairingSession} pairingSession
 */
CredentialDigitalWallet.prototype['pairingSession'] = undefined;






export default CredentialDigitalWallet;

