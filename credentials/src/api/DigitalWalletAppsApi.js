/**
 * PingOne Platform API - Credentials
 * The PingOne Platform API covering the PingOne Credentials service
 *
 * The version of the OpenAPI document: 2023-06-29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DigitalWalletApplication from '../model/DigitalWalletApplication';
import EntityArray from '../model/EntityArray';
import P1Error from '../model/P1Error';

/**
* DigitalWalletApps service.
* @module api/DigitalWalletAppsApi
* @version 2023-06-29
*/
export default class DigitalWalletAppsApi {

    /**
    * Constructs a new DigitalWalletAppsApi. 
    * @alias module:api/DigitalWalletAppsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create Digital Wallet App
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/DigitalWalletApplication} [digitalWalletApplication] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DigitalWalletApplication} and HTTP response
     */
    createDigitalWalletAppWithHttpInfo(environmentID, opts) {
      opts = opts || {};
      let postBody = opts['digitalWalletApplication'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling createDigitalWalletApp");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DigitalWalletApplication;
      return this.apiClient.callApi(
        '/environments/{environmentID}/digitalWalletApplications', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create Digital Wallet App
     * @param {String} environmentID 
     * @param {Object} opts Optional parameters
     * @param {module:model/DigitalWalletApplication} opts.digitalWalletApplication 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DigitalWalletApplication}
     */
    createDigitalWalletApp(environmentID, opts) {
      return this.createDigitalWalletAppWithHttpInfo(environmentID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete Digital Wallet App
     * @param {String} environmentID 
     * @param {String} digitalWalletApplicationID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteDigitalWalletAppWithHttpInfo(environmentID, digitalWalletApplicationID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling deleteDigitalWalletApp");
      }
      // verify the required parameter 'digitalWalletApplicationID' is set
      if (digitalWalletApplicationID === undefined || digitalWalletApplicationID === null) {
        throw new Error("Missing the required parameter 'digitalWalletApplicationID' when calling deleteDigitalWalletApp");
      }

      let pathParams = {
        'environmentID': environmentID,
        'digitalWalletApplicationID': digitalWalletApplicationID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/environments/{environmentID}/digitalWalletApplications/{digitalWalletApplicationID}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete Digital Wallet App
     * @param {String} environmentID 
     * @param {String} digitalWalletApplicationID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteDigitalWalletApp(environmentID, digitalWalletApplicationID) {
      return this.deleteDigitalWalletAppWithHttpInfo(environmentID, digitalWalletApplicationID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read All Digital Wallet Apps
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/EntityArray} and HTTP response
     */
    readAllDigitalWalletAppsWithHttpInfo(environmentID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readAllDigitalWalletApps");
      }

      let pathParams = {
        'environmentID': environmentID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntityArray;
      return this.apiClient.callApi(
        '/environments/{environmentID}/digitalWalletApplications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read All Digital Wallet Apps
     * @param {String} environmentID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/EntityArray}
     */
    readAllDigitalWalletApps(environmentID) {
      return this.readAllDigitalWalletAppsWithHttpInfo(environmentID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Read One Digital Wallet App
     * @param {String} environmentID 
     * @param {String} digitalWalletApplicationID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DigitalWalletApplication} and HTTP response
     */
    readOneDigitalWalletAppWithHttpInfo(environmentID, digitalWalletApplicationID) {
      let postBody = null;
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling readOneDigitalWalletApp");
      }
      // verify the required parameter 'digitalWalletApplicationID' is set
      if (digitalWalletApplicationID === undefined || digitalWalletApplicationID === null) {
        throw new Error("Missing the required parameter 'digitalWalletApplicationID' when calling readOneDigitalWalletApp");
      }

      let pathParams = {
        'environmentID': environmentID,
        'digitalWalletApplicationID': digitalWalletApplicationID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DigitalWalletApplication;
      return this.apiClient.callApi(
        '/environments/{environmentID}/digitalWalletApplications/{digitalWalletApplicationID}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Read One Digital Wallet App
     * @param {String} environmentID 
     * @param {String} digitalWalletApplicationID 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DigitalWalletApplication}
     */
    readOneDigitalWalletApp(environmentID, digitalWalletApplicationID) {
      return this.readOneDigitalWalletAppWithHttpInfo(environmentID, digitalWalletApplicationID)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update Digital Wallet App
     * @param {String} environmentID 
     * @param {String} digitalWalletApplicationID 
     * @param {Object} opts Optional parameters
     * @param {module:model/DigitalWalletApplication} [digitalWalletApplication] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/DigitalWalletApplication} and HTTP response
     */
    updateDigitalWalletAppWithHttpInfo(environmentID, digitalWalletApplicationID, opts) {
      opts = opts || {};
      let postBody = opts['digitalWalletApplication'];
      // verify the required parameter 'environmentID' is set
      if (environmentID === undefined || environmentID === null) {
        throw new Error("Missing the required parameter 'environmentID' when calling updateDigitalWalletApp");
      }
      // verify the required parameter 'digitalWalletApplicationID' is set
      if (digitalWalletApplicationID === undefined || digitalWalletApplicationID === null) {
        throw new Error("Missing the required parameter 'digitalWalletApplicationID' when calling updateDigitalWalletApp");
      }

      let pathParams = {
        'environmentID': environmentID,
        'digitalWalletApplicationID': digitalWalletApplicationID
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DigitalWalletApplication;
      return this.apiClient.callApi(
        '/environments/{environmentID}/digitalWalletApplications/{digitalWalletApplicationID}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update Digital Wallet App
     * @param {String} environmentID 
     * @param {String} digitalWalletApplicationID 
     * @param {Object} opts Optional parameters
     * @param {module:model/DigitalWalletApplication} opts.digitalWalletApplication 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/DigitalWalletApplication}
     */
    updateDigitalWalletApp(environmentID, digitalWalletApplicationID, opts) {
      return this.updateDigitalWalletAppWithHttpInfo(environmentID, digitalWalletApplicationID, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
